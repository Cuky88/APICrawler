{"url": "https://commercejs.com/docs/api/#introduction", "site": "commercejs.com", "descr": "Please wait ... \r\n            \r\n            \r\n            \r\n        \r\n        \r\n        \r\n        \r\n            \r\n            The link leads directly to this section. \r\n            \r\n            \r\n            Copy the link with Ctrl + C, or right-click with the mouse and choose 'Copy'.\r\n        \r\n        \r\n            \r\n                \r\n                    \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                        \r\n                        \r\n                            \r\n                        \r\n                        \r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        Websites\r\n                    \r\n\r\n                    \r\n                        \r\n                            Operating status\r\n                        \r\n                    \r\n                \r\n                \r\n                    \r\n                        \r\n                            ePay.dk\r\n                        \r\n                        \r\n                            ePay.se\r\n                        \r\n                        \r\n                            ePay.eu\r\n                        \r\n                    \r\n                \r\n                \r\n\r\n    \r\n                    \r\n                        \r\n                    \r\n    \r\n    \r\n                    \r\n                        \r\n                    \r\n    \r\n            \r\n\r\n                \r\n                    \r\n                \r\n\r\n            \r\n            \r\n\r\n            \r\n                \r\n            \r\n\r\n        \r\n                \r\n            \r\n            \r\n                \r\n                    \r\n                        \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            Payment modules\r\n                        \r\n                        \r\n                            Integration\r\n                        \r\n                        \r\n                            Toolbox\r\n                        \r\n                        \r\n                            \r\n                                FAQ\r\n                            \r\n                        \r\n                        \r\n                            \r\n                                 Try ePay \r\n                            \r\n                        \r\n                    \r\n                \r\n\r\n                \r\n                    \r\n                        \r\n                            Webshop\r\n                        \r\n                        \r\n                            Invoice\r\n                        \r\n                        \r\n                            Subscription\r\n                        \r\n                        \r\n                            Partners\r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n\r\n            \r\n\r\n            \r\n\r\n\r\n\t\r\n\t\tPayment web service\r\n        \r\n\r\n\r\n\t\r\n\r\n\r\n\r\n    \r\n         \r\n\tMenu\r\n\t\t\t\r\n\t\t\t\tPayment\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\tSubscription\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\tRecurring\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\tBatch processing\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\tPayment requests\r\n\t\t\t\r\n\r\n\r\n\r\n\r\n\t\r\n\t\tContact us\r\n\t\r\n\r\n\r\n\r\n    \r\n    \r\n\r\n    Technical documentation for the payment web service\r\n    This section contains detailed descriptions of the input and output values which are used for normal payments. The web service for normal payments is found here:\u2022 https://ssl.ditonlinebetalingssystem.dk/remote/payment.asmxHow to read the documentationEvery description of a function consists of input and output fields. Input fields are used when calling the web service. Mandatory fields must be entered, while the rest can be given as empty values. The output fields are returned by the web service.\r\n\r\n    Data flow\r\n    1. When the customers enter their card information and complete a purchase, the payment in authorised. Using the\u00a0authorize\u00a0call, however, requires PCI certification. Instead, use our payment window. This means that we handle the authorisation.2. Use the call\u00a0capture to capture the payment. When the call is completed, your acquirer transfers the captured amount from the card holder\u2019s account to your account.3. If the customer returns the product, or cancels the order after the payment has been captured, you can refund the amount using the credit call. The amount goes back to the card holder's account. You can either refund the full amount or a part of the amount.4. If the customer returns the product, or cancels the order\u00a0before the payment has been captured, you can delete the payment using the delete function. The full amount is released and goes back to the card holder's account.\r\n\r\n    Data types\r\n    The web service uses objects and data types in the SOAP format. The data types are: Integer, Long, String, Enum, Boolean and Datetime. Datetime must be formatted: \"yyyy-MM-dd HH:mm:ss\". All functions return a boolean, indicating whether the operation was successful. If the returning value is false, the integer values epayresponse\u00a0and pbsresponse\u00a0must be used to determine the source of error.\r\n\r\n\r\n\r\n    Expand / Collapse\r\n\r\n\r\n    capture\r\n    \r\n        \r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n            Input fields are the ones you send when calling the web service.Output fields are returned by the web service.\r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n        \r\n        \r\n    \r\n\r\n    credit\r\n    \r\n        \r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n            Input fields are the ones you send when calling the web service.Output fields are returned by the web service.\r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n        \r\n        \r\n    \r\n\r\n    delete\r\n    \r\n        \r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n            Input fields are the ones you send when calling the web service.Output fields are returned by the web service.\r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n        \r\n        \r\n    \r\n\r\n    getEpayError\r\n    \r\n        \r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n            Input fields are the ones you send when calling the web service.Output fields are returned by the web service.\r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n        \r\n        \r\n    \r\n\r\n    getPbsError\r\n    \r\n        \r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n            Input fields are the ones you send when calling the web service.Output fields are returned by the web service.\r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n        \r\n        \r\n    \r\n\r\n    getcardtype\r\n    \r\n        \r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n            Input fields are the ones you send when calling the web service.Output fields are returned by the web service.\r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n        \r\n        \r\n    \r\n\r\n    gettransaction\r\n    \r\n        \r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n            Input fields are the ones you send when calling the web service.Output fields are returned by the web service.\r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n        \r\n        \r\n    \r\n\r\n    gettransactionlist\r\n    \r\n        \r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n            Input fields are the ones you send when calling the web service.Output fields are returned by the web service.\r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n        \r\n        \r\n    \r\n\r\n    getcardinfo\r\n    \r\n        \r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n            Input fields are the ones you send when calling the web service.Output fields are returned by the web service.\r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n        \r\n        \r\n    \r\n\r\n    Troubleshooting\r\n    All deviations from the system are stored in a separate log at ePay's which is accessed from the ePay administration. If you experience problems when calling the web service, information for troubleshooting (debugging) is available in this log.The log is located in your ePay administration in the menu API/Web services -> Remote log. All error codes are available in Support -> System error codes and Support -> Error codes from PBS.\r\n    \r\n\r\n\r\n        \r\n\r\n        \r\n\r\n        \r\n            \r\n                Try ePay for free\r\n                Sign up for a test account, and try our payment modules. It's fast, easy and non-binding - and it won't cost you a penny.\r\n            \r\n            \r\n                \r\n                     Try ePay", "time": "2017-05-24T23:38:59.629377"}
{"url": "https://commercejs.com/docs/api/#introduction", "site": "commercejs.com", "descr": "Please wait ... \r\n            \r\n            \r\n            \r\n        \r\n        \r\n        \r\n        \r\n            \r\n            The link leads directly to this section. \r\n            \r\n            \r\n            Copy the link with Ctrl + C, or right-click with the mouse and choose 'Copy'.\r\n        \r\n        \r\n            \r\n                \r\n                    \r\n                        \r\n                    \r\n\r\n                    \r\n                        \r\n                            \r\n                        \r\n                        \r\n                            \r\n                        \r\n                        \r\n                            \r\n                        \r\n                    \r\n\r\n                    \r\n                        Websites\r\n                    \r\n\r\n                    \r\n                        \r\n                            Operating status\r\n                        \r\n                    \r\n                \r\n                \r\n                    \r\n                        \r\n                            ePay.dk\r\n                        \r\n                        \r\n                            ePay.se\r\n                        \r\n                        \r\n                            ePay.eu\r\n                        \r\n                    \r\n                \r\n                \r\n\r\n    \r\n                    \r\n                        \r\n                    \r\n    \r\n    \r\n                    \r\n                        \r\n                    \r\n    \r\n            \r\n\r\n                \r\n                    \r\n                \r\n\r\n            \r\n            \r\n\r\n            \r\n                \r\n            \r\n\r\n        \r\n                \r\n            \r\n            \r\n                \r\n                    \r\n                        \r\n                            \r\n                        \r\n                    \r\n                    \r\n                        \r\n                            Payment modules\r\n                        \r\n                        \r\n                            Integration\r\n                        \r\n                        \r\n                            Toolbox\r\n                        \r\n                        \r\n                            \r\n                                FAQ\r\n                            \r\n                        \r\n                        \r\n                            \r\n                                 Try ePay \r\n                            \r\n                        \r\n                    \r\n                \r\n\r\n                \r\n                    \r\n                        \r\n                            Webshop\r\n                        \r\n                        \r\n                            Invoice\r\n                        \r\n                        \r\n                            Subscription\r\n                        \r\n                        \r\n                            Partners\r\n                        \r\n                    \r\n                \r\n            \r\n            \r\n\r\n            \r\n\r\n            \r\n\r\n\r\n\t\r\n\t\tPayment web service\r\n        \r\n\r\n\r\n\t\r\n\r\n\r\n\r\n    \r\n         \r\n\tMenu\r\n\t\t\t\r\n\t\t\t\tPayment\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\tSubscription\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\tRecurring\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\tBatch processing\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\tPayment requests\r\n\t\t\t\r\n\r\n\r\n\r\n\r\n\t\r\n\t\tContact us\r\n\t\r\n\r\n\r\n\r\n    \r\n    \r\n\r\n    Technical documentation for the payment web service\r\n    This section contains detailed descriptions of the input and output values which are used for normal payments. The web service for normal payments is found here:\u2022 https://ssl.ditonlinebetalingssystem.dk/remote/payment.asmxHow to read the documentationEvery description of a function consists of input and output fields. Input fields are used when calling the web service. Mandatory fields must be entered, while the rest can be given as empty values. The output fields are returned by the web service.\r\n\r\n    Data flow\r\n    1. When the customers enter their card information and complete a purchase, the payment in authorised. Using the\u00a0authorize\u00a0call, however, requires PCI certification. Instead, use our payment window. This means that we handle the authorisation.2. Use the call\u00a0capture to capture the payment. When the call is completed, your acquirer transfers the captured amount from the card holder\u2019s account to your account.3. If the customer returns the product, or cancels the order after the payment has been captured, you can refund the amount using the credit call. The amount goes back to the card holder's account. You can either refund the full amount or a part of the amount.4. If the customer returns the product, or cancels the order\u00a0before the payment has been captured, you can delete the payment using the delete function. The full amount is released and goes back to the card holder's account.\r\n\r\n    Data types\r\n    The web service uses objects and data types in the SOAP format. The data types are: Integer, Long, String, Enum, Boolean and Datetime. Datetime must be formatted: \"yyyy-MM-dd HH:mm:ss\". All functions return a boolean, indicating whether the operation was successful. If the returning value is false, the integer values epayresponse\u00a0and pbsresponse\u00a0must be used to determine the source of error.\r\n\r\n\r\n\r\n    Expand / Collapse\r\n\r\n\r\n    capture\r\n    \r\n        \r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n            Input fields are the ones you send when calling the web service.Output fields are returned by the web service.\r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n        \r\n        \r\n    \r\n\r\n    credit\r\n    \r\n        \r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n            Input fields are the ones you send when calling the web service.Output fields are returned by the web service.\r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n        \r\n        \r\n    \r\n\r\n    delete\r\n    \r\n        \r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n            Input fields are the ones you send when calling the web service.Output fields are returned by the web service.\r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n        \r\n        \r\n    \r\n\r\n    getEpayError\r\n    \r\n        \r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n            Input fields are the ones you send when calling the web service.Output fields are returned by the web service.\r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n        \r\n        \r\n    \r\n\r\n    getPbsError\r\n    \r\n        \r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n            Input fields are the ones you send when calling the web service.Output fields are returned by the web service.\r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n        \r\n        \r\n    \r\n\r\n    getcardtype\r\n    \r\n        \r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n            Input fields are the ones you send when calling the web service.Output fields are returned by the web service.\r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n        \r\n        \r\n    \r\n\r\n    gettransaction\r\n    \r\n        \r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n            Input fields are the ones you send when calling the web service.Output fields are returned by the web service.\r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n        \r\n        \r\n    \r\n\r\n    gettransactionlist\r\n    \r\n        \r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n            Input fields are the ones you send when calling the web service.Output fields are returned by the web service.\r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n        \r\n        \r\n    \r\n\r\n    getcardinfo\r\n    \r\n        \r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n            Input fields are the ones you send when calling the web service.Output fields are returned by the web service.\r\n                \r\n                    \r\n                        \r\n                    \r\n                \r\n        \r\n        \r\n    \r\n\r\n    Troubleshooting\r\n    All deviations from the system are stored in a separate log at ePay's which is accessed from the ePay administration. If you experience problems when calling the web service, information for troubleshooting (debugging) is available in this log.The log is located in your ePay administration in the menu API/Web services -> Remote log. All error codes are available in Support -> System error codes and Support -> Error codes from PBS.\r\n    \r\n\r\n\r\n        \r\n\r\n        \r\n\r\n        \r\n            \r\n                Try ePay for free\r\n                Sign up for a test account, and try our payment modules. It's fast, easy and non-binding - and it won't cost you a penny.\r\n            \r\n            \r\n                \r\n                     Try ePay", "time": "2017-05-24T23:38:59.629377"}
{"url": "https://developers.cardpay.com/", "site": "cardpay.com", "descr": "Loading...", "time": "2017-05-24T23:38:59.751009"}
{"url": "https://developers.cardpay.com/", "site": "cardpay.com", "descr": "Toggle navigation\n\n\n\n\n\n\n\n\nDevelopers Center \n\n\n\n\nAPI Reference\nGuide\nSign up\n \n\n\n\n\n\n\n\n\n\nimg.wp-smiley,img.emoji{display:inline!important;border:none!important;box-shadow:none!important;height:1em!important;width:1em!important;margin:0 .07em!important;vertical-align:-0.1em!important;background:none!important;padding:0!important;}\n\n\n\n\n\n\n\n\n\n\n\n\n\nAPI DOC\n\n\n\n\n\n\n\n\n\n{{ navigationService.title | uppercase}}\n\n\n+\n-\n-\n\n{{ resourceGroup.title }}\n\n\n\n\n{{ resource.title }}\n\n\n\n\n - Support Center\n - FAQ\n\n\n\n\n\n{{ resourceGroup.title }}\n\n\nBASE URI\n\n\n{{ contentService.uri }}\n\n\n\n\n{{ resource.title }}\n\n\n\n{{ resource.method }}\n\n\n{{ resource.uri }}\n\n\nURI Parameters\n\n\n{{ argument.name }}\n\nREQUIRED\n \n\n\n{{ argument.description }}\n-\n\n\n\nRequest Arguments\n\n\n{{ argument.name }}\n\nREQUIRED\n \n\n\n{{ argument.description }}\n-\n\n\n\nResponse Attributes\n\n\n{{ attribute.name }}\n\n{{ attribute.type }}\n\n\n{{ attribute.description }}\n-\n\n\n\n\n\n\n\n{{ currentLanguage }}\n\n\n\n\n{{ languageValue }}\n\n\n\n\n\n\n\n\n\n\n\nExample Request\n\n                                                    {{ lineCode }}\n                                                \n\n\nExample Request Body\n\n                                                    {\n                                                        '{{ key }}': '{{ value }}',\n                                                    }\n                                                \n\n\nExample Response Body\n\n                                                    {\n                                                        '{{ key }}': '{{ value }}',\n                                                    }\n                                                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{{ currentSectionTitle }}\n\n\n\n\n{{ currentSessionValue.title }}\n\n\n\n\n \n\n\n\n \n\n\n{{ status.name }}\n{{ status.description }}\n\n\n\n\nNo example\nLearn more about Payfirma\n\n\n\n \n\n\nExample\n\n                                    {{ lineCode }}", "time": "2017-05-24T23:38:59.793310"}
{"url": "http://docs.bitwage.com/?python#bitwage-api", "site": "bitwage.com", "descr": "", "time": "2017-05-24T23:38:59.965088"}
{"url": "http://docs.bitwage.com/?python#bitwage-api", "site": "bitwage.com", "descr": "NAV\n        \n      \n    \n    \n        \n        \n              http\n              php\n              java\n        \n        \n          \n        \n        \n      \n      \n        \n            Download PDF\n            Apply to CardPay\n            \u00a9 2009 \u2014 2016 CARDPAY Group\n            Date: 2017-03-16\n        \n    \n    \n      \n      \n        \n          Introduction\n\nWelcome to the CardPay API. You use our APIs to receive payments and check payment status.\nFor recent changes please see the changelog.\n\nEnvironments\n\nThere are two environments available for integration:\n\n\nSandbox environment: https://sandbox.cardpay.com\nProduction environment: https://cardpay.com\n\n\nSandbox Environment\n\nSandbox provides full functionality but it only emulates processing, no actual bank transactions are made. It supports the following card PANs:\n\n\n4000000000000002: CONFIRMED as 3-D Secure transaction\n5555555555554444: DECLINED as 3-D Secure transaction\n4000000000000044: PENDING as 3-D Secure transaction\n4000000000000077: CONFIRMED as non 3-D Secure transaction\n5555555555554477: DECLINED as non 3-D Secure transaction\n4000000000000051: PENDING as non 3-D Secure transaction\n\n\nYou can use any cardholder name, expiry date and CVV2/CVC2 with these PANs.\n3-D Secure is also emulated with a page that doesn\u2019t require any password but only shows you 2 buttons. One button is for successful authentication, another is for failed authentication. Note, that when you chose to fail authentication, order is always declined, no matter what PAN was used.\n\n\nDon\u2019t use real cards on Sandbox environment.\n\n\nTo request any changes in settings of Sandbox environment you can directly contact our support via email or Skype.\n\nProduction Environment\n\nOnce you complete integration with Sandbox environment you will be provided with Production credentials. These are completely different Merchant and User accounts, not related with the ones on Sandbox.\n\n\nIf same user has accounts both on Sandbox and Production, please set different passwords on different environments.\n\n\nProduction always makes real bank transactions, cards from Sandbox are not supported on this environment.\n\nTo request any changes in settings of Production environment you need to contact CardPay manager.\n\nAPI Entry Points\n\nThere are three merchant APIs:\n\n\nFirst one is the Payment API which provides complete server-to-server operations. It is used for sending new orders to the system. It provides a Payment Page Mode. When customer enters card detail on a form located on CardPay payment page or customer enters card details on merchant\u2019s site (Gateway Mode).\nSecond API is the Service API. It has additional methods to provide information about payments and to change payment status.\nThird one is REST API that is still in development and supports only limited number of operations but is intended to replace the first two.\n\n\nAll APIs are available via HTTP protocol using HTTP POST or HTTP GET methods.\n\n\nNote that according to HTTP standards all parameter values must be URLEncoded before sending and URLDecoded after receiving to escape special characters like \u2019 +, /, &, = \u2019 used in URLs to separate words, folders and parameters. When API is used for server-to-server communications the reply is printed inside of response body as text as an XML without any encoding.\n\n\nPayment API Access Modes: Payment Page and Gateway\n\nDepending on account settings Payment API can work in 2 different ways: as a Payment Page or as a Gateway.\n\n          Payment Page Mode\n\nOverview\n\nPayment Page Mode is used when Merchant chooses to use our payment page. Customer is redirected from merchant\u2019s website to our payment page to enter card details.  Customer data entered on our payment page is protected and managed by CardPay and certified to and complies with PCI DSS standard. All customer data is sent via secure connection.\n\nCardPay API Endpoint\n\n\nTest URL: \nLive URL: \n\n\nHTML Form\n\n\nExample HTML Form\n\n\n\n\nTo use API in this mode customer must be provided with HTML Form with filled hidden input fields. This Form is posted to the API URL by pressing \u201cPay\u201d button.\n\nThere are only 2 parameters of request: orderXML and sha512.\n\n\n - Base-64 encoded XML Request\n - see Calculating Digest section\n\n\nXML Request\n\n\nXML Request example using only the minimum required parameters\n\n\n\nElements and attributes are case in-sensitive. Single quotes may be used instead of double quotes.\n\nElements in bold are mandatory. Attributes in bold are mandatory only if Element is present, default value is shown after equals sign.\n\nFollowing data types are used:\n\n\n - any Unicode characters, some validation may be applied though. XX is supported length in Unicode characters, data is truncated if exceeded.\n - only decimal digits.\n - decimal digits with dot as a decimal separator.\n - boolean flag: \u201ctrue\u201d / \u201cfalse\u201d.\n\n\nOrder Element Structure\n\n\n\nShipping Element Structure\n\n\nExample of XML Request with Shipping element:\n\n\n\nSHIPPING is the address where the order will be delivered. It is used in Anti-fraud System and also can be seen in Payment Manager. But it may be omitted and all the fields of it except country may be omitted too.\n\n\n\nItem Element Structure\n\n\nExample of XML Request with Items element:\n\n\n\nItem element represents individual order item or service.\n\n\n\nRecurring\n\nYou can begin recurring by sending usual Order with the attribute \u201crecurring_begin\u201d having value \u201ctrue\u201d in it and then repeat payments from the same card without asking the cardholder to enter card details again. To do this you need to get the value of \u201crecurring_id\u201d attribute from the Payment Result XML or find it in \u201cRecurring Billing\u201d section of Payment Manager.\nWhen you continue recurring with \u201crecurring_id\u201d Payment Page is not displayed because the same card is used as when recurring began. Instead Payment Result XML will be sent in response.\n\nCard Token\n\nCard Token feature is almost the same as Recurring, but the difference is that in this case each payment is made with Cardholder present and requires CVV2/CVC2 and 3-D Secure if available.\nYou can obtain Card Token by sending usual Order with the attribute \u201cgenerate_card_token\u201d having value \u201ctrue\u201d in it. The generated Card Token is sent only in a Callback and only if payment was successful. Each time token is requested, the new one is generated even for the same card.\nTo use Card Token you can send it in \u201ccard_token\u201d attribute, so customer will not have to enter card details again, only CVV2/CVC2 and pass 3-D Secure if needed.\nCard Token cannot be used if this card or this Card Token were not used and no Refunds were made on this card for more than 6 months (180 days).\n\nResponse\n\nAfter Payment is completed, the Customer is redirected to Return URL.\n\nCallback\n\nSee section Callbacks.\n\n          Gateway Mode\n\nOverview\n\nIn Gateway Mode the Customer enters credit card data on the Merchant\u2019s website and order is sent from Merchant to CardPay server-to-server. In this case the Merchant has to collect cardholder data on his website that must be PCI DSS certified for that and then send it as a POST request to the CardPay Payment Endpoint.\n\nIn response to Merchant\u2019s request, CardPay server sends URL the Customer should be redirected to.\nWhen payment is complete, customer will be redirected back to the shop to one of the predefined URLs. Additionally, callbacks and/or email notifications will be sent.\n\nCardPay API Endpoint\n\n\nTest URL: \nLive URL: \n\n\nIn this mode POST method must be used, all data must be sent in a request\u2019s body.\n\nWorkflow\n\n\n\n\nMerchant shows a payment page to the customer. Customer fills card details on  the payment page and submits the form.\nMerchant constructs a payment request (orderXML) with information provided by the customer and sends it to the CardPay payment endpoint. CardPay sends an XML response with the redirect URL to the Merchant:\n\nMerchant redirects the customer to the provided URL for card authorization.\nCardPay shows redirection page to the Customer. Customer interacts with the Issuing Bank\u2019s Access Control Server. On this page they may be asked for 3-D Secure password.\nAfter that Customer is redirected back to CardPay server with the authentication result (PaRes).\nUpon authentication completion, payment is processed.\nCallback message with the transaction status is sent to callback URL, provided by Merchant. Callback URL can be set or changed only by CardPay manager.\nAfter that Customer is redirected back to the Merchant\u2019s site. Depending on the authorization result the Customer is redirected to:\n\n\n (8) - if transaction was successful. If not specified, the Customer is redirected to the Merchant\u2019s website home URL. \n (9) - if transaction has failed. If not specified, the Customer is redirected to the Merchant\u2019s website home URL.\n\n\n\nRequest parameters\n\n\nPHP code example\n\n\n\nThis is server-to-server request. \nThere are only 2 parameters of request: orderXML and sha512.\n\n\n - Base-64 encoded XML Request\n - see Calculating Digest section\n\n\nXML Request\n\n\nXML Request example using only the minimum required parameters\n\n\n\nElements and attributes are case-insensitive. Single quotes may be used instead of double quotes.\n\nElements in bold are mandatory. Attributes in bold are mandatory only if Element is present, default value is shown after equals sign.\n\nElements in bold and italic are conditional, follow the links for details.\n\nFollowing data types are used:\n\n\n - any Unicode characters, some validation may be applied though. XX is supported length in Unicode characters, data is truncated if exceeded.\n - only decimal digits.\n - decimal digits with dot as a decimal separator.\n - boolean flag: \u201ctrue\u201d / \u201cfalse\u201d.\n\n\nOrder Element Structure\n\n\n\nCard Element Structure\n\n\nExample of XML Request with Card element:\n\n\n\n\n\nBilling Element Structure\n\n\nExample of XML Request with Billing element:\n\n\n\nBILLING is the customer\u2019s billing address. Depending on account settings Billing may be required. Element structure is identical to shipping address element.\n\n\n\nShipping Element Structure\n\n\nExample of XML Request with Shipping element:\n\n\n\nSHIPPING is the address where the order will be delivered. It is used in Anti-fraud System and also can be seen in Payment Manager. But it may be omitted and all the fields of it except country may be omitted too. Element structure is identical to billing address element.\n\n\n\nItem Element Structure\n\n\nExample of XML Request with Items element:\n\n\n\nItem element represents individual item or service.\n\n\n\nRecurring\n\nYou can begin recurring by sending usual Order with the attribute \u201crecurring_begin\u201d having value \u201cyes\u201d in it and then repeat payments from the same card without asking the cardholder to enter card details again. To do this you need to get the value of \u201crecurring_id\u201d attribute from the Payment Result XML or find it in \u201cRecurring Billing\u201d section of Payment Manager.\nWhen you continue recurring with \u201crecurring_id\u201d you can omit \u201corder/card\u201d tag in orderXML because the same card is used as when recurring began. Also instead of redirect XML for recurring continue Payment Result XML will be sent in response.\n\nCard Token\n\nCard Token feature is almost the same as Recurring, but the difference is that in this case each payment is made with Cardholder present and requires CVV2/CVC2 and 3-D Secure if available.\nYou can obtain Card Token by sending usual Order with the attribute \u201cgenerate_card_token\u201d having value \u201ctrue\u201d in it. The generated Card Token is sent only in a Callback and only if payment was successful. Each time token is requested, the new one is generated even for the same card.\nTo use Card Token you can send it in \u201ccard_token\u201d attribute, in this case \u201corder/card\u201d tag must contain only \u201ccvv\u201d field.\nCard Token cannot be used if this card or this Card Token were not used and no Refunds were made on this card for more than 6 months (180 days).\n\nHTTP Response\n\n\nExample of XML Response:\n\n\n\nIn Gateway Mode the Merchant receives XML response containing URL a Customer should be redirected to. Customer may open this URL via either GET or POST method.\n\nThe response is in XML format containing one  tag with one  attribute:\n\n\n\nAfter Payment is completed, Customer is redirected to Return URL.\n\nCallback\n\nSee section Callbacks.\n\n          Calculating Digest\n\n\n\nDigest is used for authentication and protecting the message from changes. It is calculated from the order XML and the Secret Word you received with your Wallet ID.\n\nFor example if you have following access parameters:\n\n\nWallet ID = 21\nSecret Word = se1cr2et3w0r4d\n\n\nAnd you are sending the following order:\n\n\n\nThen you\u2019ll need to calculate SHA-512 digest of the following string:\n\n\n\nThat will result in the following:\n\n\nAnd these will be the parameters to be sent to API:\n\n\norderXML = \nsha512 = \n\n\n          Return URLs\n\n\nExample\n\nThe  placeholders will be replaced with real values specific for particular Order.\n\n\n\nReturn URLs are the URLs where customer returns by pressing \u201cBack to the shop\u201d or \u201cCancel\u201d button in Payment Page mode and redirected automatically in Gateway mode.\n\nURL Selection\n\nThere can be 3 different URLs:\n\n\nSuccess URL: where Customer returns after successful transaction\nDecline URL: where Customer returns after failed transaction\nCancel URL: where Customer returns when no transaction was made (only in Payment Page mode)\n\n\nBy default they all point to the Shop\u2019s home page. The default URLs can be changed only by CardPay manager, but they can be sent with each request (see Order element attributes).\n\nURL Placeholders\n\nURLs may contain some of the following placeholders to be replaced with actual values:\n\n\n\nIf placeholder is in upper case, value will be sent in upper case, except for .\n\nNote, that all values are URLEncoded to be compatible with HTTP specifications.\n\n          Payment Result XML\n\n\nExample:\n\n\n\nThis XML is sent to the Callback URL as HTTP POST parameters  and  constructed in the same way as payment request.\n\nAll TAGs and ATTRIBUTE names are sent in lower case.\n\n\n\nStatus Codes\n\nStatus field may have one of these values:\n\n\n\nDecline Codes\n\n\n\n          Callbacks\n\n\nHandling Callback\n\n\n\n\nAfter the transaction is processed, Payment Result XML is sent to callback URL provided by merchant. Callback URL can be set or changed only by CardPay manager.\n\nCallback URL may contain URL Placeholders like Return URLs do, but note that values set to these placeholders are not signed by digest and should not be used for making decisions, only for optimization. To make any changes in order\u2019s status you need to get status, ID and other fields from the  after  digest was validated.\n\nCallbacks are always sent after received order was completed and when it\u2019s status was changed. If it was not delivered, callback will be repeated.\nCallback is marked as delivered if successful code (200) was received. Also you can print some fixed text into your response (for example: \u201cOK\u201d) and notify CardPay manager about it then callback is marked as delivered only if successful code (200) and expected text were received.\n\nIntervals for repeating callbacks are following:\n\n\nup to 5 minutes after 1st attempt\n10 minutes after 2nd attempt\n20 minutes after 3rd attempt\n30 minutes after 4th attempt\n45 minutes after 5th attempt\n1 hour after 6th attempt\n2 hour after 7th attempt\n3 hours after 8th attempt\n5 hours after 9th attempt\n24 hours after 10th attempt (about 37 hours after 1st attempt)\n\n\nYou can also ask your CardPay manager to set e-mail notification about all cases of callback delivery failures or to disable callback repeating.\n\nPayment result can be also sent by email to merchant and/or customer. It may contain any of the following values:\n\n\nAmount and currency\nConfirmation number (authorization code)\nOrder number\nOrder description\n\n\n          Order Services\n\nThe Services are needed to use the Payment Manager functions without using web interface. They provide ability to get the list of orders and change their statuses.\n\nChange Order Status\n\nThis method allows you to change order status. It allows to Capture 2-phase transactions, Void transactions when it\u2019s possible or Refund part or full amount of order.\n\nAuthentication\n\nTo use this service you will need Payment Manager user login and SHA-256 HEX encoded digest of your password. This service will affect only orders available for this user to be modified.\n\nNote: It is strongly recommended to store digest of your password. Do not calculate it from your password for each request!\n\nHTTP  Request\n\n\nExample: For example, if user has login  and password  and you received following payment result:\n\n\n\n\nthen your request to void payment should look like:\n\n\n\nService Endpoint\n\nThis service is available on following entry points URL:\n\n\nTest URL: \nLive URL: \n\n\nRequest attributes must be sent as HTTP request parameters. According to HTTP specification all parameter values must be URLEncoded.\n\nParameters marked with * are applied only to refund operations.\n\n\n\nXML Response\n\n\nOrder status response example:\n\n\n\nReply comes as XML content in the HTTP Response body.\n\n\n\nOrder Element Structure\n\n\n\nNote: when status of refund is PENDING it means that it was not processed yet, the final status will be set later and it can be declined.\n\n          REST API\n\nThe CardPay API uses HTTP verbs and a RESTful endpoint structure. Request and response payloads are formatted as JSON.\n\nAPI Endpoints\n\nThe API is available at the following URLs:\n\n\nTest URL: \nLive URL: \n\n\nAuthentication\n\n\nAuthorization header example\n\n\n\n\nTo use this service you will need Payment Manager user login and password. This service will affect only orders available for this user to be seen.\n\nThis service uses Basic access authentication. To authenticate you need to add  header to HTTP request:\n\n\n\nAUTHORIZATION_TOKEN string is a Base64 encoded credentials string. The credentials string format is: :.\n\nJSON document format\n\nThe request data is sent in the HTTP Request body having the .\n\nUnless otherwise noted, objects defined by this specification SHOULD NOT contain any additional members.\nClient and server implementations MUST ignore members not recognized by this specification. This allows the API to evolve.\n\nA JSON object MUST be at the root of JSON API request and response containing data. This object defines a document\u2019s \u201ctop level\u201d.\n\nA document contain at least one of the following top-level members:\n\n\n: the document\u2019s \u201cprimary data\u201d\n: an array of error objects\n: a meta object that contains non-standard meta-information.\n\n\nA document MAY contain any of these top-level members:\n\n\n: a links object related to the primary data.\n\n\nThe top-level links object MAY contain the following members:\n\n\n: the link that generated the current response document.\n: a related resource link when the primary data represents a resource relationship.\npagination links for the primary data.\n\n\nThe document\u2019s \u201cprimary data\u201d is a representation of the resource or collection of resources targeted by a request.\n\nPrimary data MUST be either:\n\n\na single resource object, a single resource identifier object, or null, for requests that target single resources\nan array of resource objects, an array of resource identifier objects, or an empty array (), for requests that target resource collections\n\n\nA logical collection of resources MUST be represented as an array, even if it only contains one item or is empty.\n\n\u201cResource objects\u201d appear in a JSON API document to represent resources.\n\nA resource object SHOULD contain at least the following top-level members:\n\n\nid\ntype\n\n\nException: The id member is not required when the resource object originates at the client and represents a new resource to be created on the server.\n\n\n\nErrors\n\nProcessing Errors\n\nA server MAY choose to stop processing as soon as a problem is encountered, or it MAY continue processing and encounter multiple problems.\nFor instance, a server might process multiple attributes and then return multiple validation problems in a single response.\n\nWhen a server encounters multiple problems for a single request, the most generally applicable HTTP error code SHOULD be used in the response.\nFor instance,  might be appropriate for multiple 4xx errors or  Error might be appropriate for multiple 5xx errors.\n\nError Objects\n\nError objects provide additional information about problems encountered while performing an operation.\nError objects MUST be returned as an array keyed by errors in the top level of a JSON API document.\n\nAn error object MAY have the following members:\n\n\n: a unique identifier for this particular occurrence of the problem.\n: a links object containing the following members:\n\n\n: a link that leads to further details about this particular occurrence of the problem.\n\n: the HTTP status code applicable to this problem, expressed as a string value.\n: a short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.\n: a human-readable explanation specific to this occurrence of the problem.\n: an object containing references to the source of the error, optionally including any of the following members:\n\n\n: a JSON Pointer [RFC6901] to the associated entity in the request document [e.g. \u201c/data\u201d for a primary data object, or \u201c/data/attributes/title\u201d for a specific attribute].\n: a string indicating which URI query parameter caused the error.\n\n: a meta object containing non-standard meta-information about the error.\n\n\n          Payments\n\nThe payments namespace contains resource collections for payments.\n\nThis service is available on following entry points URL:\n\n\nTest URL: \nLive URL: \n\n\nNote that only GET method is allowed.\n\nOperation\n\n \n\nGet the list of payments for a period of time.\nThis service will return only payments available for this user to be seen.\n\nRequest\n\n\nPayments request example\n\n\n\nSee Request Attributes section bellow. These attributes must be sent as HTTP parameters.\n\nResponse\n\n\nPayments response example\n\n\n\nReply comes as JSON content in the HTTP Response body.\n\n\n\nOperation\n\n\nPayment info request example\n\n\n\n\nPayment info response example\n\n\n\n\n\nUse this call to get the state of the payment by it\u2019s id.\n\nOperation returns a  element containing Order Status Object\n\n          Refunds\n\nThe refunds namespace contains resource collections for refunds.\n\nThis service is available on following entry points URL:\n\n\nTest URL: \nLive URL: \n\n\nNote that only GET method is allowed.\n\nOperation\n\n \n\nGet the list of refunds for a period of time.\nThis service will return only refunds available for this user to be seen.\n\nRequest\n\n\nRefunds request example\n\n\n\nSee Request Attributes section bellow. These attributes must be sent as HTTP parameters.\n\nResponse\n\n\nRefunds response example\n\n\n\nReply comes as JSON content in the HTTP Response body.\n\n\n\nOperation\n\n\nRefund info request example\n\n\n\n\nRefund info response example\n\n\n\n\n\nUse this call to get the state of the refund by it\u2019s id.\n\nOperation returns a  element containing Order Status Object\n\n          Common Objects\n\nOrder Report Request Attributes\n\n\n\nOrder Report Response Object\n\n\n\nOrder Status Object\n\n\nSuccessful Order state example\n\n\n\n\nFailed Order state example\n\n\n\n\n\nDecline code and description will be present only when processing was not successful.\n\nOrder States\n\nState field of the order may have one of the following values:\n\n\n\n          Changelog\n\n2017-03-16 - 2.59\n\n\n\u201cDynamic descriptor\u201d parameter was added\n\n\n2016-12-05 - 2.57\n\n\n[XML API]  now returns status and ID of created order\n\n\n2016-11-03 - 2.56\n\n\nJapanese locale was added\n\n\n2016-09-05 - 2.54\n\n\nExamples were updated\n\n\n2016-08-03 - 2.53\n\n\nMaximum amount was increased to 100,000,000 for all operations\n\n\n2016-07-01 - 2.52\n\n\n\u201cCard Token\u201d feature was added\n\u201cAuthentication Request\u201d feature was added\n\n\n2016-05-31 - 2.49\n\n\nOrder state \u201cCHARGEBACK RESOLVED\u201d was added\n\n\n2016-05-05 - 2.48\n\n\nOrder state \u201cCLAIMED\u201d was removed from Order States as no longer supported\n\n\n2016-04-26 - 2.47\n\n\n[REST API] is now enabled by default\n\n\n2016-03-29 - 2.44\n\n\n[XML API]  service is no longer supported\n\n\n2016-03-10 - 2.43\n\n\nAdded description of environments and the list of PANs for Sandbox\n mode was renamed to  mode\n[REST API] is now disabled by default, it can be enabled by CardPay manager\n[REST API] getting the list of orders is described for all order types\nQuotation marks are allowed in  field of Order\nCustomer IP was added to Callback\n[REST API] report parameters are not mandatory now\n\n\n2015-12-23 - 2.42\n\n\n[REST API] parameter  was added to GET request\n[REST API] response descriptions and examples were fixed\n\n\n2015-11-23 - 2.41\n\n\nCallback section was updated\n\n\n2015-10-15 - 2.40\n\n\n[XML API]  service documentation updated\n[REST API] added operation \n[REST API] added operation \n[REST API] added operation \n\n\n2015-09-16 - 2.39\n\n\n[REST API] documentation structure updated\n[REST API] added operation: \nAdded orderXML attributes recurring_begin and recurring_id\nAdded Payment Result attribute recurring_id\n\n\n2015-08-12 - 2.38\n\n\n[REST API] added operation \nCallback section was updated\n\n\n2015-05-15 - 2.35\n\n\nList of Decline Codes was fixed\n\n\n2015-04-21 - 2.33\n\n\nOrder\u2019s attribute customer_id was added\n\n\n2015-03-31 - 2.32\n\n\nDecline code 07 added (\u2018Limit reached\u2019)\n\n\n2015-03-24 - 2.30\n\n\nAPI documentation updated\n\n\n      \n      \n          \n                http\n                php\n                java", "time": "2017-05-24T23:39:00.062189"}
{"url": "https://developers.cloud-elements.com/docs/overview/definitions.html", "site": "cloud-elements.com", "descr": "Docs\n                        \n                        \n                            API Reference\n                        \n                        \n                            Support\n                        \n                    \n                    \n                \n\n                \n                    \n                        \n                            \n                                Log into Dashboard\n                                \n                            \n                        \n                    \n                \n            \n        \n\n        \n            \n                \n                \n                \n                    \n                        \n    Back to DocsPayments REST APIPayPal PaymentsIntegration StepsPrerequisitesCreate PayPal PaymentGet Payment ApprovalExecute PaymentCredit Card PaymentsPCI ComplianceIntegration StepsPrerequisitesCreate Credit Card PaymentAuthorize and Capture PaymentsOverviewIntegration StepsPrerequisitesAuthorize PaymentCapture Authorized PaymentOrdersOverviewIntegration StepsPrerequisitesCreate OrderGet Customer ApprovalExecute OrderAuthorize OrderCapture OrderRefund PaymentsIntegration StepsPrerequisitesFully Refund a SalePartially Refund a SaleRefund a Captured PaymentPayment Experience Web ProfilesIntegration StepsPrerequisitesCreate Web Experience ProfileCreate PayPal Payment with Web ProfileGet Customer ApprovalOther Payment Experience API TasksBilling Plans and AgreementsBilling PlansBilling AgreementIntegration StepsPrerequisitesCreate PlanActivate PlanCreate AgreementGet Customer ApprovalExecute AgreementTest REST API TransactionsIntegration StepsPrerequisitesTest Credit Card PaymentsTest PayPal Payments\n\n                        \n                            \n\t\n  Billing Plans and Agreements\n\n  \nYou use billing plans and billing agreements to create an agreement for a recurring credit card, bank card, or PayPal payment for goods or services.\nBilling plans\nA billing plan includes payment definitions and other details. A plan must include at least one regular payment definition and, optionally, a trial payment definition. A payment definition indicates how often and for how long the subscriber is charged. A plan can specify a type, which indicates whether the payment definitions in the plan have a fixed or infinite number of payment cycles.\nThe plan can also define these optional merchant preferences:\n\n\nHow much it costs to set up the subscription.\n\n\nThe URLs where the customer can approve the subscription and the subscriber can cancel the subscription.\n\n\nThe maximum number of allowed failed payment attempts.\n\n\nWhether PayPal automatically bills the outstanding balance in the next billing cycle. The outstanding balance is the total amount of any previously failed scheduled payments.\n\n\nThe action if the subscriber's initial payment fails. By default, the subscription remains active and the failed payment amount is added to the outstanding balance. If auto-billing is enabled, PayPal automatically bills the outstanding balance in the next billing cycle.\n\n\n\nThis sample plan includes two payment definitions, each with a fixed number of payment cycles, and a set of merchant preferences:\n\nThe plan includes these payment definitions:\n\nBy default, a plan is not active when you create it. To activate it, you must update its  to .\nBilling agreements\nAfter you activate a plan, you can create one or more billing agreements, or actual subscriptions, that you base on the plan. The agreement inherits information from the referenced plan. You also supply customer and payment information and, optionally, can override the referenced plan's merchant preferences and shipping fees and taxes.\nYou can create an agreement for a recurring credit card, bank card, or PayPal payment.\nAn agreement for a credit card or bank card payment executes automatically and no further action is necessary.\nThe customer must approve an agreement for a PayPal payment before you can execute it:\n\n\nYou create the agreement. The response includes links to get the customer's approval and execute the plan. Both links include a payment token.\n\n\nThe customer approves the agreement and enters customer and payment details.\n\n\nYou execute the agreement by using the execute link and the payment token.\n\n\nThe agreement becomes an actual subscription and the customer becomes a subscriber.\n\nIntegration steps\n\n\nPrerequisites\nBefore you can use the Billing Plans and Billing Agreements APIs, you must make your first call and learn about REST API authentication and headers.\nThen, become familiar with basic payment processes, such as how to accept credit card payments.\nIf you are a non-US developer, see International Developer Questions.\nCreate a plan\nTo create a plan, specify the plan details in the JSON request body.\nA billing plan includes payment definitions and other details. A plan must include at least one regular payment definition and, optionally, a trial payment definition. A payment definition indicates how often and for how long the subscriber is charged. A plan can specify a type, which indicates whether the payment definitions in the plan have a fixed or infinite number of payment cycles.\nThe plan can also define these optional merchant preferences:\n\n\nHow much it costs to set up the subscription.\n\n\nThe URLs where the customer can approve the subscription and the subscriber can cancel the subscription.\n\n\nThe maximum number of allowed failed payment attempts.\n\n\nWhether PayPal automatically bills the outstanding balance in the next billing cycle. The outstanding balance is the total amount of any previously failed scheduled payments.\n\n\nThe action if the subscriber's initial payment fails. By default, the subscription remains active and the failed payment amount is added to the outstanding balance. If auto-billing is enabled, PayPal automatically bills the outstanding balance in the next billing cycle.\n\n\n\nThis sample request creates a plan that defines two payment definitions, each with a fixed number of payment cycles, and a set of merchant preferences:\n\nA successful request returns the HTTP  status code and a JSON response that includes an  and the plan details. You use the ID in a subsequent call to activate the plan.\n\nNext, you must activate a plan before your customer can approve an agreement that is based on this plan.\nActivate a plan\nBy default, a plan is not active when you create it.\nThis sample request updates a plan's  to :\n\nA successful request returns the HTTP  status code.\nNext, create an agreement that is based on the plan.\nCreate an agreement\nThis sample request creates an agreement for a PayPal payment that is based on the plan with ID .\n\nA successful call returns agreement details and approval and execute URLs. Both HATEOAS links include a payment token.\n\nNote: When you create an agreement for a PayPal payment, you must get customer approval and execute the agreement.\nWhen you create an agreement for a credit card or bank card payment, the agreement executes automatically. No further action is necessary.\n\nThe payment token in this response is :\n\n\nNote the approval and execute URLs from this response.\nNext, for PayPal payments only, redirect the customer to the approval URL to get approval for the agreement.\nGet customer approval\nWhen you create an agreement for a PayPal payment, the customer must approve the agreement before you can execute it. When the customer approves an agreement, he or she subscribes to the agreement.\n\nNote: Agreements for credit card and bank card payments automatically execute when you create them.\n\nDirect the customer to the approval URL from the create agreement response. The customer approves, and subscribes to, the agreement and enters his or her customer and payment details. After you get the customer and payment details, you can execute the agreement. Then, it becomes an active subscription.\nExecute an agreement\nAfter the customer approves an agreement for a recurring PayPal payment, you execute the agreement.\nThis sample request shows how to use the  link with the payment token from the previous sample response to execute the agreement:\n\nA successful call returns agreement details:\n\nNext\nComplete these billing plan operations, as needed:\n\nShow plan details\nList plans\n\nComplete these billing agreement operations, as needed:\n\nUpdate agreement\nShow agreement details\nBill agreement balance\nCancel agreement\nRe-activate agreement\nSet agreement balance\nSuspend agreement\nList agreement transactions\n\nAdditional information\n\nBilling Plans API reference\nBilling Agreements API reference\n\n\n\n\n  \n\n                        \n                    \n                \n            \n\n            \n                \n                    \n                        \n                            \n                                Docs\n                                \n                                    Express Checkout\n                                    Payment Buttons\n                                    Braintree SDK\n                                    All Docs\n                                \n                            \n                            \n                                Support\n                                \n                                    FAQ\n                                    Merchant Support\n                                    Account Support\n                                    Community\n                                \n                            \n                            \n                                Resources\n                                \n                                    GitHub\n                                    Partners\n                                    Demo Portal\n                                    Blog\n                                \n                            \n                            \n                                Family\n                                \n                                    Braintree\n                                    Venmo\n                                    Paydiant\n                                    Xoom\n                                \n                            \n                        \n                        \n                            \n                                \n                                    Privacy\n                                    Legal\n                                    Contact\n                                \n                            \n                            \n                                Copyright 1999-2017 PayPal. All rights reserved.", "time": "2017-05-24T23:39:00.315805"}
{"url": "https://developers.cloud-elements.com/docs/overview/definitions.html", "site": "cloud-elements.com", "descr": "Allmyles API\n\n\nlatest\n\n\n\n\n\n\n\nIntroduction\nFlights\nSummary\nSearch\nRequest\nPerson\nPassengerTypes\nOptions\nSorting Options\nFilters\nCabin types\nUser Data\nFlexible Date Search Reference\n\n\nResponse Body\nFlightResult\nBreakdown\nTicketDesignator\nCombination\nLeg\nSegment\nStop\nComfort score\nCheck-in charges\n\n\nResponse Codes\nExamples\nRequest\nResponse\nFlexible Date Search\nExamples\nRequest\nResponse\n\n\n\n\nDetails\nRequest\nResponse Body\nFlightDetails\nBaggageTier\nCarryOnBaggageTier\nForm Fields\nForm Field\nAttributes\nField Names\nPrice\nFlightOptions\n\n\nResponse Codes\nExamples\nResponse\n\n\n\n\nBooking\nRequest\nContact\nBilling\nAddress\nPhone\nPassenger\nDocument\n\n\nResponse Body\nResponse Codes\nExamples\nRequest\nResponse\n\n\n\n\nPayment\nRequest\nResponse Body\nResponse Codes\nExamples\nRequest\n\n\n\n\nTicketing\nRequest\nResponse Body\nResponse Codes\nExamples\nResponse\n\n\n\n\nTicketing Status\nAvailable statuses\nRequest\nResponse Body\nExamples\nResponse\n\n\n\n\nRules\nRequest\nResponse Body\nRule\n\n\nResponse Codes\nExamples\nResponse\n\n\n\n\nGet Booking\nRequest\nResponse Body\nResponse Codes\nExamples\nResponse\n\n\n\n\nCancel Booking\nRequest\nResponse Body\nResponse Codes\n\n\n\n\nHotels\nCar Rentals\nMasterdata\nAllmyles PHP SDK\nCertification Requirements\n\n\n\n\n\n\n\nAllmyles API\n\n\n\n\n\nDocs \u00bb\nFlights\n\n Edit on GitHub\n\n\n\n\n\n\n\nFlights\u00b6\n\nSummary\u00b6\nThe flight booking/ticket creation workflow consists of five steps.\n\n\nSearch\nDetails\nBooking\nPayment\nTicketing\n\n\nAdditional calls that are available:\n\n\nTicketing Status\nRules\nGet Booking\nCancel Booking\n\n\n\n\nSearch\u00b6\n\nRequest\u00b6\n\n\n\u00b6\nSearches for flights that match provided criteria.\n\nNote\nIn most cases you\u2019ll want to pass 00:00:00 as time for both your\ndeparture and your return date. Time filtering constraints will be\nvery strict otherwise, often resulting in no matches for your query.\n\n\nNote\nIf you plan to present the results of Flexible Date Search and\nregular search at the same time to your users, you have two options.\n\nYou send both requests in one session - you can only send the second request when you already have the results of the first one.\nYou send the two requests in separate sessions - in this case you have to include Flexible Date Search Reference in the regular search request, and set to_be_referenced to True in the flexible date search request.\n\n\n\n\n\nPerson\u00b6\n\n\n\n\n\nPassengerTypes\u00b6\n\nOne of ,  or \n\n\nOptions\u00b6\n\n\n\n\n\nSorting Options\u00b6\n\nOne of , ,  or \n(Comfort score). Reverse-order sorting is indicated with a  sign\n(e.g.  would return the most expensive option first).\n\n\nFilters\u00b6\n\n\n\n\n\nCabin types\u00b6\n\nOne of , ,  or \n\n\nUser Data\u00b6\n\n\n\n\n\nFlexible Date Search Reference\u00b6\n\n\n\n\n\n\nResponse Body\u00b6\n\n\n\n\nFlightResult\u00b6\n\n\nWarning\nThe  field here does not include the credit card\nsurcharge just yet, as fetching the exact surcharge for a specific\nflight can require an extra 5-10 second call to the external provider.\nThis surcharge is retrieved in the FlightDetails call.\n\n\nWarning\nThe prices returned in the fields total_fare and ticketing_fee are\nconverted to HUF by default if the provider returns them in a different\ncurrency. When displaying prices to the user, please refer to\nprice_charged_by_provider for a more accurate fare, where the total fare\nis returned in the currency the airline is charging, or\ntotal_fare_in_preferred_currencies for prices converted from the\noriginal currency. Important: this price might change later\nas it is not yet updated with credit card and other surcharges.\n\n\n\n\n\nBreakdown\u00b6\n\n\n\n\n\nTicketDesignator\u00b6\n\nTicket designators are the mini-rules for the flight, with entries such as\n.\n\n\n\n\nCombination\u00b6\n\nCombinations are the sets of different flight itineraries that can be\nbooked. Every combination in a flight result is guaranteed to have the\nsame total price, but the departure times, arrival times, and transfer\nlocations can differ.\n\n\n\n\nLeg\u00b6\n\nLegs are made up of one or more segments, and span from one location the\ncustomer searched for to the other.\n\n\n\n\nSegment\u00b6\n\nSegments are the smallest unit of an itinerary. They are the direct\nflights the passenger will take from one stop to another.\n\n\n\n\nStop\u00b6\n\nA stop is either the departure, or the arrival part of a segment.\n\n\n\n\nComfort score\u00b6\n\nComfort score is a variable that indicates how comfortable each\ncombination option is. It is based on different aspects of the\nflight, e.g.:\n\n\nTotal time elapsed from first departure to last arrival\nNumber of flight segments (Segment\u00a0[\u00a0])\nCabin type\nPassenger capacity of aircrafts\nRed-eye flight status, meaning flight leaves or departs at an\ninconvenient time\nThe time elapsed between flight segments\n\n\n\n\n\nCheck-in charges\u00b6\n\n\n\n\n\n\nResponse Codes\u00b6\n\n\n404 \u2018No flights available\u2019\n404 \u2018No flight found for return leg\u2019\n404 \u2018Search does not include a required country\u2019 - It is possible to set\nrules to disallow search queries that don\u2019t include a specific country in the\nitinerary. If a search request doesn\u2019t match the set filter, this is returned\n500 \u2018external provider rejected the request - please try again\u2019: This is\nthe generic error sent when we receive an unknown error as response from the\nprovider\n\n\n\n\nExamples\u00b6\n\nRequest\u00b6\n\nJSON:\n{\n  \"fromLocation\": \"BUD\",\n  \"toLocation\": \"LON\",\n  \"departureDate\": \"2014-05-15T00:00:00\",\n  \"returnDate\": \"2014-05-20T00:00:00\",\n  \"persons\":[\n    {\n      \"passengerType\":\"ADT\",\n      \"quantity\": 2\n    },\n    {\n      \"passengerType\":\"CHD\",\n      \"quantity\": 1\n    }\n  ],\n  \"flexible_date_search_reference\": {\n    \"cookie\": \"1234567asdf\",\n    \"extra_days\": 2\n  }\n}\n\n\n\n\n\nResponse\u00b6\n\nJSON:\n{\n  \"flightResultSet\": [\n    {\n      \"breakdown\": [\n        {\n          \"passengerFare\": {\n            \"fare\": 52.8627,\n            \"tax\": 21.1229,\n            \"ticketDesignators\": [],\n            \"type\": \"ADT\",\n            \"quantity\": 1,\n            \"fare_in_preferred_currencies\": [\n              {\n                \"currency\":GBP\",\n                \"fare\": 72,\n                \"tax\": 21.1229,\n              },\n              {\n                \"currency\": \"USD\",\n                \"fare\": 66,\n                \"tax\": 21.1229,\n              }\n            ],\n          }\n        }\n      ],\n      \"currency\": \"EUR\",\n      \"total_fare\": 57.8627,\n      \"ticketing_fee\": 5,\n      \"total_fare_in_preferred_currencies\": [\n        {\n          \"currency\":GBP\",\n          \"total_fare\": 72,\n        },\n        {\n          \"currency\": \"USD\",\n          \"total_fare\": 66,\n        }\n      ],\n      \"ticketing_fee_in_preferred_currencies\": [\n        {\n          \"currency\":GBP\",\n          \"ticketing_fee\": 3.66,\n        },\n        {\n          \"currency\": \"USD\",\n          \"ticketing_fee\": 5.74,\n        }\n      ],\n      \"price_charged_by_provider\": {\n        \"currency\":GBP\",\n         \"ticketing_fee\": 3.66,\n         \"total_fare\": 72,\n      },\n      \"combinations\": [\n        {\n          \"bookingId\": \"15_0_0\",\n          \"comfortScore\": 47,\n          \"firstLeg\": {\n            \"elapsedTime\": \"0230\",\n            \"flightSegments\": [\n              {\n                \"operatingAirlineName\": \"British Airways\",\n                \"marketingAirlineName\": \"British Airways\",\n                \"aircraft\": \"Airbus Industries A320\",\n                \"arrival\": {\n                  \"airport\": {\n                    \"name\": \"Stansted\",\n                    \"terminal\": null,\n                    \"code\": \"STN\"\n                  },\n                  \"city\": {\n                    \"code\": \"LON\",\n                    \"name\": \"London\"\n                  },\n                  \"dateTime\": \"2014-06-05T23:00:00\"\n                },\n                \"marketingAirline\": \"BA\",\n                \"operatingAirline\": \"FR\",\n                \"departure\": {\n                  \"airport\": {\n                    \"terminal\": null,\n                    \"code\": \"BUD\"\n                    \"name\": \"Liszt Ferenc Intl\",\n                  },\n                  \"city\": {\n                    \"code\": \"BUD\",\n                    \"name\": \"Budapest\"\n                  },\n                  \"dateTime\": \"2014-06-05T21:30:00\"\n                },\n                \"flightNumber\": \"867\",\n                \"availableSeats\": 9,\n                \"cabin\": \"economy\",\n                \"class\": \"Y\",\n              }\n            ]\n          },\n          \"serviceFeeAmount\": 5.0,\n          \"comfortScore\": 50,\n          \"service_fee_in_preferred_currencies\": [\n            {\n              \"currency\":GBP\",\n              \"service_fee\": 3.66,\n            },\n            {\n              \"currency\": \"USD\",\n              \"service_fee\": 5.74,\n            }\n          ],\n        }\n      ]\n    }\n  ]\n}\n\n\n\n\n\nFlexible Date Search\u00b6\n\nReturns the cheapest flight option for all the possible combinations of\nthe departure and arrival dates +/- the number of .\n\nWarning\nTo proceed with the flight workflow after a flexible date search, a\nregular search request must be sent with the parameters of the chosen\noption. It is not possible to make a booking based on booking IDs\nreturned in the flexible date search response! Please include the\nflexible_date_search_reference parameters in the regular search sent\nafter a flexible date search.\n\n\n\n\n\nExamples\u00b6\n\n\nRequest\u00b6\n\nJSON:\n{\n  \"fromLocation\": \"BUD\",\n  \"toLocation\": \"LON\",\n  \"departureDate\": \"2014-05-15T00:00:00\",\n  \"returnDate\": \"2014-05-20T00:00:00\",\n  \"persons\":[\n    {\n      \"passengerType\":\"ADT\",\n      \"quantity\": 2\n    },\n    {\n      \"passengerType\":\"CHD\",\n      \"quantity\": 1\n    }\n  ],\n  \"extraDays\": 3,\n}\n\n\n\n\n\nResponse\u00b6\n\nJSON:\n{\n  \"flightResultSet\": [\n    {\n      \"flightResult\": {\n        \"_comment\": \"same as in regular search response\"\n      },\n      \"fromLocation\": \"BUD\",\n      \"toLocation\": \"LON\",\n      \"departureDate\": \"2015-04-29T00:00:00Z\",\n      \"returnDate\": \"2015-05-06T00:00:00Z\",\n      \"id\": \"0648ae1d-3b48-4a88-b317-a5ca65fd2d67\",\n    }\n  ]\n}\n\n\n\n\n\n\n\nDetails\u00b6\n\nRequest\u00b6\n\n\n\u00b6\nbooking_id is the booking ID of the Combination to get the\ndetails of\n\n\n\nResponse Body\u00b6\n\n\n\n\nFlightDetails\u00b6\n\n\nWarning\nWhile the  field contains the ticket\u2019s final price, baggages\nare not included in that, as the user may be able to choose from\ndifferent baggage tiers. It is the travel site\u2019s responsibility to add\nthe cost of the passenger\u2019s baggages themselves as an extra cost.\n\n\nNote\nProviders return prices in the travel site\u2019s preferred currency\nautomatically. In the rare case that they might fail to do so, the\nAllmyles API will convert the prices to the flight fare\u2019s currency\nautomatically, based on the provider\u2019s currency conversion data.\n\n\n\n\n\nBaggageTier\u00b6\n\nThese objects define the passenger\u2019s options for taking baggages on the\nflight. Each passenger can choose one of these for themselves.\n\nNote\nKeep in mind that while the tier ID\u2019s value may seem closely related to\nthe other fields, it\u2019s not guaranteed to contain any semantic meaning at\nall.\n\n\n\n\n\nCarryOnBaggageTier\u00b6\n\nThese objects define the passenger\u2019s options for taking cabin baggages\non the flight. Each passenger can choose one of these for themselves.\n\n\n\n\nForm Fields\u00b6\nForm fields define criteria for field validation, making it easy to generate\nHTML form elements.\n\n\n\n\n\nForm Field\u00b6\n\n\n\n\n\nAttributes\u00b6\n\n\n\n\n\nField Names\u00b6\n\n\n\n\n\nPrice\u00b6\n\n\n\n\n\nFlightOptions\u00b6\n\n{optionName} below refers to the following names:\n\n\nseatSelectionAvailable\ntravelfusionPrepayAvailable\n\n\n\n\n\n\n\nResponse Codes\u00b6\n\n\n404 \u2018search first\u2019\n412 \u2018a request is already being processed\u2019: This error comes up even\nwhen the other request is asynchronous (i.e. when we are still processing a\nsearch request). The response for async requests does not need to be\nretrieved for this error to clear, just wait a few seconds.\n412 \u2018request is not for the latest search\u2019: One case where this error\nis returned is when a customer is using multiple tabs and trying to select\na flight from an old result list.\n\n\n\n\nExamples\u00b6\n\nResponse\u00b6\n\nJSON:\n{\n  \"flightDetails\": {\n    \"rulesLink\": null,\n    \"baggageTiers\": [\n        {\n            \"tier\": \"0\",\n            \"price\": {\n                \"currency\": null,\n                \"amount\": 0.0\n            },\n            \"max_weights\": [],\n            'total': {\n                'weight': None,\n                'number_of_bags': None,\n            },\n            \"price_in_preferred_currencies\": [\n              {\n                \"currency\":GBP\",\n                \"amount\": 0.0\n              },\n              {\n                \"currency\": \"USD\",\n                \"amount\": 0.0\n              }\n            ],\n        },\n        {\n            \"tier\": \"1\",\n            \"price\": {\n                \"currency\": \"HUF\",\n                \"amount\": 15427.0\n            },\n            \"max_weights\": [15.0],\n            'total': {\n                'weight': None,\n                'number_of_bags': None,\n            },\n            \"price_in_preferred_currencies\": [\n              {\n                \"currency\":GBP\",\n                \"amount\": 10.0\n              },\n              {\n                \"currency\": \"USD\",\n                \"amount\": 12.0\n              }\n            ],\n        },\n        {\n            \"tier\": \"2\",\n            \"price\": {\n                \"currency\": \"HUF\",\n                \"amount\": 37024.8\n            },\n            \"max_weights\": [],\n            'total': {\n                'weight': 45,\n                'number_of_bags': 2,\n            },\n            \"price_in_preferred_currencies\": [\n              {\n                \"currency\":GBP\",\n                \"amount\": 20.0\n              },\n              {\n                \"currency\": \"USD\",\n                \"amount\": 22.0\n              }\n            ],\n        }\n    ],\n    \"carryOnBaggageTiers\": [\n        {\n            \"tier\": \"1\",\n            \"price\": {\n                \"currency\": \"null\",\n                \"amount\": 0.0\n            },\n            \"description\": \"Small cabin bag\",\n        },\n        {\n            \"tier\": \"2\",\n            \"price\": {\n                \"currency\": \"HUF\",\n                \"amount\": 8000.0\n            },\n            \"description\": \"Large cabin bag\",\n        },\n        \"price_in_preferred_currencies\": [\n          {\n            \"currency\":GBP\",\n            \"amount\": 20.0\n          },\n          {\n            \"currency\": \"USD\",\n            \"amount\": 22.0\n          }\n        ],\n    ],\n    \"fields\": {\n      \"passengers\": [\n        {\n          \"tag\": \"select\",\n          \"options\": [\"Mr\", \"Ms\", \"Mrs\"],\n          \"attributes\": [\n            {\n              \"key\": \"required\",\n              \"value\": \"required\"\n            },\n            {\n              \"key\": \"name\",\n              \"value\": \"persons/0/namePrefix\"\n            },\n            {\n              \"key\": \"data-label\",\n              \"value\": \"Name Prefix\"\n            }\n          ],\n        },\n      ],\n      \"contact_info\": [\n        {\n          \"tag\": \"input\",\n          \"attributes\": [\n            {\n              \"key\": \"maxLength\",\n              \"value\": \"30\"\n            },\n            {\n              \"key\": \"type\",\n              \"value\": \"text\"\n            },\n            {\n             \"key\": \"name\",\n             \"value\": \"billingInfo/name\"\n            },\n            {\n              \"key\": \"data-label\",\n              \"value\": \"Name\"\n            }\n          ],\n        },\n      ],\n      \"billing_info\": [\n        {\n          \"_comment\": \"trimmed in example for brevity's sake\"\n        },\n      ]\n    },\n    \"price\": {\n      \"currency\": \"EUR\",\n      \"amount\": 4464.46\n    },\n    \"result\": {\n      \"_comment\": \"trimmed in example for brevity's sake\"\n    },\n    \"options\": {\n      \"seatSelectionAvailable\": false,\n      \"travelfusionPrepayAvailable\": false\n    },\n    \"surcharge\": {\n      \"currency\": \"EUR\",\n      \"amount\": 5.0\n      \"card_type\": \"CA\",\n    },\n    \"price_in_preferred_currencies\": [\n      {\n        \"currency\":GBP\",\n        \"amount\": 3269\n      },\n      {\n        \"currency\": \"USD\",\n        \"amount\": 5162\n      }\n    ],\n    \"surcharge_in_preferred_currencies\": [\n      {\n        \"currency\":GBP\",\n        \"amount\": 5.0\n        \"card_type\": \"CA\",\n      },\n      {\n        \"currency\": \"USD\",\n        \"amount\": 5.0\n        \"card_type\": \"CA\",\n      }\n    ],\n  }\n}\n\n\n\n\n\n\n\nBooking\u00b6\n\n\nNote\nWhen booking LCC flights, there are two possible scenarios.\nBy default, the Allmyles API does not send the book request to the\nexternal provider until the ticketing call arrives, so there\u2019s no\nresponse\u2014an HTTP 204 No Content status code is returned.\nIf you have chosen alternative providers (you have to contact the Allmyles\nsupport about this first), the booking flow of LCC flights is very similar to\nthat of traditional flights. In this case the book response differs just a bit\nfrom the traditional book response - please refer to the book response\nspecifications for detailed information.\n\n\n\nRequest\u00b6\n\n\n\u00b6\n\n\n\nContact\u00b6\n\n\n\n\n\nBilling\u00b6\n\n\n\n\n\nAddress\u00b6\n\n\n\n\n\nPhone\u00b6\n\n\n\n\n\nPassenger\u00b6\n\n\n\n\n\nDocument\u00b6\n\n\n\n\n\n\nResponse Body\u00b6\n\n\nNote\nAgain: by default, there\u2019s no response body for LCC book requests!\nAn HTTP 204 No Content status code confirms that Allmyles saved the\nsent data for later use.\n\n\nWarning\nIf you have chosen alternative providers - that means there IS a book response\nfor LCC flights, this is the response that contains the exact final price that\nshould be shown to the traveler. This price contains the baggage and hand luggage\nsurcharges, if applicable.\n\n\nWarning\nThe format of Contact and FlightResult objects contained\nwithin this response might slightly differ from what\u2019s described in\nthis documentation as requested. This will be fixed in a later version.\n\n\n\n\n\nResponse Codes\u00b6\n\n\n303 \u2018Unable to book this flight - please select a different bookingId\u2019:\nThis error is returned when the external provider encounters a problem such\nas a discrepancy between actual flight data and what they returned from\ntheir cache before. This happens very rarely, or never in production.\n404 \u2018search first\u2019\n412 \u2018a request is already being processed\u2019: This error comes up even\nwhen the other request is asynchronous (i.e. when we are still processing a\nsearch request). The response for async requests does not need to be\nretrieved for this error to clear, just wait a few seconds.\n412 \u2018Already booked.\u2019: This denotes that either us or the external\nprovider has detected a possible duplicate booking, and has broken the flow\nto avoid dupe payments.\n412 \u2018already booked\u2019: This is technically the same as the error above,\nbut is encountered at a different point in the flow. The error messages are\nonly temporarily not the same for these two errors.\n412 \u2018request is not for the latest search\u2019\n500 \u2018could not book flight\u2019: This is the generic error returned when we\nencounter an unknown/empty response from the external provider\n504 \u2018external gateway timed out - book request might very well have been\nsuccessful!\u2019: The booking might, or might not have been completed in this\ncase. The flow should be stopped, and the customer should be contacted to\ncomplete the booking.\n504 \u2018Could not retrieve virtual credit card, flight not booked. An IRN\nshould be sent to payment provider now.\u2019\n\n\n\n\nExamples\u00b6\n\nRequest\u00b6\n\nJSON:\n{\n  \"bookBasket\": [\"1_0_0\"],\n  \"billingInfo\": {\n    \"address\": {\n      \"addressLine1\": \"V\u00e1ci \u00fat 13-14\",\n      \"cityName\": \"Budapest\",\n      \"countryCode\": \"HU\",\n      \"zipCode\": \"1234\"\n    },\n    \"email\": \"[email\u00a0protected]\",\n    \"name\": \"Kovacs Gyula\",\n    \"phone\": {\n      \"areaCode\": \"30\",\n      \"countryCode\": \"36\",\n      \"phoneNumber\": \"1234567\"\n    }\n  },\n  \"contactInfo\": {\n    \"address\": {\n      \"addressLine1\": \"V\u00e1ci \u00fat 13-14\",\n      \"cityName\": \"Budapest\",\n      \"countryCode\": \"HU\",\n      \"zipCode\": \"1234\"\n    },\n    \"email\": \"[email\u00a0protected]\",\n    \"name\": \"Kovacs Lajos\",\n    \"phone\": {\n      \"areaCode\": \"30\",\n      \"countryCode\": \"36\",\n      \"phoneNumber\": \"1234567\"\n    }\n  },\n  \"persons\": [\n    {\n      \"baggage\": \"0\",\n      \"carryOnBaggage\": \"1\",\n      \"birthDate\": \"1974-04-03\",\n      \"document\": {\n        \"dateOfExpiry\": \"2016-09-03\",\n        \"id\": \"12345678\",\n        \"issueCountry\": \"HU\",\n        \"type\": \"Passport\"\n      },\n      \"email\": \"[email\u00a0protected]\",\n      \"firstName\": \"Janos\",\n      \"gender\": \"MALE\",\n      \"lastName\": \"Kovacs\",\n      \"namePrefix\": \"Mr\",\n      \"passengerTypeCode\": \"ADT\"\n    }\n  ]\n}\n\n\n\n\n\nResponse\u00b6\n\nJSON:\n{\n  \"bookingReferenceId\": \"req-cfd7963b187a4fe99702c0373c89cb16\",\n  \"contactInfo\": {\n    \"address\": {\n      \"city\": \"Budapest\",\n      \"countryCode\": \"HU\",\n      \"line1\": \"Madach ut 13-14\",\n      \"line2\": null,\n      \"line3\": null\n    },\n    \"email\": \"[email\u00a0protected]\",\n    \"name\": \"Kovacs Lajos\",\n    \"phone\": {\n      \"areaCode\": \"30\",\n      \"countryCode\": \"36\",\n      \"number\": \"1234567\"\n    }\n  },\n  \"flightData\": {\n    \"_comment\": \"trimmed in example for brevity's sake\"\n  },\n  \"lastTicketingDate\": \"2014-05-16T23:59:59Z\",\n  \"pnr\": \"6YESST\"\n}\n\n\n\n\n\n\n\nPayment\u00b6\nThis is where Allmyles gets the payment data.\nAllmyles is a payment platform agnostic solution. When we receive a\ntransaction ID that points to a successful payment by the passenger, we\nessentially take that money from any Payment Service Provider (PSP),\nand forward it to the provider to buy a ticket in the Ticketing step.\n\nRequest\u00b6\n\n\n\u00b6\n\n\n\n\nResponse Body\u00b6\n\nN/A:\nReturns an HTTP 204 No Content status code if successful.\n\n\n\nResponse Codes\u00b6\n\n\n412 \u2018a request is already being processed\u2019: This error comes up even\nwhen the other request is asynchronous (i.e. when we are still processing a\nsearch request). The response for async requests does not need to be\nretrieved for this error to clear, just wait a few seconds.\n412 \u2018book request should have been received\u2019\n\n\n\n\nExamples\u00b6\n\nRequest\u00b6\n\nJSON:\n{\n  \"paymentId\": \"12345678\",\n  \"basket\": [\"2_1_0\"]\n}\n\n\n\n\n\n\n\nTicketing\u00b6\nTwo important notes:\n\nCall this only when the passenger\u2019s payment completely went through! (That\nis, after the payment provider\u2019s IPN has arrived, confirming that the\ntransaction did not get caught by the fraud protection filter.)\nAfter this call has been made do not issue refunds unless the Allmyles\nAPI explicitly tells you to. It\u2019s way better to just correct ticketing\nerrors manually than to fire automatic refunds even if the ticket purchase\nmight already be locked in for some reason.\n\n\nRequest\u00b6\n\n\n\u00b6\nbooking_id is the booking ID of the Combination to create a\nticket for\n\n\n\nResponse Body\u00b6\n\nBy default, this is just an abstraction for the book call when buying an\nLCC ticket (there\u2019s no separate book and ticketing calls for those flights).\nThis means the response differs greatly depending on whether the flight is\ntraditional or LCC booked through the default providers.\nIf you have chosen alternative providers (you would have to contact the\nAllmyles support about this first), there is a separate book response for\nLCC flights, but the ticket response is the same as described below.\n\n\n\n\nResponse Codes\u00b6\nIn case of errors (referring to response code 202 and 5xx), the client is\nexpected to either have a correct the ticketing manually, or send periodic\nTicketing Status requests until a definitive response is given\n(one of the following statuses: \u2018successful\u2019, \u2018failed\u2019, or \u2018unknown\u2019.) This\nshould take no longer than 40 minutes. Tickets with an unknown status still\nrequire manual intervention.\n\n\n202 \u2018Warning: e-ticket could not be issued due to technical difficulties.\nPlease contact youragent.\u2019: When this error occurs, the actual ticket is\npurchased, but an unknown error happens later on in the flow.\n412 \u2018a request is already being processed\u2019: This error comes up even\nwhen the other request is asynchronous (i.e. when we are still processing a\nsearch request). The response for async requests does not need to be\nretrieved for this error to clear, just wait a few seconds.\n412 \u2018no payment data given\u2019\n412 \u2018book request should have been received\u2019\n412 \u2018book response should have been received\u2019\n500 \u2018booking failed, cannot create ticket\u2019: This error is returned if\nthe book response we last received from the provider contained an error.\n503 \u2018error while creating ticket - please try again later\u2019: This is the\ngeneric error we return when receiving an unknown response for the ticket\nrequest. No refund should be sent without manually checking if the ticket\nhas been issued first.\n504 \u2018ticket creation timed out - but could very well have been\nsuccessful!\u2019: Almost the same as above, refunds are definitely not safe in\nthis case.\n\n\n\n\nExamples\u00b6\n\nResponse\u00b6\n\nJSON for traditional flights:\n\"body\": {\n  \"tickets\": [\n    {\n      \"passenger\": \"Mr Janos kovcas\",\n      \"passenger_type\": \"ADT\",\n      \"ticket\": \"125-4838843038\",\n      \"price\": {\n        \"currency\": \"HUF\",\n        \"total_fare\": 26000.0,\n        \"tax\": 17800.0\n      }\n      \"baggage\": {\n        \"quantity\": 1,\n        \"unit\": \"PC\",\n      },\n      \"price_in_preferred_currencies\": [\n      {\n        \"currency\":GBP\",\n        \"total_fare\": 60.48,\n        \"tax\": 41.41\n      },\n      {\n        \"currency\": \"USD\",\n        \"total_fare\": 94.84,\n        \"tax\": 64.93\n      }\n    ],\n    },\n    {\n      \"passenger\": \"Mr Janos kascvo\",\n      \"passenger_type\": \"ADT\",\n      \"ticket\": \"125-4838843039\",\n      \"price\": {\n        \"currency\": \"HUF\",\n        \"total_fare\": 26000.0,\n        \"tax\": 17800.0\n      }\n      \"baggage\": {\n        \"quantity\": 1,\n        \"unit\": \"PC\",\n      },\n      \"price_in_preferred_currencies\": [\n      {\n        \"currency\":GBP\",\n        \"total_fare\": 60.48,\n        \"tax\": 41.41\n      },\n      {\n        \"currency\": \"USD\",\n        \"total_fare\": 94.84,\n        \"tax\": 64.93\n      }\n    ],\n    }\n  ],\n  \"flightData\": {\n    \"_comment\": \"trimmed in example for brevity's sake\"\n  },\n  \"contactInfo\": {\n    \"address\": {\n      \"city\": \"Budapest\",\n      \"countryCode\": \"HU\",\n      \"line1\": \"Madach ut 13-14\",\n      \"line2\": null,\n      \"line3\": null\n    },\n    \"email\": \"[email\u00a0protected]\",\n    \"name\": \"Kovacs Lajos\",\n    \"phone\": {\n      \"areaCode\": \"30\",\n      \"countryCode\": \"36\",\n      \"number\": \"1234567\"\n    }\n  }\n}\n\n\nJSON for LCC flights:\n{\n  \"bookingReferenceId\": \"req-d65c00dc43ba4ad798e5478803575aab\",\n  \"contactInfo\": {\n    \"address\": {\n      \"city\": \"Budapest\",\n      \"countryCode\": \"HU\",\n      \"line1\": \"Madach ut 13-14\",\n      \"line2\": null,\n      \"line3\": null\n    },\n    \"email\": \"[email\u00a0protected]\",\n    \"name\": \"Kovacs Lajos\",\n    \"phone\": {\n      \"areaCode\": \"30\",\n      \"countryCode\": \"36\",\n      \"number\": \"1234567\"\n    }\n  },\n  \"flightData\": {\n    \"_comment\": \"trimmed in example for brevity's sake\"\n  },\n  \"lastTicketingDate\": null,\n  \"pnr\": \"6YE2LM\",\n  \"ticket\": \"0XN4GTO\",\n  \"baggageTiers\": {\n    \"tier\": \"2\",\n    \"max_weights\": [15.0, 20.0],\n    \"price\": {\n      \"amount\": 37024.8,\n      \"currency\": HUF\n    },\n    \"price_in_preferred_currencies\": [\n      {\n        \"currency\":GBP\",\n        \"amount\": 10.0\n      },\n      {\n        \"currency\": \"USD\",\n        \"amount\": 12.0\n      }\n    ],\n  },\n  \"carryOnBaggageTiers\": {\n    \"tier\": \"2\",\n    \"description\": \"Large cabin bag\",\n    \"price\": {\n      \"amount\": 8000.0,\n      \"currency\": HUF\n    },\n    \"price_in_preferred_currencies\": [\n      {\n        \"currency\":GBP\",\n        \"amount\": 10.0\n      },\n      {\n        \"currency\": \"USD\",\n        \"amount\": 12.0\n      }\n    ],\n  }\n}\n\n\n\n\n\n\n\nTicketing Status\u00b6\nThis call enables checking the result of a ticketing request. This is useful\nwhen it\u2019s unclear whether the ticketing process went through, due to a failure\nat external providers, in Allmyles\u2019 systems, on the client\u2019s server, or anywhere\nin between. The request will identify the correct workflow based on the cookie\nheader\u2019s contents, which must match whatever was sent in the ticket request.\nIf you\u2019re using alternative providers and an LCC booking returns with the\nstatus pending or unknown, keep in mind that the ticket could still be\ncreated successfully in the next 72 hours. You should keep making periodic\nTicketing Status requests at a reduced rated until a successful\nor failed status is returned or the 72-hour period is over.\nThe periodic checks should be made at most once every 5 minutes.\n\nAvailable statuses\u00b6\n\n\ninactive: this is the status returned when the ticketing process has not\nbeen initiated yet, i.e. before a Ticketing request is\nsent\npending: the ticket creation is still in progress\nsuccessful: the ticket has been successfully created. PNR data will be\npassed alongside this status, including the ticket number(s).\nfailed: the ticket creation failed, and the fare can be refunded (do\nnote that this is the only status in which refunds can be automatically made)\nunknown: it is not possible to programmatically determine the outcome of\nthe request. The passenger\u2019s money should be held until a human identifies\nthe issue and determines whether the ticket exists or not.\n\n\n\n\nRequest\u00b6\n\n\n\u00b6\nbooking_id is the booking ID of the Combination whose ticket\u2019s\nstatus we are interested in\n\n\n\nResponse Body\u00b6\n\n\n\n\n\nExamples\u00b6\n\nResponse\u00b6\n\nJSON for traditional flights:\n{\n    \"status\": \"successful\",\n    \"pnr\": {\n        \"deleted\": false,\n        \"id\": \"3L4TMN\",\n        \"passengers\": [\n            {\n                \"birth_date\": \"1974-01-01\",\n                \"email\": \"[email\u00a0protected]\",\n                \"name\": \"SMFDETH HYRASESN/MR\",\n                \"traditional_ticket\": \"125-5249156160\",\n                \"type\": \"ADT\"\n            },\n            {\n                \"birth_date\": \"1974-01-01\",\n                \"email\": null,\n                \"name\": \"SMIATTASDH OSAJOEONHTDNHO/MR\",\n                \"traditional_ticket\": \"125-5249156161\",\n                \"type\": \"ADT\"\n            }\n        ]\n    }\n}\n\n\n\n\n\n\n\nRules\u00b6\nThis call returns the terms and conditions of the flight in question, or a link\nto them if the raw text isn\u2019t available (in case of LCC flights).\n\nRequest\u00b6\n\n\n\u00b6\nbooking_id is the booking ID of the Combination to get the\nrules of\n\n\n\nResponse Body\u00b6\n\n\n\n\nRule\u00b6\n\n\n\n\n\n\nResponse Codes\u00b6\n\n\n404 \u2018search first\u2019\n412 \u2018a request is already being processed\u2019: This error comes up even\nwhen the other request is asynchronous (i.e. when we are still processing a\nsearch request). The response for async requests does not need to be\nretrieved for this error to clear, just wait a few seconds.\n409 \u2018request is not for the latest search\u2019\n\n\n\n\nExamples\u00b6\n\nResponse\u00b6\n\nJSON (for LCC):\n{\n  \"rulesResultSet\": {\n    \"link\": \"https://www.ryanair.com/en/terms-and-conditions\"\n  }\n}\n\n\nJSON (for traditional):\n{\n  \"rulesResultSet\": {\n    \"rules\": [\n      {\n        \"code\": \"OD\",\n        \"text\": \"NONE UNLESS OTHERWISE SPECIFIED\",\n        \"title\": \"OTHER DISCOUNTS\"\n      },\n      {\n        \"code\": \"SO\",\n        \"text\": \"STOPOVERS NOT PERMITTED ON THE FARE COMPONENT.\",\n        \"title\": \"STOPOVERS\"\n      },\n    ]\n  }\n}\n\n\n\n\n\n\n\nGet Booking\u00b6\nThis call returns the details of a booking identified by a PNR locator.\nThis makes it possible to re-open an expired session and send a ticketing\nrequest based on the PNR locator after the initial session is closed.\n\nRequest\u00b6\n\n\n\u00b6\npnr_locator is a unique identifier of the booking, received\nat the book response.\n\n\n\nResponse Body\u00b6\n\n\n\n\n\nResponse Codes\u00b6\n\n\n404 \u2018PNR not found\u2019\n403 \u2018PNR belongs to another auth token\u2019\n\n\n\n\nExamples\u00b6\n\nResponse\u00b6\n\nJSON:\n{\n  \"pnr\": {\n    \"passengers\": [\n      {\n        \"birth_date\": \"1974-01-01\",\n        \"traditional_ticket\": \"123-5249155974\",\n        \"type\": \"ADT\",\n        \"email\": \"[email\u00a0protected]\",\n        \"name\": \"KOVACS JANOS/MR\"\n      }\n    ],\n    \"id\": \"3KWQUK\",\n    \"lcc_ticket\": null\n  }\n}\n\n\n\n\n\n\n\nCancel Booking\u00b6\nThis call cancels the booking identified in the request. Bookings can only\nbe cancelled before a ticket is created. Only bookings of traditional\nflights can be cancelled!\n\nRequest\u00b6\n\n\n\u00b6\npnr_locator is a unique identifier of the booking, received\nat the book response.\n\n\n\nResponse Body\u00b6\n\nN/A:\nReturns an HTTP 204 No Content status code if successful.\n\n\n\nResponse Codes\u00b6\n\n\n403 \u2018PNR belongs to another auth token\u2019\n404 \u2018PNR not found\u2019\n409 \u2018Booking already cancelled.\u2019\n409 \u2018Booked flights can only be cancelled before ticket is created.\u2019\n\n\n\n\n\n\n\n\n\nNext \n Previous\n\n\n\n\n\u00a9 Copyright 2014, Allmyles Ltd.\n\nRevision .\n\n\n\nBuilt with Sphinx using a theme provided by Read the Docs.\n\n\n\n\n\n\n\n Read the Docs\nv: latest\n\n\n\n\nVersions\nlatest\n\n\nDownloads\npdf\nhtmlzip\nepub\n\n\nOn Read the Docs\n\nProject Home\n\n\nBuilds\n\n\n\nFree document hosting provided by Read the Docs.", "time": "2017-05-24T23:39:00.396883"}
{"url": "https://developers.cloud-elements.com/docs/overview/definitions.html", "site": "cloud-elements.com", "descr": "Allmyles API\n\n\nlatest\n\n\n\n\n\n\n\nIntroduction\nFlights\nSummary\nSearch\nRequest\nPerson\nPassengerTypes\nOptions\nSorting Options\nFilters\nCabin types\nUser Data\nFlexible Date Search Reference\n\n\nResponse Body\nFlightResult\nBreakdown\nTicketDesignator\nCombination\nLeg\nSegment\nStop\nComfort score\nCheck-in charges\n\n\nResponse Codes\nExamples\nRequest\nResponse\nFlexible Date Search\nExamples\nRequest\nResponse\n\n\n\n\nDetails\nRequest\nResponse Body\nFlightDetails\nBaggageTier\nCarryOnBaggageTier\nForm Fields\nForm Field\nAttributes\nField Names\nPrice\nFlightOptions\n\n\nResponse Codes\nExamples\nResponse\n\n\n\n\nBooking\nRequest\nContact\nBilling\nAddress\nPhone\nPassenger\nDocument\n\n\nResponse Body\nResponse Codes\nExamples\nRequest\nResponse\n\n\n\n\nPayment\nRequest\nResponse Body\nResponse Codes\nExamples\nRequest\n\n\n\n\nTicketing\nRequest\nResponse Body\nResponse Codes\nExamples\nResponse\n\n\n\n\nTicketing Status\nAvailable statuses\nRequest\nResponse Body\nExamples\nResponse\n\n\n\n\nRules\nRequest\nResponse Body\nRule\n\n\nResponse Codes\nExamples\nResponse\n\n\n\n\nGet Booking\nRequest\nResponse Body\nResponse Codes\nExamples\nResponse\n\n\n\n\nCancel Booking\nRequest\nResponse Body\nResponse Codes\n\n\n\n\nHotels\nCar Rentals\nMasterdata\nAllmyles PHP SDK\nCertification Requirements\n\n\n\n\n\n\n\nAllmyles API\n\n\n\n\n\nDocs \u00bb\nFlights\n\n Edit on GitHub\n\n\n\n\n\n\n\nFlights\u00b6\n\nSummary\u00b6\nThe flight booking/ticket creation workflow consists of five steps.\n\n\nSearch\nDetails\nBooking\nPayment\nTicketing\n\n\nAdditional calls that are available:\n\n\nTicketing Status\nRules\nGet Booking\nCancel Booking\n\n\n\n\nSearch\u00b6\n\nRequest\u00b6\n\n\n\u00b6\nSearches for flights that match provided criteria.\n\nNote\nIn most cases you\u2019ll want to pass 00:00:00 as time for both your\ndeparture and your return date. Time filtering constraints will be\nvery strict otherwise, often resulting in no matches for your query.\n\n\nNote\nIf you plan to present the results of Flexible Date Search and\nregular search at the same time to your users, you have two options.\n\nYou send both requests in one session - you can only send the second request when you already have the results of the first one.\nYou send the two requests in separate sessions - in this case you have to include Flexible Date Search Reference in the regular search request, and set to_be_referenced to True in the flexible date search request.\n\n\n\n\n\nPerson\u00b6\n\n\n\n\n\nPassengerTypes\u00b6\n\nOne of ,  or \n\n\nOptions\u00b6\n\n\n\n\n\nSorting Options\u00b6\n\nOne of , ,  or \n(Comfort score). Reverse-order sorting is indicated with a  sign\n(e.g.  would return the most expensive option first).\n\n\nFilters\u00b6\n\n\n\n\n\nCabin types\u00b6\n\nOne of , ,  or \n\n\nUser Data\u00b6\n\n\n\n\n\nFlexible Date Search Reference\u00b6\n\n\n\n\n\n\nResponse Body\u00b6\n\n\n\n\nFlightResult\u00b6\n\n\nWarning\nThe  field here does not include the credit card\nsurcharge just yet, as fetching the exact surcharge for a specific\nflight can require an extra 5-10 second call to the external provider.\nThis surcharge is retrieved in the FlightDetails call.\n\n\nWarning\nThe prices returned in the fields total_fare and ticketing_fee are\nconverted to HUF by default if the provider returns them in a different\ncurrency. When displaying prices to the user, please refer to\nprice_charged_by_provider for a more accurate fare, where the total fare\nis returned in the currency the airline is charging, or\ntotal_fare_in_preferred_currencies for prices converted from the\noriginal currency. Important: this price might change later\nas it is not yet updated with credit card and other surcharges.\n\n\n\n\n\nBreakdown\u00b6\n\n\n\n\n\nTicketDesignator\u00b6\n\nTicket designators are the mini-rules for the flight, with entries such as\n.\n\n\n\n\nCombination\u00b6\n\nCombinations are the sets of different flight itineraries that can be\nbooked. Every combination in a flight result is guaranteed to have the\nsame total price, but the departure times, arrival times, and transfer\nlocations can differ.\n\n\n\n\nLeg\u00b6\n\nLegs are made up of one or more segments, and span from one location the\ncustomer searched for to the other.\n\n\n\n\nSegment\u00b6\n\nSegments are the smallest unit of an itinerary. They are the direct\nflights the passenger will take from one stop to another.\n\n\n\n\nStop\u00b6\n\nA stop is either the departure, or the arrival part of a segment.\n\n\n\n\nComfort score\u00b6\n\nComfort score is a variable that indicates how comfortable each\ncombination option is. It is based on different aspects of the\nflight, e.g.:\n\n\nTotal time elapsed from first departure to last arrival\nNumber of flight segments (Segment\u00a0[\u00a0])\nCabin type\nPassenger capacity of aircrafts\nRed-eye flight status, meaning flight leaves or departs at an\ninconvenient time\nThe time elapsed between flight segments\n\n\n\n\n\nCheck-in charges\u00b6\n\n\n\n\n\n\nResponse Codes\u00b6\n\n\n404 \u2018No flights available\u2019\n404 \u2018No flight found for return leg\u2019\n404 \u2018Search does not include a required country\u2019 - It is possible to set\nrules to disallow search queries that don\u2019t include a specific country in the\nitinerary. If a search request doesn\u2019t match the set filter, this is returned\n500 \u2018external provider rejected the request - please try again\u2019: This is\nthe generic error sent when we receive an unknown error as response from the\nprovider\n\n\n\n\nExamples\u00b6\n\nRequest\u00b6\n\nJSON:\n{\n  \"fromLocation\": \"BUD\",\n  \"toLocation\": \"LON\",\n  \"departureDate\": \"2014-05-15T00:00:00\",\n  \"returnDate\": \"2014-05-20T00:00:00\",\n  \"persons\":[\n    {\n      \"passengerType\":\"ADT\",\n      \"quantity\": 2\n    },\n    {\n      \"passengerType\":\"CHD\",\n      \"quantity\": 1\n    }\n  ],\n  \"flexible_date_search_reference\": {\n    \"cookie\": \"1234567asdf\",\n    \"extra_days\": 2\n  }\n}\n\n\n\n\n\nResponse\u00b6\n\nJSON:\n{\n  \"flightResultSet\": [\n    {\n      \"breakdown\": [\n        {\n          \"passengerFare\": {\n            \"fare\": 52.8627,\n            \"tax\": 21.1229,\n            \"ticketDesignators\": [],\n            \"type\": \"ADT\",\n            \"quantity\": 1,\n            \"fare_in_preferred_currencies\": [\n              {\n                \"currency\":GBP\",\n                \"fare\": 72,\n                \"tax\": 21.1229,\n              },\n              {\n                \"currency\": \"USD\",\n                \"fare\": 66,\n                \"tax\": 21.1229,\n              }\n            ],\n          }\n        }\n      ],\n      \"currency\": \"EUR\",\n      \"total_fare\": 57.8627,\n      \"ticketing_fee\": 5,\n      \"total_fare_in_preferred_currencies\": [\n        {\n          \"currency\":GBP\",\n          \"total_fare\": 72,\n        },\n        {\n          \"currency\": \"USD\",\n          \"total_fare\": 66,\n        }\n      ],\n      \"ticketing_fee_in_preferred_currencies\": [\n        {\n          \"currency\":GBP\",\n          \"ticketing_fee\": 3.66,\n        },\n        {\n          \"currency\": \"USD\",\n          \"ticketing_fee\": 5.74,\n        }\n      ],\n      \"price_charged_by_provider\": {\n        \"currency\":GBP\",\n         \"ticketing_fee\": 3.66,\n         \"total_fare\": 72,\n      },\n      \"combinations\": [\n        {\n          \"bookingId\": \"15_0_0\",\n          \"comfortScore\": 47,\n          \"firstLeg\": {\n            \"elapsedTime\": \"0230\",\n            \"flightSegments\": [\n              {\n                \"operatingAirlineName\": \"British Airways\",\n                \"marketingAirlineName\": \"British Airways\",\n                \"aircraft\": \"Airbus Industries A320\",\n                \"arrival\": {\n                  \"airport\": {\n                    \"name\": \"Stansted\",\n                    \"terminal\": null,\n                    \"code\": \"STN\"\n                  },\n                  \"city\": {\n                    \"code\": \"LON\",\n                    \"name\": \"London\"\n                  },\n                  \"dateTime\": \"2014-06-05T23:00:00\"\n                },\n                \"marketingAirline\": \"BA\",\n                \"operatingAirline\": \"FR\",\n                \"departure\": {\n                  \"airport\": {\n                    \"terminal\": null,\n                    \"code\": \"BUD\"\n                    \"name\": \"Liszt Ferenc Intl\",\n                  },\n                  \"city\": {\n                    \"code\": \"BUD\",\n                    \"name\": \"Budapest\"\n                  },\n                  \"dateTime\": \"2014-06-05T21:30:00\"\n                },\n                \"flightNumber\": \"867\",\n                \"availableSeats\": 9,\n                \"cabin\": \"economy\",\n                \"class\": \"Y\",\n              }\n            ]\n          },\n          \"serviceFeeAmount\": 5.0,\n          \"comfortScore\": 50,\n          \"service_fee_in_preferred_currencies\": [\n            {\n              \"currency\":GBP\",\n              \"service_fee\": 3.66,\n            },\n            {\n              \"currency\": \"USD\",\n              \"service_fee\": 5.74,\n            }\n          ],\n        }\n      ]\n    }\n  ]\n}\n\n\n\n\n\nFlexible Date Search\u00b6\n\nReturns the cheapest flight option for all the possible combinations of\nthe departure and arrival dates +/- the number of .\n\nWarning\nTo proceed with the flight workflow after a flexible date search, a\nregular search request must be sent with the parameters of the chosen\noption. It is not possible to make a booking based on booking IDs\nreturned in the flexible date search response! Please include the\nflexible_date_search_reference parameters in the regular search sent\nafter a flexible date search.\n\n\n\n\n\nExamples\u00b6\n\n\nRequest\u00b6\n\nJSON:\n{\n  \"fromLocation\": \"BUD\",\n  \"toLocation\": \"LON\",\n  \"departureDate\": \"2014-05-15T00:00:00\",\n  \"returnDate\": \"2014-05-20T00:00:00\",\n  \"persons\":[\n    {\n      \"passengerType\":\"ADT\",\n      \"quantity\": 2\n    },\n    {\n      \"passengerType\":\"CHD\",\n      \"quantity\": 1\n    }\n  ],\n  \"extraDays\": 3,\n}\n\n\n\n\n\nResponse\u00b6\n\nJSON:\n{\n  \"flightResultSet\": [\n    {\n      \"flightResult\": {\n        \"_comment\": \"same as in regular search response\"\n      },\n      \"fromLocation\": \"BUD\",\n      \"toLocation\": \"LON\",\n      \"departureDate\": \"2015-04-29T00:00:00Z\",\n      \"returnDate\": \"2015-05-06T00:00:00Z\",\n      \"id\": \"0648ae1d-3b48-4a88-b317-a5ca65fd2d67\",\n    }\n  ]\n}\n\n\n\n\n\n\n\nDetails\u00b6\n\nRequest\u00b6\n\n\n\u00b6\nbooking_id is the booking ID of the Combination to get the\ndetails of\n\n\n\nResponse Body\u00b6\n\n\n\n\nFlightDetails\u00b6\n\n\nWarning\nWhile the  field contains the ticket\u2019s final price, baggages\nare not included in that, as the user may be able to choose from\ndifferent baggage tiers. It is the travel site\u2019s responsibility to add\nthe cost of the passenger\u2019s baggages themselves as an extra cost.\n\n\nNote\nProviders return prices in the travel site\u2019s preferred currency\nautomatically. In the rare case that they might fail to do so, the\nAllmyles API will convert the prices to the flight fare\u2019s currency\nautomatically, based on the provider\u2019s currency conversion data.\n\n\n\n\n\nBaggageTier\u00b6\n\nThese objects define the passenger\u2019s options for taking baggages on the\nflight. Each passenger can choose one of these for themselves.\n\nNote\nKeep in mind that while the tier ID\u2019s value may seem closely related to\nthe other fields, it\u2019s not guaranteed to contain any semantic meaning at\nall.\n\n\n\n\n\nCarryOnBaggageTier\u00b6\n\nThese objects define the passenger\u2019s options for taking cabin baggages\non the flight. Each passenger can choose one of these for themselves.\n\n\n\n\nForm Fields\u00b6\nForm fields define criteria for field validation, making it easy to generate\nHTML form elements.\n\n\n\n\n\nForm Field\u00b6\n\n\n\n\n\nAttributes\u00b6\n\n\n\n\n\nField Names\u00b6\n\n\n\n\n\nPrice\u00b6\n\n\n\n\n\nFlightOptions\u00b6\n\n{optionName} below refers to the following names:\n\n\nseatSelectionAvailable\ntravelfusionPrepayAvailable\n\n\n\n\n\n\n\nResponse Codes\u00b6\n\n\n404 \u2018search first\u2019\n412 \u2018a request is already being processed\u2019: This error comes up even\nwhen the other request is asynchronous (i.e. when we are still processing a\nsearch request). The response for async requests does not need to be\nretrieved for this error to clear, just wait a few seconds.\n412 \u2018request is not for the latest search\u2019: One case where this error\nis returned is when a customer is using multiple tabs and trying to select\na flight from an old result list.\n\n\n\n\nExamples\u00b6\n\nResponse\u00b6\n\nJSON:\n{\n  \"flightDetails\": {\n    \"rulesLink\": null,\n    \"baggageTiers\": [\n        {\n            \"tier\": \"0\",\n            \"price\": {\n                \"currency\": null,\n                \"amount\": 0.0\n            },\n            \"max_weights\": [],\n            'total': {\n                'weight': None,\n                'number_of_bags': None,\n            },\n            \"price_in_preferred_currencies\": [\n              {\n                \"currency\":GBP\",\n                \"amount\": 0.0\n              },\n              {\n                \"currency\": \"USD\",\n                \"amount\": 0.0\n              }\n            ],\n        },\n        {\n            \"tier\": \"1\",\n            \"price\": {\n                \"currency\": \"HUF\",\n                \"amount\": 15427.0\n            },\n            \"max_weights\": [15.0],\n            'total': {\n                'weight': None,\n                'number_of_bags': None,\n            },\n            \"price_in_preferred_currencies\": [\n              {\n                \"currency\":GBP\",\n                \"amount\": 10.0\n              },\n              {\n                \"currency\": \"USD\",\n                \"amount\": 12.0\n              }\n            ],\n        },\n        {\n            \"tier\": \"2\",\n            \"price\": {\n                \"currency\": \"HUF\",\n                \"amount\": 37024.8\n            },\n            \"max_weights\": [],\n            'total': {\n                'weight': 45,\n                'number_of_bags': 2,\n            },\n            \"price_in_preferred_currencies\": [\n              {\n                \"currency\":GBP\",\n                \"amount\": 20.0\n              },\n              {\n                \"currency\": \"USD\",\n                \"amount\": 22.0\n              }\n            ],\n        }\n    ],\n    \"carryOnBaggageTiers\": [\n        {\n            \"tier\": \"1\",\n            \"price\": {\n                \"currency\": \"null\",\n                \"amount\": 0.0\n            },\n            \"description\": \"Small cabin bag\",\n        },\n        {\n            \"tier\": \"2\",\n            \"price\": {\n                \"currency\": \"HUF\",\n                \"amount\": 8000.0\n            },\n            \"description\": \"Large cabin bag\",\n        },\n        \"price_in_preferred_currencies\": [\n          {\n            \"currency\":GBP\",\n            \"amount\": 20.0\n          },\n          {\n            \"currency\": \"USD\",\n            \"amount\": 22.0\n          }\n        ],\n    ],\n    \"fields\": {\n      \"passengers\": [\n        {\n          \"tag\": \"select\",\n          \"options\": [\"Mr\", \"Ms\", \"Mrs\"],\n          \"attributes\": [\n            {\n              \"key\": \"required\",\n              \"value\": \"required\"\n            },\n            {\n              \"key\": \"name\",\n              \"value\": \"persons/0/namePrefix\"\n            },\n            {\n              \"key\": \"data-label\",\n              \"value\": \"Name Prefix\"\n            }\n          ],\n        },\n      ],\n      \"contact_info\": [\n        {\n          \"tag\": \"input\",\n          \"attributes\": [\n            {\n              \"key\": \"maxLength\",\n              \"value\": \"30\"\n            },\n            {\n              \"key\": \"type\",\n              \"value\": \"text\"\n            },\n            {\n             \"key\": \"name\",\n             \"value\": \"billingInfo/name\"\n            },\n            {\n              \"key\": \"data-label\",\n              \"value\": \"Name\"\n            }\n          ],\n        },\n      ],\n      \"billing_info\": [\n        {\n          \"_comment\": \"trimmed in example for brevity's sake\"\n        },\n      ]\n    },\n    \"price\": {\n      \"currency\": \"EUR\",\n      \"amount\": 4464.46\n    },\n    \"result\": {\n      \"_comment\": \"trimmed in example for brevity's sake\"\n    },\n    \"options\": {\n      \"seatSelectionAvailable\": false,\n      \"travelfusionPrepayAvailable\": false\n    },\n    \"surcharge\": {\n      \"currency\": \"EUR\",\n      \"amount\": 5.0\n      \"card_type\": \"CA\",\n    },\n    \"price_in_preferred_currencies\": [\n      {\n        \"currency\":GBP\",\n        \"amount\": 3269\n      },\n      {\n        \"currency\": \"USD\",\n        \"amount\": 5162\n      }\n    ],\n    \"surcharge_in_preferred_currencies\": [\n      {\n        \"currency\":GBP\",\n        \"amount\": 5.0\n        \"card_type\": \"CA\",\n      },\n      {\n        \"currency\": \"USD\",\n        \"amount\": 5.0\n        \"card_type\": \"CA\",\n      }\n    ],\n  }\n}\n\n\n\n\n\n\n\nBooking\u00b6\n\n\nNote\nWhen booking LCC flights, there are two possible scenarios.\nBy default, the Allmyles API does not send the book request to the\nexternal provider until the ticketing call arrives, so there\u2019s no\nresponse\u2014an HTTP 204 No Content status code is returned.\nIf you have chosen alternative providers (you have to contact the Allmyles\nsupport about this first), the booking flow of LCC flights is very similar to\nthat of traditional flights. In this case the book response differs just a bit\nfrom the traditional book response - please refer to the book response\nspecifications for detailed information.\n\n\n\nRequest\u00b6\n\n\n\u00b6\n\n\n\nContact\u00b6\n\n\n\n\n\nBilling\u00b6\n\n\n\n\n\nAddress\u00b6\n\n\n\n\n\nPhone\u00b6\n\n\n\n\n\nPassenger\u00b6\n\n\n\n\n\nDocument\u00b6\n\n\n\n\n\n\nResponse Body\u00b6\n\n\nNote\nAgain: by default, there\u2019s no response body for LCC book requests!\nAn HTTP 204 No Content status code confirms that Allmyles saved the\nsent data for later use.\n\n\nWarning\nIf you have chosen alternative providers - that means there IS a book response\nfor LCC flights, this is the response that contains the exact final price that\nshould be shown to the traveler. This price contains the baggage and hand luggage\nsurcharges, if applicable.\n\n\nWarning\nThe format of Contact and FlightResult objects contained\nwithin this response might slightly differ from what\u2019s described in\nthis documentation as requested. This will be fixed in a later version.\n\n\n\n\n\nResponse Codes\u00b6\n\n\n303 \u2018Unable to book this flight - please select a different bookingId\u2019:\nThis error is returned when the external provider encounters a problem such\nas a discrepancy between actual flight data and what they returned from\ntheir cache before. This happens very rarely, or never in production.\n404 \u2018search first\u2019\n412 \u2018a request is already being processed\u2019: This error comes up even\nwhen the other request is asynchronous (i.e. when we are still processing a\nsearch request). The response for async requests does not need to be\nretrieved for this error to clear, just wait a few seconds.\n412 \u2018Already booked.\u2019: This denotes that either us or the external\nprovider has detected a possible duplicate booking, and has broken the flow\nto avoid dupe payments.\n412 \u2018already booked\u2019: This is technically the same as the error above,\nbut is encountered at a different point in the flow. The error messages are\nonly temporarily not the same for these two errors.\n412 \u2018request is not for the latest search\u2019\n500 \u2018could not book flight\u2019: This is the generic error returned when we\nencounter an unknown/empty response from the external provider\n504 \u2018external gateway timed out - book request might very well have been\nsuccessful!\u2019: The booking might, or might not have been completed in this\ncase. The flow should be stopped, and the customer should be contacted to\ncomplete the booking.\n504 \u2018Could not retrieve virtual credit card, flight not booked. An IRN\nshould be sent to payment provider now.\u2019\n\n\n\n\nExamples\u00b6\n\nRequest\u00b6\n\nJSON:\n{\n  \"bookBasket\": [\"1_0_0\"],\n  \"billingInfo\": {\n    \"address\": {\n      \"addressLine1\": \"V\u00e1ci \u00fat 13-14\",\n      \"cityName\": \"Budapest\",\n      \"countryCode\": \"HU\",\n      \"zipCode\": \"1234\"\n    },\n    \"email\": \"[email\u00a0protected]\",\n    \"name\": \"Kovacs Gyula\",\n    \"phone\": {\n      \"areaCode\": \"30\",\n      \"countryCode\": \"36\",\n      \"phoneNumber\": \"1234567\"\n    }\n  },\n  \"contactInfo\": {\n    \"address\": {\n      \"addressLine1\": \"V\u00e1ci \u00fat 13-14\",\n      \"cityName\": \"Budapest\",\n      \"countryCode\": \"HU\",\n      \"zipCode\": \"1234\"\n    },\n    \"email\": \"[email\u00a0protected]\",\n    \"name\": \"Kovacs Lajos\",\n    \"phone\": {\n      \"areaCode\": \"30\",\n      \"countryCode\": \"36\",\n      \"phoneNumber\": \"1234567\"\n    }\n  },\n  \"persons\": [\n    {\n      \"baggage\": \"0\",\n      \"carryOnBaggage\": \"1\",\n      \"birthDate\": \"1974-04-03\",\n      \"document\": {\n        \"dateOfExpiry\": \"2016-09-03\",\n        \"id\": \"12345678\",\n        \"issueCountry\": \"HU\",\n        \"type\": \"Passport\"\n      },\n      \"email\": \"[email\u00a0protected]\",\n      \"firstName\": \"Janos\",\n      \"gender\": \"MALE\",\n      \"lastName\": \"Kovacs\",\n      \"namePrefix\": \"Mr\",\n      \"passengerTypeCode\": \"ADT\"\n    }\n  ]\n}\n\n\n\n\n\nResponse\u00b6\n\nJSON:\n{\n  \"bookingReferenceId\": \"req-cfd7963b187a4fe99702c0373c89cb16\",\n  \"contactInfo\": {\n    \"address\": {\n      \"city\": \"Budapest\",\n      \"countryCode\": \"HU\",\n      \"line1\": \"Madach ut 13-14\",\n      \"line2\": null,\n      \"line3\": null\n    },\n    \"email\": \"[email\u00a0protected]\",\n    \"name\": \"Kovacs Lajos\",\n    \"phone\": {\n      \"areaCode\": \"30\",\n      \"countryCode\": \"36\",\n      \"number\": \"1234567\"\n    }\n  },\n  \"flightData\": {\n    \"_comment\": \"trimmed in example for brevity's sake\"\n  },\n  \"lastTicketingDate\": \"2014-05-16T23:59:59Z\",\n  \"pnr\": \"6YESST\"\n}\n\n\n\n\n\n\n\nPayment\u00b6\nThis is where Allmyles gets the payment data.\nAllmyles is a payment platform agnostic solution. When we receive a\ntransaction ID that points to a successful payment by the passenger, we\nessentially take that money from any Payment Service Provider (PSP),\nand forward it to the provider to buy a ticket in the Ticketing step.\n\nRequest\u00b6\n\n\n\u00b6\n\n\n\n\nResponse Body\u00b6\n\nN/A:\nReturns an HTTP 204 No Content status code if successful.\n\n\n\nResponse Codes\u00b6\n\n\n412 \u2018a request is already being processed\u2019: This error comes up even\nwhen the other request is asynchronous (i.e. when we are still processing a\nsearch request). The response for async requests does not need to be\nretrieved for this error to clear, just wait a few seconds.\n412 \u2018book request should have been received\u2019\n\n\n\n\nExamples\u00b6\n\nRequest\u00b6\n\nJSON:\n{\n  \"paymentId\": \"12345678\",\n  \"basket\": [\"2_1_0\"]\n}\n\n\n\n\n\n\n\nTicketing\u00b6\nTwo important notes:\n\nCall this only when the passenger\u2019s payment completely went through! (That\nis, after the payment provider\u2019s IPN has arrived, confirming that the\ntransaction did not get caught by the fraud protection filter.)\nAfter this call has been made do not issue refunds unless the Allmyles\nAPI explicitly tells you to. It\u2019s way better to just correct ticketing\nerrors manually than to fire automatic refunds even if the ticket purchase\nmight already be locked in for some reason.\n\n\nRequest\u00b6\n\n\n\u00b6\nbooking_id is the booking ID of the Combination to create a\nticket for\n\n\n\nResponse Body\u00b6\n\nBy default, this is just an abstraction for the book call when buying an\nLCC ticket (there\u2019s no separate book and ticketing calls for those flights).\nThis means the response differs greatly depending on whether the flight is\ntraditional or LCC booked through the default providers.\nIf you have chosen alternative providers (you would have to contact the\nAllmyles support about this first), there is a separate book response for\nLCC flights, but the ticket response is the same as described below.\n\n\n\n\nResponse Codes\u00b6\nIn case of errors (referring to response code 202 and 5xx), the client is\nexpected to either have a correct the ticketing manually, or send periodic\nTicketing Status requests until a definitive response is given\n(one of the following statuses: \u2018successful\u2019, \u2018failed\u2019, or \u2018unknown\u2019.) This\nshould take no longer than 40 minutes. Tickets with an unknown status still\nrequire manual intervention.\n\n\n202 \u2018Warning: e-ticket could not be issued due to technical difficulties.\nPlease contact youragent.\u2019: When this error occurs, the actual ticket is\npurchased, but an unknown error happens later on in the flow.\n412 \u2018a request is already being processed\u2019: This error comes up even\nwhen the other request is asynchronous (i.e. when we are still processing a\nsearch request). The response for async requests does not need to be\nretrieved for this error to clear, just wait a few seconds.\n412 \u2018no payment data given\u2019\n412 \u2018book request should have been received\u2019\n412 \u2018book response should have been received\u2019\n500 \u2018booking failed, cannot create ticket\u2019: This error is returned if\nthe book response we last received from the provider contained an error.\n503 \u2018error while creating ticket - please try again later\u2019: This is the\ngeneric error we return when receiving an unknown response for the ticket\nrequest. No refund should be sent without manually checking if the ticket\nhas been issued first.\n504 \u2018ticket creation timed out - but could very well have been\nsuccessful!\u2019: Almost the same as above, refunds are definitely not safe in\nthis case.\n\n\n\n\nExamples\u00b6\n\nResponse\u00b6\n\nJSON for traditional flights:\n\"body\": {\n  \"tickets\": [\n    {\n      \"passenger\": \"Mr Janos kovcas\",\n      \"passenger_type\": \"ADT\",\n      \"ticket\": \"125-4838843038\",\n      \"price\": {\n        \"currency\": \"HUF\",\n        \"total_fare\": 26000.0,\n        \"tax\": 17800.0\n      }\n      \"baggage\": {\n        \"quantity\": 1,\n        \"unit\": \"PC\",\n      },\n      \"price_in_preferred_currencies\": [\n      {\n        \"currency\":GBP\",\n        \"total_fare\": 60.48,\n        \"tax\": 41.41\n      },\n      {\n        \"currency\": \"USD\",\n        \"total_fare\": 94.84,\n        \"tax\": 64.93\n      }\n    ],\n    },\n    {\n      \"passenger\": \"Mr Janos kascvo\",\n      \"passenger_type\": \"ADT\",\n      \"ticket\": \"125-4838843039\",\n      \"price\": {\n        \"currency\": \"HUF\",\n        \"total_fare\": 26000.0,\n        \"tax\": 17800.0\n      }\n      \"baggage\": {\n        \"quantity\": 1,\n        \"unit\": \"PC\",\n      },\n      \"price_in_preferred_currencies\": [\n      {\n        \"currency\":GBP\",\n        \"total_fare\": 60.48,\n        \"tax\": 41.41\n      },\n      {\n        \"currency\": \"USD\",\n        \"total_fare\": 94.84,\n        \"tax\": 64.93\n      }\n    ],\n    }\n  ],\n  \"flightData\": {\n    \"_comment\": \"trimmed in example for brevity's sake\"\n  },\n  \"contactInfo\": {\n    \"address\": {\n      \"city\": \"Budapest\",\n      \"countryCode\": \"HU\",\n      \"line1\": \"Madach ut 13-14\",\n      \"line2\": null,\n      \"line3\": null\n    },\n    \"email\": \"[email\u00a0protected]\",\n    \"name\": \"Kovacs Lajos\",\n    \"phone\": {\n      \"areaCode\": \"30\",\n      \"countryCode\": \"36\",\n      \"number\": \"1234567\"\n    }\n  }\n}\n\n\nJSON for LCC flights:\n{\n  \"bookingReferenceId\": \"req-d65c00dc43ba4ad798e5478803575aab\",\n  \"contactInfo\": {\n    \"address\": {\n      \"city\": \"Budapest\",\n      \"countryCode\": \"HU\",\n      \"line1\": \"Madach ut 13-14\",\n      \"line2\": null,\n      \"line3\": null\n    },\n    \"email\": \"[email\u00a0protected]\",\n    \"name\": \"Kovacs Lajos\",\n    \"phone\": {\n      \"areaCode\": \"30\",\n      \"countryCode\": \"36\",\n      \"number\": \"1234567\"\n    }\n  },\n  \"flightData\": {\n    \"_comment\": \"trimmed in example for brevity's sake\"\n  },\n  \"lastTicketingDate\": null,\n  \"pnr\": \"6YE2LM\",\n  \"ticket\": \"0XN4GTO\",\n  \"baggageTiers\": {\n    \"tier\": \"2\",\n    \"max_weights\": [15.0, 20.0],\n    \"price\": {\n      \"amount\": 37024.8,\n      \"currency\": HUF\n    },\n    \"price_in_preferred_currencies\": [\n      {\n        \"currency\":GBP\",\n        \"amount\": 10.0\n      },\n      {\n        \"currency\": \"USD\",\n        \"amount\": 12.0\n      }\n    ],\n  },\n  \"carryOnBaggageTiers\": {\n    \"tier\": \"2\",\n    \"description\": \"Large cabin bag\",\n    \"price\": {\n      \"amount\": 8000.0,\n      \"currency\": HUF\n    },\n    \"price_in_preferred_currencies\": [\n      {\n        \"currency\":GBP\",\n        \"amount\": 10.0\n      },\n      {\n        \"currency\": \"USD\",\n        \"amount\": 12.0\n      }\n    ],\n  }\n}\n\n\n\n\n\n\n\nTicketing Status\u00b6\nThis call enables checking the result of a ticketing request. This is useful\nwhen it\u2019s unclear whether the ticketing process went through, due to a failure\nat external providers, in Allmyles\u2019 systems, on the client\u2019s server, or anywhere\nin between. The request will identify the correct workflow based on the cookie\nheader\u2019s contents, which must match whatever was sent in the ticket request.\nIf you\u2019re using alternative providers and an LCC booking returns with the\nstatus pending or unknown, keep in mind that the ticket could still be\ncreated successfully in the next 72 hours. You should keep making periodic\nTicketing Status requests at a reduced rated until a successful\nor failed status is returned or the 72-hour period is over.\nThe periodic checks should be made at most once every 5 minutes.\n\nAvailable statuses\u00b6\n\n\ninactive: this is the status returned when the ticketing process has not\nbeen initiated yet, i.e. before a Ticketing request is\nsent\npending: the ticket creation is still in progress\nsuccessful: the ticket has been successfully created. PNR data will be\npassed alongside this status, including the ticket number(s).\nfailed: the ticket creation failed, and the fare can be refunded (do\nnote that this is the only status in which refunds can be automatically made)\nunknown: it is not possible to programmatically determine the outcome of\nthe request. The passenger\u2019s money should be held until a human identifies\nthe issue and determines whether the ticket exists or not.\n\n\n\n\nRequest\u00b6\n\n\n\u00b6\nbooking_id is the booking ID of the Combination whose ticket\u2019s\nstatus we are interested in\n\n\n\nResponse Body\u00b6\n\n\n\n\n\nExamples\u00b6\n\nResponse\u00b6\n\nJSON for traditional flights:\n{\n    \"status\": \"successful\",\n    \"pnr\": {\n        \"deleted\": false,\n        \"id\": \"3L4TMN\",\n        \"passengers\": [\n            {\n                \"birth_date\": \"1974-01-01\",\n                \"email\": \"[email\u00a0protected]\",\n                \"name\": \"SMFDETH HYRASESN/MR\",\n                \"traditional_ticket\": \"125-5249156160\",\n                \"type\": \"ADT\"\n            },\n            {\n                \"birth_date\": \"1974-01-01\",\n                \"email\": null,\n                \"name\": \"SMIATTASDH OSAJOEONHTDNHO/MR\",\n                \"traditional_ticket\": \"125-5249156161\",\n                \"type\": \"ADT\"\n            }\n        ]\n    }\n}\n\n\n\n\n\n\n\nRules\u00b6\nThis call returns the terms and conditions of the flight in question, or a link\nto them if the raw text isn\u2019t available (in case of LCC flights).\n\nRequest\u00b6\n\n\n\u00b6\nbooking_id is the booking ID of the Combination to get the\nrules of\n\n\n\nResponse Body\u00b6\n\n\n\n\nRule\u00b6\n\n\n\n\n\n\nResponse Codes\u00b6\n\n\n404 \u2018search first\u2019\n412 \u2018a request is already being processed\u2019: This error comes up even\nwhen the other request is asynchronous (i.e. when we are still processing a\nsearch request). The response for async requests does not need to be\nretrieved for this error to clear, just wait a few seconds.\n409 \u2018request is not for the latest search\u2019\n\n\n\n\nExamples\u00b6\n\nResponse\u00b6\n\nJSON (for LCC):\n{\n  \"rulesResultSet\": {\n    \"link\": \"https://www.ryanair.com/en/terms-and-conditions\"\n  }\n}\n\n\nJSON (for traditional):\n{\n  \"rulesResultSet\": {\n    \"rules\": [\n      {\n        \"code\": \"OD\",\n        \"text\": \"NONE UNLESS OTHERWISE SPECIFIED\",\n        \"title\": \"OTHER DISCOUNTS\"\n      },\n      {\n        \"code\": \"SO\",\n        \"text\": \"STOPOVERS NOT PERMITTED ON THE FARE COMPONENT.\",\n        \"title\": \"STOPOVERS\"\n      },\n    ]\n  }\n}\n\n\n\n\n\n\n\nGet Booking\u00b6\nThis call returns the details of a booking identified by a PNR locator.\nThis makes it possible to re-open an expired session and send a ticketing\nrequest based on the PNR locator after the initial session is closed.\n\nRequest\u00b6\n\n\n\u00b6\npnr_locator is a unique identifier of the booking, received\nat the book response.\n\n\n\nResponse Body\u00b6\n\n\n\n\n\nResponse Codes\u00b6\n\n\n404 \u2018PNR not found\u2019\n403 \u2018PNR belongs to another auth token\u2019\n\n\n\n\nExamples\u00b6\n\nResponse\u00b6\n\nJSON:\n{\n  \"pnr\": {\n    \"passengers\": [\n      {\n        \"birth_date\": \"1974-01-01\",\n        \"traditional_ticket\": \"123-5249155974\",\n        \"type\": \"ADT\",\n        \"email\": \"[email\u00a0protected]\",\n        \"name\": \"KOVACS JANOS/MR\"\n      }\n    ],\n    \"id\": \"3KWQUK\",\n    \"lcc_ticket\": null\n  }\n}\n\n\n\n\n\n\n\nCancel Booking\u00b6\nThis call cancels the booking identified in the request. Bookings can only\nbe cancelled before a ticket is created. Only bookings of traditional\nflights can be cancelled!\n\nRequest\u00b6\n\n\n\u00b6\npnr_locator is a unique identifier of the booking, received\nat the book response.\n\n\n\nResponse Body\u00b6\n\nN/A:\nReturns an HTTP 204 No Content status code if successful.\n\n\n\nResponse Codes\u00b6\n\n\n403 \u2018PNR belongs to another auth token\u2019\n404 \u2018PNR not found\u2019\n409 \u2018Booking already cancelled.\u2019\n409 \u2018Booked flights can only be cancelled before ticket is created.\u2019\n\n\n\n\n\n\n\n\n\nNext \n Previous\n\n\n\n\n\u00a9 Copyright 2014, Allmyles Ltd.\n\nRevision .\n\n\n\nBuilt with Sphinx using a theme provided by Read the Docs.\n\n\n\n\n\n\n\n Read the Docs\nv: latest\n\n\n\n\nVersions\nlatest\n\n\nDownloads\npdf\nhtmlzip\nepub\n\n\nOn Read the Docs\n\nProject Home\n\n\nBuilds\n\n\n\nFree document hosting provided by Read the Docs.", "time": "2017-05-24T23:39:00.396883"}
{"url": "https://docs.connect.squareup.com/articles/square-checkout-overview", "site": "squareup.com", "descr": "NAV\n            \n          \n        \n        \n          \n          \n                python\n                ruby\n                java\n          \n          \n            \n          \n          \n          \n          \n        \n        \n          \n            \n              bitwage api\n\n\nWelcome to the Bitwage API v1.0 Documentation. Last Modified March 8, 2016. \n\nBitwage offers programmatic Access to its resources including Tickers, User, Worker, and Employer.\n\nApplications using Bitwage API v1 include:\n\n\nHubstaff: Time tracking software with screenshots, activity levels, and in-depth reports.\nBitwage Android App: Access to Worker and Employer Resources from Android Device\nBitwage IOS App: Access to Worker and Employer Resources from IOS Device\n\n\nAuthentication information visible on Bitwage Apps Page.\nFor inquiries, submit a message using the contact form at www.bitwage.com. \n\nTable of Contents\n\n\nThe Production entry point: https://api.bitwage.com/v1\nThe Sandbox entry point: https://api.bitwage.biz/v1\n\nAll requests must include an application/json Content-Type Header \nAll production requests must go over SSL.\n\n\n\nAuthentication:  \n1. API Key and Secret \u00a0\u00a0\n2. Web Application Flow \u00a0\u00a0\n3. Username and Password \u00a0\u00a0\n\nTickers:\n1. Tickers \u00a0\u00a0\n2. Ticker \u00a0\u00a0\n\nUser: Profile: \n1. Profile \u00a0\u00a0\n2. Companies \u00a0\u00a0\n\nWorker: History: \n1. Payrolls \u00a0\u00a0\n\nEmployer: Profile: \n1. Profile \u00a0\u00a0\n2. Linked Accounts \u00a0\u00a0\n\nEmployer: Workers: \n1. Workers \u00a0\u00a0\n2. Worker \u00a0\u00a0\n3. Invite Worker \u00a0\u00a0\n4. Email to ID \u00a0\u00a0\n\nEmployer: Payrolls: \n1. Payrolls \u00a0\u00a0\n2. Payroll \u00a0\u00a0\n3. Worker Payrolls \u00a0\u00a0\n4. Create Payroll \u00a0\u00a0\n5. Payroll Payment Method \u00a0\u00a0\n6. Delete Payroll \u00a0\u00a0\n\nEmployer: Invoices: \n1. Invoices \u00a0\u00a0\n2. Invoice \u00a0\u00a0\n3. Approve Invoice \u00a0\u00a0\n\nAuthentication\n\nAccess resources using:\n\n\nAPI Key and Secret (For accessing your own resources)\nWeb Application Flow (For Apps accessing other Employers)\nUsername and Password (For Apps accessing other Workers and/or Employers)\n\n\nStoring Credentials Securely\n\nYou should take great care to ensure your credentials are stored securely. \nIf someone obtains your API Secret or OAUTH2 Access Token, they will be able to use Bitwage as if they were you. \nIn particular, you should avoid storing these credentials in your code base (which gets added to version control) or in your database unless you have encrypted them securely. \nSeparating credentials from your code base and database is a good practice. \nYou can always regenerate your API key if you feel it has been compromised. \nCurrently API key access is available only to Employer accounts and user must opt-in by generating an API Key and Secret.\n\nValidating SSL Certificates\n\nIt is also very important that your application validates our SSL certificate when it connects over https. This helps prevent a man in the middle attack. If you are using a client library, this may be turned on by default, but you should confirm this. If you see a setting to \u2018verify SSL\u2019 you should always ensure it is set to true.\n\nAPI Key + Secret\n\nBitwage offers API Key + Secret Authentication to access your own Bitwage Worker and Employer Resources via the API.\n\n\nCreate a new API Key and Secret on the Bitwage Apps Page.\n\n\nEnhanced Security Controls: can verify the actions and account information you wish to be accessible via the API and specify whether only certain IP Addresses have access. Coming Soon\nNote: Users should never share API key + secret with anyone else.\n\n\n\nHeaders\n\n\n\n\nUse the API Key and Secret to add three headers ACCESS_KEY, ACCESS_SIGNATURE, and ACCESS_NONCE to every API call that requires authentication. This scheme can be called \u201cHMAC authentication.\u201d\n\n\nThe ACCESS_KEY header is your API Key.\nThe ACCESS_NONCE header is a positive integer number that must increase with every request you make. Currently it must be submitted as a header. Coming Soon you can also submit it as a root-level parameter in a JSON POST request and as a GET parameter in the URL.\nThe ACCESS_SIGNATURE header is a HMAC-SHA256 hash of the nonce concatentated with the full URL and body of the HTTP request, encoded using your API Secret.\n\n\nOut-of-order Processing\n\nSometimes network traffic can cause near-simultaneous API calls to arrive out of order. Since the nonce must always be increasing, an API call with a higher nonce may arrive earlier than a separate call with a lower nonce if they are initiated very quickly together. When this happens, the second call will be dropped as invalid. To fix this, a separate expire parameter can be included, specifying a unix timestamp after which the call will not process. When the expire parameter is included, the nonce is ignored. We recommend setting the expire parameter to no greater than 15 minutes in the future to prevent replay attempts.\n\nWeb Application Flow\n\nBitwage is an OAuth 2.0 compliant service. Create your app on the Bitwage Apps Page.\n\nStep 1 - Authorization\n\nTo prevent fraudulent transactions during the authentication process, we will only communicate with URLs that you have identified as trusted endpoints.  Ensure the \u201cOAuth 2.0 Redirect URLs\u201d field for your application contains a valid callback URL to your server that is listening to complete your portion of the authentication workflow.\n\nOnce you save your configuration, your application will be assigned a unique \u201cClient ID\u201d and \u201cClient Secret\u201d value.  Make note of these values \u2014 you will need to integrate them into the configuration files or the actual code of your application.\n\nStep 2 - Requesting an Authorization Code\n\n\nOnce your application is properly configured, it\u2019s time to request an authorization code.  The authorization code is not the final token that you use to make calls to Bitwage with.  It is used in the next step of the OAuth 2.0 flow to exchange for an actual access token.  This is an important step because it provides assurance directly from Bitwage to the user that permission is being granted to the correct application, with the agreed-upon access to the member\u2019s Bitwage profile.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nOnce redirected, the user will be presented with Bitwage\u2019s authentication dialog box.  This identifies your application as well as outlines the particular member permissions that your application has requested.  If desired, the logo and application name can be changed in your application configuration.\n\nAfter the application is approved, the user will be redirected to the redirect_uri, which will have two important URL arguments that you will need to read from this request:\n\n\ncode: The OAuth 2.0 authorization code.\nstate: Value used to test against CSRF attacks.\n\n\nStep 3 - Exchange Authorization Code for Request Token\n\n\n\nRequest Body JSON structured like this:\n\n\n\n\nResponse JSON structured like this:\n\n\n\nHere, you can obtain a request token with the authorization code.\n\nHTTP Request\n\n\n\nRequest Body Parameters\n\n\n\nUsername and Password\n\nUsername and Password Authentication is designed for Third Party Apps (Mobile Applications) to act on behalf of \nindividual users for their Worker and/or Employer resources.\n\n\nGet a Bitwage APP API Key and Secret from a Bitwage admin. (See Bitwage Apps Page)\nCreate a new User API Key and Secret through the Login and TwoFA endpoints.\nUse this User API Key and Secret to authenticate to any API (Worker or Employer Resource)\n\n\nExtra Headers for Username and Password Authentication\n\nUser-Agent\n\n\nYou must include a User-Agent Header when:\n\n\nGetting a User API Key and Secret (User: Login, Two Factor Authentication)\nYou are using a User API Key and Secret to authenticate to any API.\n\n\nSet to device\u2019s user-agent or during testing set to arbitrary string.\n\nUSER_APP\n\n\nYou must include a USER_APP Header when:\n\n\nAccessing an Employer API Resource (/v1/company).\n\n\nSet to True (boolean)\n\nUser: Login\n\n\n\nRequest Body JSON structured like this:\n\n\n\n\nResponse JSON structured like this:\n\n\n\nFor Authentication Headers follow API Key & Secret flow above, \nbut use Bitwage APP Key and Secret given by Bitwage Support instead of the Key and Secret found in your Profile & Security page.\nLogin using username and password. \nReturns username and uuid. \nUse these with the access code to get the User Api Key and Secret\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nRequest Body Parameters\n\n\n\nUser: Two Factor Authentication\n\n\n\nRequest Body JSON structured like this:\n\n\n\n\nResponse JSON structured like this:\n\n\n\nUse Bitwage APP API Key and APP API Secret for Authentication Headers. \nSubmit the two factor authentication access token for a user along with the username, \nuuid from login call, and optional gcm_address, which is the ios or android push notification id.\nReturns username and user\u2019s api key and secret. \nThis User API Key and Secret works with User API. It doesn\u2019t expire but can be revoked from Bitwage Portal under Profile & Security.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nRequest Body Parameters\n\n\n\nTickers\n\nTickers\n\n\n\nResponse JSON structured like this:\n\n\n\nView all Bitwage tickers. No Authentication Required.\nThe format for quoting currency pairs is , where AAA is the base currency and BBB is the quote currency. \ni.e. a currency pair shows how much of the quote currency is needed to purchase one unit of the base currency. \n\nHTTP Request\n\n\n\nTicker\n\n\n\nResponse JSON structured like this:\n\n\n\nView specific Bitwage Currency Pair ticker.\nValid pairs shown in Tickers API.\n\nHTTP Request\n\n\n\nUser: Profile\n\nProfile\n\n\n\nResponse JSON structured like this:\n\n\n\nView Profile Information of the user.\nUser is defined as: owner of the API Key/Secret, user who created a User API Key/Secret via Username and Password authentication, \nor the Company Admin who created an Access Token by linking their Bitwage Company via Oauth2.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nCompanies\n\n\n\nResponse JSON structured like this:\n\n\n\nView companies user is an admin of. Default Company is either 0 or the company_id of the desired company to be shown in Employer sidebar.\nUser is defined as: owner of the API Key/Secret, user who created a User API Key/Secret via Username and Password authentication, \nor the Company Admin who created an Access Token by linking their Bitwage Company via Oauth2.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nWorker: History\n\nPayrolls\n\n\n\nResponse JSON structured like this:\n\n\n\nFor this endpoint: use User\u2019s API Key and Secret obtained from TwoFA. \nView Payrolls User has received through Bitwage. amount_usd is currency-agnostic amount not just USD.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nEmployer: Profile\n\nProfile\n\n\n\nResponse JSON structured like this:\n\n\n\nView profile information of specified company. Default Payment Method options are: \u201cach_credit\u201d, \u201cach_debit\u201d, \u201cwire\u201d, \u201cbitcoin\u201d, \u201ccredit_card\u201d\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nLinked Accounts\n\n\n\nResponse JSON structured like this:\n\n\n\nView accounts that the Employer has linked.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nEmployer: Workers\n\nWorkers\n\n\n\nResponse JSON structured like this:\n\n\n\nView all workers of specified Employer.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nWorker\n\n\n\nResponse JSON structured like this:\n\n\n\nView information of specified worker.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nInvite Worker\n\n\n\nRequest Body JSON structured like this:\n\n\n\n\nResponse JSON structured like this:\n\n\n\nInvite workers to your Employer profile on Bitwage.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nRequest Body Parameters\n\n\n\nEmail to ID\n\n\n\nRequest Body JSON structured like this:\n\n\n\n\nResponse JSON structured like this:\n\n\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nRequest Body Parameters\n\n\n\nEmployer: Payrolls\n\nPayrolls\n\n\n\nResponse JSON structured like this:\n\n\n\nView all payrolls for specified Employer.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nPayroll\n\n\n\nResponse JSON structured like this:\n\n\n\nView information about a specified payroll.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nWorker Payrolls\n\n\n\nResponse JSON structured like this:\n\n\n\nView all payrolls where the specified worker is a recipient.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nCreate Payroll\n\n\n\nRequest Body JSON structured like this:\n\n\n\n\nResponse JSON structured like this:\n\n\n\nCreate a payroll order for your company. Will attempt to set Payment Method of the Order to the Company\u2019s Default Payment Method.\nDefault Payment Method options are: \u201cNone\u201d, \u201cach_credit\u201d, \u201cach_debit\u201d, \u201cwire\u201d, \u201cbitcoin\u201d, \u201ccredit_card\u201d. \nOnly the options \u201cach_credit\u201d, \u201cwire\u201d, and \u201ccredit_card\u201d can possibly be automatically set as the Payment Method of the order via API.\nIf fails to set Payment Method, will return a Message Explanation or optionally will delete the Order and not send an Email Notification.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nRequest Body Parameters\n\n\n\nPayroll Payment Method\n\n\n\nRequest Body JSON structured like this:\n\n\n\n\nResponse JSON structured like this:\n\n\n\nSpecify Payment Method for a Payroll Order. This is required for Bitwage to process order. Bitwage offers: bitcoin transfer, wire, ach credit, ach debit, and credit card, but only wire, ach credit and credit card are available through the API right now.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nRequest Body Parameters\n\n\n\nDelete Payroll\n\n\n\nRequest Body JSON structured like this:\n\n\n\n\nResponse JSON structured like this:\n\n\n\nDelete a payroll order for your company. Cannot delete a payroll already approved.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nRequest Body Parameters\n\n\n\nEmployer: Invoices\n\nInvoices\n\n\n\nResponse JSON structured like this:\n\n\n\nView all invoices that users have sent to your company.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nInvoice\n\n\n\nResponse JSON structured like this:\n\n\n\nView specific invoice that a worker has sent to your company.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nApprove Invoice\n\n\n\nRequest Body JSON structured like this:\n\n\n\n\nResponse JSON structured like this:\n\n\n\nApprove an Invoice. Create a payroll order for your company. \nWill attempt to set Payment Method of the Order to the Company\u2019s Default Payment Method.\nDefault Payment Method options are: \u201cNone\u201d, \u201cach_credit\u201d, \u201cach_debit\u201d, \u201cwire\u201d, \u201cbitcoin\u201d, \u201ccredit_card\u201d. \nOnly the options \u201cach_credit\u201d, \u201cwire\u201d, and \u201ccredit_card\u201d can possibly be automatically set as the Payment Method of the order via API.\nIf fails to set Payment Method, will return a Message Explanation.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nRequest Body Parameters\n\n\n\n            \n          \n              \n                    python\n                    ruby\n                    java\n              \n          \n        \n      \n      \n        \n          \n            \n              \n                \n                  \n                  \n                  \n                \n              \n              \n              \n                \n                \n                  \n                    \n                    \n                    HOME\n                  \n                  \n                  \u00a0  Contact Us  \n                \n              \n              \n                Community\n                \n                  \u00a0 Support\n                  \u00a0 Blog\n                  \u00a0 Twitter\n                  \u00a0 Facebook\n                \n              \n              \n                \n                  About \n                  \n                    \u00a0 Team\n                    \u00a0 We're Hiring!\n                    \u00a0  Terms of Use\n                    \u00a9 Bitwage, Inc. 2016", "time": "2017-05-24T23:39:00.764118"}
{"url": "https://docs.connect.squareup.com/articles/square-checkout-overview", "site": "squareup.com", "descr": "NAV\n            \n          \n        \n        \n          \n          \n                python\n                ruby\n                java\n          \n          \n            \n          \n          \n          \n          \n        \n        \n          \n            \n              bitwage api\n\n\nWelcome to the Bitwage API v1.0 Documentation. Last Modified March 8, 2016. \n\nBitwage offers programmatic Access to its resources including Tickers, User, Worker, and Employer.\n\nApplications using Bitwage API v1 include:\n\n\nHubstaff: Time tracking software with screenshots, activity levels, and in-depth reports.\nBitwage Android App: Access to Worker and Employer Resources from Android Device\nBitwage IOS App: Access to Worker and Employer Resources from IOS Device\n\n\nAuthentication information visible on Bitwage Apps Page.\nFor inquiries, submit a message using the contact form at www.bitwage.com. \n\nTable of Contents\n\n\nThe Production entry point: https://api.bitwage.com/v1\nThe Sandbox entry point: https://api.bitwage.biz/v1\n\nAll requests must include an application/json Content-Type Header \nAll production requests must go over SSL.\n\n\n\nAuthentication:  \n1. API Key and Secret \u00a0\u00a0\n2. Web Application Flow \u00a0\u00a0\n3. Username and Password \u00a0\u00a0\n\nTickers:\n1. Tickers \u00a0\u00a0\n2. Ticker \u00a0\u00a0\n\nUser: Profile: \n1. Profile \u00a0\u00a0\n2. Companies \u00a0\u00a0\n\nWorker: History: \n1. Payrolls \u00a0\u00a0\n\nEmployer: Profile: \n1. Profile \u00a0\u00a0\n2. Linked Accounts \u00a0\u00a0\n\nEmployer: Workers: \n1. Workers \u00a0\u00a0\n2. Worker \u00a0\u00a0\n3. Invite Worker \u00a0\u00a0\n4. Email to ID \u00a0\u00a0\n\nEmployer: Payrolls: \n1. Payrolls \u00a0\u00a0\n2. Payroll \u00a0\u00a0\n3. Worker Payrolls \u00a0\u00a0\n4. Create Payroll \u00a0\u00a0\n5. Payroll Payment Method \u00a0\u00a0\n6. Delete Payroll \u00a0\u00a0\n\nEmployer: Invoices: \n1. Invoices \u00a0\u00a0\n2. Invoice \u00a0\u00a0\n3. Approve Invoice \u00a0\u00a0\n\nAuthentication\n\nAccess resources using:\n\n\nAPI Key and Secret (For accessing your own resources)\nWeb Application Flow (For Apps accessing other Employers)\nUsername and Password (For Apps accessing other Workers and/or Employers)\n\n\nStoring Credentials Securely\n\nYou should take great care to ensure your credentials are stored securely. \nIf someone obtains your API Secret or OAUTH2 Access Token, they will be able to use Bitwage as if they were you. \nIn particular, you should avoid storing these credentials in your code base (which gets added to version control) or in your database unless you have encrypted them securely. \nSeparating credentials from your code base and database is a good practice. \nYou can always regenerate your API key if you feel it has been compromised. \nCurrently API key access is available only to Employer accounts and user must opt-in by generating an API Key and Secret.\n\nValidating SSL Certificates\n\nIt is also very important that your application validates our SSL certificate when it connects over https. This helps prevent a man in the middle attack. If you are using a client library, this may be turned on by default, but you should confirm this. If you see a setting to \u2018verify SSL\u2019 you should always ensure it is set to true.\n\nAPI Key + Secret\n\nBitwage offers API Key + Secret Authentication to access your own Bitwage Worker and Employer Resources via the API.\n\n\nCreate a new API Key and Secret on the Bitwage Apps Page.\n\n\nEnhanced Security Controls: can verify the actions and account information you wish to be accessible via the API and specify whether only certain IP Addresses have access. Coming Soon\nNote: Users should never share API key + secret with anyone else.\n\n\n\nHeaders\n\n\n\n\nUse the API Key and Secret to add three headers ACCESS_KEY, ACCESS_SIGNATURE, and ACCESS_NONCE to every API call that requires authentication. This scheme can be called \u201cHMAC authentication.\u201d\n\n\nThe ACCESS_KEY header is your API Key.\nThe ACCESS_NONCE header is a positive integer number that must increase with every request you make. Currently it must be submitted as a header. Coming Soon you can also submit it as a root-level parameter in a JSON POST request and as a GET parameter in the URL.\nThe ACCESS_SIGNATURE header is a HMAC-SHA256 hash of the nonce concatentated with the full URL and body of the HTTP request, encoded using your API Secret.\n\n\nOut-of-order Processing\n\nSometimes network traffic can cause near-simultaneous API calls to arrive out of order. Since the nonce must always be increasing, an API call with a higher nonce may arrive earlier than a separate call with a lower nonce if they are initiated very quickly together. When this happens, the second call will be dropped as invalid. To fix this, a separate expire parameter can be included, specifying a unix timestamp after which the call will not process. When the expire parameter is included, the nonce is ignored. We recommend setting the expire parameter to no greater than 15 minutes in the future to prevent replay attempts.\n\nWeb Application Flow\n\nBitwage is an OAuth 2.0 compliant service. Create your app on the Bitwage Apps Page.\n\nStep 1 - Authorization\n\nTo prevent fraudulent transactions during the authentication process, we will only communicate with URLs that you have identified as trusted endpoints.  Ensure the \u201cOAuth 2.0 Redirect URLs\u201d field for your application contains a valid callback URL to your server that is listening to complete your portion of the authentication workflow.\n\nOnce you save your configuration, your application will be assigned a unique \u201cClient ID\u201d and \u201cClient Secret\u201d value.  Make note of these values \u2014 you will need to integrate them into the configuration files or the actual code of your application.\n\nStep 2 - Requesting an Authorization Code\n\n\nOnce your application is properly configured, it\u2019s time to request an authorization code.  The authorization code is not the final token that you use to make calls to Bitwage with.  It is used in the next step of the OAuth 2.0 flow to exchange for an actual access token.  This is an important step because it provides assurance directly from Bitwage to the user that permission is being granted to the correct application, with the agreed-upon access to the member\u2019s Bitwage profile.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nOnce redirected, the user will be presented with Bitwage\u2019s authentication dialog box.  This identifies your application as well as outlines the particular member permissions that your application has requested.  If desired, the logo and application name can be changed in your application configuration.\n\nAfter the application is approved, the user will be redirected to the redirect_uri, which will have two important URL arguments that you will need to read from this request:\n\n\ncode: The OAuth 2.0 authorization code.\nstate: Value used to test against CSRF attacks.\n\n\nStep 3 - Exchange Authorization Code for Request Token\n\n\n\nRequest Body JSON structured like this:\n\n\n\n\nResponse JSON structured like this:\n\n\n\nHere, you can obtain a request token with the authorization code.\n\nHTTP Request\n\n\n\nRequest Body Parameters\n\n\n\nUsername and Password\n\nUsername and Password Authentication is designed for Third Party Apps (Mobile Applications) to act on behalf of \nindividual users for their Worker and/or Employer resources.\n\n\nGet a Bitwage APP API Key and Secret from a Bitwage admin. (See Bitwage Apps Page)\nCreate a new User API Key and Secret through the Login and TwoFA endpoints.\nUse this User API Key and Secret to authenticate to any API (Worker or Employer Resource)\n\n\nExtra Headers for Username and Password Authentication\n\nUser-Agent\n\n\nYou must include a User-Agent Header when:\n\n\nGetting a User API Key and Secret (User: Login, Two Factor Authentication)\nYou are using a User API Key and Secret to authenticate to any API.\n\n\nSet to device\u2019s user-agent or during testing set to arbitrary string.\n\nUSER_APP\n\n\nYou must include a USER_APP Header when:\n\n\nAccessing an Employer API Resource (/v1/company).\n\n\nSet to True (boolean)\n\nUser: Login\n\n\n\nRequest Body JSON structured like this:\n\n\n\n\nResponse JSON structured like this:\n\n\n\nFor Authentication Headers follow API Key & Secret flow above, \nbut use Bitwage APP Key and Secret given by Bitwage Support instead of the Key and Secret found in your Profile & Security page.\nLogin using username and password. \nReturns username and uuid. \nUse these with the access code to get the User Api Key and Secret\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nRequest Body Parameters\n\n\n\nUser: Two Factor Authentication\n\n\n\nRequest Body JSON structured like this:\n\n\n\n\nResponse JSON structured like this:\n\n\n\nUse Bitwage APP API Key and APP API Secret for Authentication Headers. \nSubmit the two factor authentication access token for a user along with the username, \nuuid from login call, and optional gcm_address, which is the ios or android push notification id.\nReturns username and user\u2019s api key and secret. \nThis User API Key and Secret works with User API. It doesn\u2019t expire but can be revoked from Bitwage Portal under Profile & Security.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nRequest Body Parameters\n\n\n\nTickers\n\nTickers\n\n\n\nResponse JSON structured like this:\n\n\n\nView all Bitwage tickers. No Authentication Required.\nThe format for quoting currency pairs is , where AAA is the base currency and BBB is the quote currency. \ni.e. a currency pair shows how much of the quote currency is needed to purchase one unit of the base currency. \n\nHTTP Request\n\n\n\nTicker\n\n\n\nResponse JSON structured like this:\n\n\n\nView specific Bitwage Currency Pair ticker.\nValid pairs shown in Tickers API.\n\nHTTP Request\n\n\n\nUser: Profile\n\nProfile\n\n\n\nResponse JSON structured like this:\n\n\n\nView Profile Information of the user.\nUser is defined as: owner of the API Key/Secret, user who created a User API Key/Secret via Username and Password authentication, \nor the Company Admin who created an Access Token by linking their Bitwage Company via Oauth2.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nCompanies\n\n\n\nResponse JSON structured like this:\n\n\n\nView companies user is an admin of. Default Company is either 0 or the company_id of the desired company to be shown in Employer sidebar.\nUser is defined as: owner of the API Key/Secret, user who created a User API Key/Secret via Username and Password authentication, \nor the Company Admin who created an Access Token by linking their Bitwage Company via Oauth2.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nWorker: History\n\nPayrolls\n\n\n\nResponse JSON structured like this:\n\n\n\nFor this endpoint: use User\u2019s API Key and Secret obtained from TwoFA. \nView Payrolls User has received through Bitwage. amount_usd is currency-agnostic amount not just USD.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nEmployer: Profile\n\nProfile\n\n\n\nResponse JSON structured like this:\n\n\n\nView profile information of specified company. Default Payment Method options are: \u201cach_credit\u201d, \u201cach_debit\u201d, \u201cwire\u201d, \u201cbitcoin\u201d, \u201ccredit_card\u201d\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nLinked Accounts\n\n\n\nResponse JSON structured like this:\n\n\n\nView accounts that the Employer has linked.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nEmployer: Workers\n\nWorkers\n\n\n\nResponse JSON structured like this:\n\n\n\nView all workers of specified Employer.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nWorker\n\n\n\nResponse JSON structured like this:\n\n\n\nView information of specified worker.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nInvite Worker\n\n\n\nRequest Body JSON structured like this:\n\n\n\n\nResponse JSON structured like this:\n\n\n\nInvite workers to your Employer profile on Bitwage.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nRequest Body Parameters\n\n\n\nEmail to ID\n\n\n\nRequest Body JSON structured like this:\n\n\n\n\nResponse JSON structured like this:\n\n\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nRequest Body Parameters\n\n\n\nEmployer: Payrolls\n\nPayrolls\n\n\n\nResponse JSON structured like this:\n\n\n\nView all payrolls for specified Employer.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nPayroll\n\n\n\nResponse JSON structured like this:\n\n\n\nView information about a specified payroll.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nWorker Payrolls\n\n\n\nResponse JSON structured like this:\n\n\n\nView all payrolls where the specified worker is a recipient.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nCreate Payroll\n\n\n\nRequest Body JSON structured like this:\n\n\n\n\nResponse JSON structured like this:\n\n\n\nCreate a payroll order for your company. Will attempt to set Payment Method of the Order to the Company\u2019s Default Payment Method.\nDefault Payment Method options are: \u201cNone\u201d, \u201cach_credit\u201d, \u201cach_debit\u201d, \u201cwire\u201d, \u201cbitcoin\u201d, \u201ccredit_card\u201d. \nOnly the options \u201cach_credit\u201d, \u201cwire\u201d, and \u201ccredit_card\u201d can possibly be automatically set as the Payment Method of the order via API.\nIf fails to set Payment Method, will return a Message Explanation or optionally will delete the Order and not send an Email Notification.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nRequest Body Parameters\n\n\n\nPayroll Payment Method\n\n\n\nRequest Body JSON structured like this:\n\n\n\n\nResponse JSON structured like this:\n\n\n\nSpecify Payment Method for a Payroll Order. This is required for Bitwage to process order. Bitwage offers: bitcoin transfer, wire, ach credit, ach debit, and credit card, but only wire, ach credit and credit card are available through the API right now.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nRequest Body Parameters\n\n\n\nDelete Payroll\n\n\n\nRequest Body JSON structured like this:\n\n\n\n\nResponse JSON structured like this:\n\n\n\nDelete a payroll order for your company. Cannot delete a payroll already approved.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nRequest Body Parameters\n\n\n\nEmployer: Invoices\n\nInvoices\n\n\n\nResponse JSON structured like this:\n\n\n\nView all invoices that users have sent to your company.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nInvoice\n\n\n\nResponse JSON structured like this:\n\n\n\nView specific invoice that a worker has sent to your company.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nApprove Invoice\n\n\n\nRequest Body JSON structured like this:\n\n\n\n\nResponse JSON structured like this:\n\n\n\nApprove an Invoice. Create a payroll order for your company. \nWill attempt to set Payment Method of the Order to the Company\u2019s Default Payment Method.\nDefault Payment Method options are: \u201cNone\u201d, \u201cach_credit\u201d, \u201cach_debit\u201d, \u201cwire\u201d, \u201cbitcoin\u201d, \u201ccredit_card\u201d. \nOnly the options \u201cach_credit\u201d, \u201cwire\u201d, and \u201ccredit_card\u201d can possibly be automatically set as the Payment Method of the order via API.\nIf fails to set Payment Method, will return a Message Explanation.\n\nHTTP Request\n\n\n\nQuery Parameters\n\n\n\nRequest Body Parameters\n\n\n\n            \n          \n              \n                    python\n                    ruby\n                    java\n              \n          \n        \n      \n      \n        \n          \n            \n              \n                \n                  \n                  \n                  \n                \n              \n              \n              \n                \n                \n                  \n                    \n                    \n                    HOME\n                  \n                  \n                  \u00a0  Contact Us  \n                \n              \n              \n                Community\n                \n                  \u00a0 Support\n                  \u00a0 Blog\n                  \u00a0 Twitter\n                  \u00a0 Facebook\n                \n              \n              \n                \n                  About \n                  \n                    \u00a0 Team\n                    \u00a0 We're Hiring!\n                    \u00a0  Terms of Use\n                    \u00a9 Bitwage, Inc. 2016", "time": "2017-05-24T23:39:00.764118"}
{"url": "https://docs.connect.squareup.com/api/connect/v2/#endpoint-createrefund", "site": "squareup.com", "descr": "Explore APIsDocsFeaturesAdd Your APISign Up FreeLoginJoin for free in 7 seconds!Be part of the largest API communityAlready a Mashaper? Log in.LoginWelcome BackNot a Mashaper?\u00a0Sign up.Add Your API on MashapeAlready a Mashaper?\u00a0Log in.Create your new Application on MashapedevelopersfollowersNoodlio Pay - Smooth Payments with StripeAPI TERMS OF SERVICENoodlio Pay - Smooth Payments with StripePrivate APInoodliohttps://www.noodliopay.comBusinesscommerceCreated: April 2016An easy, straightforward solution for accepting payments on your website, in your app, or elsewhere on the web. Thanks to the REST setup, your application can immediately start making requests to the API, which validates the Credit Card details and charges your clients for their purchases. All funds will immediately be transferred to your account.\r\n\r\nEssentially, this API replaces your server-side, saving you the time to learn a new server language, test, validate and so on the server-side for your payments. In other words, it's hassle-free payment!204Developers211FollowersReport Broken APIDocumentationOverviewAnnouncementsAPI Support2API Terms", "time": "2017-05-24T23:39:01.120940"}
{"url": "https://bitpay.com/docs/create-invoice", "site": "bitpay.com", "descr": "Explore APIsDocsFeaturesAdd Your APISign Up FreeLoginJoin for free in 7 seconds!Be part of the largest API communityAlready a Mashaper? Log in.LoginWelcome BackNot a Mashaper?\u00a0Sign up.Add Your API on MashapeAlready a Mashaper?\u00a0Log in.Create your new Application on MashapedevelopersfollowersNoodlio Pay - Smooth Payments with StripeAPI TERMS OF SERVICENoodlio Pay - Smooth Payments with StripePrivate APInoodliohttps://www.noodliopay.comBusinesscommerceCreated: April 2016An easy, straightforward solution for accepting payments on your website, in your app, or elsewhere on the web. Thanks to the REST setup, your application can immediately start making requests to the API, which validates the Credit Card details and charges your clients for their purchases. All funds will immediately be transferred to your account.\r\n\r\nEssentially, this API replaces your server-side, saving you the time to learn a new server language, test, validate and so on the server-side for your payments. In other words, it's hassle-free payment!204Developers211FollowersReport Broken APIDocumentationOverviewAnnouncementsAPI Support2API Terms", "time": "2017-05-24T23:39:01.120940"}
{"url": "https://bitpay.com/api", "site": "bitpay.com", "descr": "swagger", "time": "2017-05-24T23:39:01.210109"}
{"url": "http://docs.coinprism.apiary.io/#reference/transaction-signing-and-broadcasting/push-a-signed-raw-transaction-to-the-network", "site": "apiary.io", "descr": "Contact Sales: 1 866-374-0948\nPRODUCTS\n\n\tAPIs\n\t\n\t\tAggregation API\n\t\tAccount Verification API\n\t\tOpen Banking API\n\t\teBills API\n\t\tRisk Insights\n\t\tMoney Movement API\n\t\n\n\tFeatured FinApps\n\t\n\t\tAccount Summary\n\t\tBudgets\n\t\tCash Flow Analysis\n\t\tExpense & Income Analysis\n\t\tInvestment Holding\n\t\tNet Worth Summary\n\t\n\n\tData Analytics\n\t\n\t\tTransaction Data Enrichment\n\t\tFor Financial Institutions\n\t\tCredit Risk Modeling\n\t\tConsumer Spending Data\n\t\tRetail Competitive Insights\n\t\n\n\n\nSOLUTIONS\n\n\tIndustry Solutions\n\t\n\t\tWealth Management\n\t\tPersonal Financial Management\n\t\tRisk Insight Suite\n\t\tRetail Banking\n\t\tPayments\n\t\tData Clarity\n\t\n\n\tDeveloper Solutions\n\t\n\t\tBuild Financial Apps\n\t\tCustomer Activation\n\t\tFraud Reduction\n\t\n\n\n\nSERVICES\n\n\tProfessional Services\n\tClient Services\n\tDeveloper Support\n\tSecurity Dashboard\n\n\nRESOURCES\nCOMPANY\n\n\tWhy Yodlee\n\tCareers\n\tIndia Office\n\tLaunchpad\n\tIncubator\n\tInvestor Relations\n\tNewsroom\n\tContact Us\n\n\nTransactions\nFastLink\nMore\u2026\nPremium Features\nTandem\nSense\n\n\n\t\t\n\t\t\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t          \n\n          \n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\n\nCONTACT SALES: 1 866-374-0948DEVELOPER PORTALBlogContact UsAustralia and New ZealandEMEAGlobal\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPRODUCTS\n\n\tAPIs\n\t\n\t\tAggregation API\n\t\tAccount Verification API\n\t\tOpen Banking API\n\t\teBills API\n\t\tRisk Insights\n\t\tMoney Movement API\n\t\n\n\tFeatured FinApps\n\t\n\t\tAccount Summary\n\t\tBudgets\n\t\tCash Flow Analysis\n\t\tExpense & Income Analysis\n\t\tInvestment Holding\n\t\tNet Worth Summary\n\t\n\n\t\u00a0\n\t\n\t\tSave for a Goal\n\t\tTransactions\n\t\tFastLink\n\t\tMore\u2026\n\t\tPremium Features\n\t\tTandem\n\t\tSense\n\t\n\n\tData Analytics\n\t\n\t\tTransaction Data Enrichment\n\t\tFor Financial Institutions\n\t\tCredit Risk Modeling\n\t\tConsumer Spending Data\n\t\tRetail Competitive Insights\n\t\n\n\n\nSOLUTIONS\n\n\tIndustry Solutions\n\t\n\t\tWealth Management\n\t\tPersonal Financial Management\n\t\tRisk Insight Suite\n\t\tRetail Banking\n\t\tPayments\n\t\tData Clarity\n\t\n\n\tDeveloper Solutions\n\t\n\t\tBuild Financial Apps\n\t\tCustomer Activation\n\t\tFraud Reduction\n\t\n\n\n\nSERVICES\n\n\tProfessional Services\n\tClient Services\n\tDeveloper Support\n\tSecurity Dashboard\n\n\nRESOURCES\nCOMPANY\n\n\tWhy Yodlee\n\tCareers\n\tIndia Office\n\tLaunchpad\n\tIncubator\n\tNewsroom\n\tInvestor Relations\n\tNewsroom\n\tContact Us\n\n\n\n\n\n \n \n\n\n\t\t\t\t\n\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t            \n            \t\t\t\n\t\t\t                \n                    \n\n                        \n                            Account Verification API\n\n                                                \n                        \n                    \n\n\t\t\t\t\t\n                \n            \n        \t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\r\n\r\n\r\n\t\t\r\n\t\r\n\t\r\n\t\t\r\n\t\t\r\n\t\t\t\t\r\n\t\t\r\n\r\n\t\t\t\r\n\n\t\n\t\t\n\t\t\tSpeed Verification. Reduce Risk.\nWith more consumers using online banking services, accessing their money in digital ways, and transferring funds than ever before, the ability to manage account authentication and manage risk in real time is critical. The RESTful Envestnet\u00ae | Yodlee\u00ae Account Verification API offers a safe, secure, and quick way to connect accounts and balances, provide low cost funding options, while reducing risk.\n\n\t\t\n\t\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\t\n\t\t\n\t\t\tProvide a seamless digital experience to immediately connect and access accounts\nUnlike most account verification processes that takes days and requires consumers to verify micro-deposits to their bank accounts to validate accounts, account verification from Envestnet | Yodlee happens in real-time. Onboarding and transferring of funds is simple, with consumers only needing to enter their online banking credentials instead of bank account and routing numbers. Instant access to financial data confirms the existence of an account and verifies the account balance in seconds. As a result, opening new accounts, transferring funds, and making online purchases are not only faster and more intuitive for consumers, they\u2019re also less risky.\n\n\t\t\n\t\n\nCase Study: Deluxe\n\nCase Study: Kabbage\n\nCase Study: IGG Software\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\t\n\t\t\n\t\t\tKey Benefits\n\n\t\t\n\t\n\n\t\n\t\t\n\t\t\t\nFast, efficient, secure online account verification\nActivate users now \u2013 not later\nConfirms available funds in accounts in real time before funds transfer\nMitigates fraud and operational risk in the online account opening process\nEasy and secure process with FastLink to connect accounts\n\n\n\t\t\n\t\n\n\t\n\t\t\n\t\t\t\nEnables same day ACH for expedited payments while reducing risk\nSecurely verifies accounts in seconds vs. days\nReduces abandonment during consumer onboarding for funding events\n100% REST & JSON application programming interfaces for quick and easy integration\n\n\n\t\t\n\t\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\t\n\t\t\n\t\t\tMore APIs\n\n\t\t\n\t\n\r\n\r\n        \r\n\r\n       \r\n   \r\n   AGGREGATION API \r\n            \r\n        \r\n\r\n\r\n\r\n\r\n        \r\n\r\n       \r\n   \r\n   MONEY MOVEMENT API \r\n            \r\n        \r\n\r\n\r\n\r\n\r\n        \r\n\r\n       \r\n   \r\n   eBILLS API \r\n            \r\n        \r\n\r\n\r\n\r\n\r\n        \r\n\r\n       \r\n   \r\n   OPEN BANKING API \r\n            \r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\t\n\t\t\n\t\t\tRelated Resources\n\n\t\t\n\t\nIAV API Whitepaper: Enabling Financial Disruption with Instant Account VerificationIAV API eBook: 7 Ways to Optimize Your Mobile Payments AppIAV API Data Sheet: Reduce Risk for Bank Payments Using the Envestnet | Yodlee Account Verification APIMore Resources\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\t\n\t\t\n\t\t\tGo Under the Hood\n\n\t\t\n\t\n\n\t\n\t\t\n\t\t\tIncubator\nGot a vision or a prototype in need of financial data? It\u2019s time to apply for the incubator program!\n\n\t\t\n\t\nLearn More\n\t\n\t\t\n\t\t\tDeveloper Portal\nGet access to the latest documentation, sample code, testing tools, and more on our Developer Portal.\n\n\t\t\n\t\nLog In\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\t\n\t\t\n\t\t\tClients Working With Us\n\n\t\t\n\t\n\r\n\r\n\n\t\t\t\r\n\t\t\r\n\t\t\r\n\t\t\t\r\n\t\r\n\t\r\n\t\r\n\r\n\t\t\r\n\t\r\n\r\n\r\n\r\n\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\r\n\r\n       \t\t\t\r\n        \r\n         \r\n          \r\n             \r\n              \r\n                Ready To Talk?Contact Us\r\n                          \r\n            \r\n          \r\n         \r\n               \r\n               \r\n       \r\n       \r\n         \r\n          \r\n             \r\n              \r\n                \r\n                                Newsletter Sign-up:\r\n                                  \r\n                  \r\n                  \r\n                      \r\n                  \r\n                   \r\n                                      \r\n                          \r\n            \r\n          \r\n         \r\n                \r\n      \r\n      \r\n\t\t\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\t\t\t\t\t\t                  \r\n          \r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tCompany InfoCompany\nContact Us\nOur Team\nEvents\nCareers\nIndia Office\nInvestor Relations\nNewsroom\nTrending\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tOfferingsData Platform\nDeveloper APIs\nData Analytics\nProducts\nSolutions\nServices\nResources\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tLegalPrivacy Notice\nYodlee Security\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tYodlee Portals\t\t\t\r\n\r\n\r\nYodlee Blog\r\nDeveloper Portal\r\nLaunchpad\r\nIncubator\r\nMoney by Envestnet|Yodlee\r\nYodlee Labs \r\nNEW Yodlee MoneyCenter\r\nYodlee SmallBusiness\r\n\r\n\r\n\r\n\r\nEnvestnet\r\nPMC\u00ae\r\nTamarac\u2122\r\nERS\r\nWheelhouse Analytics\r\n\r\n\r\n\r\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\r\n\r\n        \t\r\n\t\t\t\t\t\r\n            \r\n            \r\n            \r\n                                    \r\n          \r\n\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\r\n     \r\n      \r\n      \t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t\u00a9 2017 Envestnet | Yodlee.\u2122", "time": "2017-05-24T23:39:01.336674"}
{"url": "http://docs.coinprism.apiary.io/#reference/transaction-signing-and-broadcasting/push-a-signed-raw-transaction-to-the-network", "site": "apiary.io", "descr": "Toggle navigation\n        \n        \n        \n      \n      \n        \n      \n    \n    \n      \n        \n        \n      \n    \n    \n      \n        \n          Status\n        \n        \n          Change Log\n        \n        \n          Support\n        \n        \n          \n          Try it For Free! \n          \n        \n      \n    \n  \n  \n     \n    \n      \n\n      \n    \n    \n  \n\n\n\n\n  \n    \n    \n\n\n\n\n\n\n    \n    \n      \n\n\n      Element\n\nAn Element is a pre-built API integration that enables a connection into a specific cloud application endpoint\n(e.g., Salesforce, Quickbooks, or Marketo). All Elements start with a normalized set of features, including authentication,\nresources, paging, errors, events and search. At the Element level, we also seek to support the richer set\nof APIs that an application provides, even when not all of the Elements in that category share that resource.\n\n\nElements share common services including discovery, search query, pagination, bulk uploading and downloading, logging and interactive documentation.\nMethods are normalized and accessible through RESTful APIs\nComplete data payloads are returned in JSON and available to transform and normalize via the Cloud Elements API Manager Transformation Services.\nCloud Elements keeps each Element up to date with changes at the endpoint.\nEach Elements is a \u201cMulti-tenant\u201d connector supporting an unlimited number of authenticated accounts with no additional code required.\n\n\nAPI Hub\n\nHubs map resources from a collection of endpoints (What we call Elements) into a uniform set of APIs. With Hubs you can integrate an entire category of services (e.g., CRM, Documents, Finance) through a single set of APIs.\n\nWe normalize our API calls for all endpoints, to enable calls between services e.g. Salesforce to HubSpot. However, with this feature, certain endpoint resources cannot be mapped for each hub.\n\n\nHubs provide uniform APIs to access any collection of Elements or a set of resources.\nHubs enable \u201cOne-to-Many\u201d access to an entire category of services.\nHubs are accessed using a consistent RESTful API with a JSON payload regardless of the technology used at the endpoint.\nHubs rapidly translate calls into the semantic and data structure required by each endpoint.\nHubs provide a uniform set of interactive API documentation that developers use to access the resources in the Hub.\nCombine resources from multiple categories providing a consistent set of APIs and documentation to access any collection of resources (e.g., combine Salesforce, Box, and QuickBooks API resources into a Hub).\n\n\nWe\u2019ve categorized the leading cloud applications into Hubs (e.g. CRM, Documents, and Messaging). You integrate to a Cloud Elements \u201cHub\u201d via a single RESTful API and your app is instantly connected to all the leading services in that category, no need to do custom and costly integration to each service.\n\nElement Instance\n\nAn Element Instance is an Element that is authenticated to a specific user account for the application service. An\ninstance can access all of the objects, fields and data for that account - including custom data. An instance is created\nwhen a user successfully connects to the endpoint by providing an instance name, the required authentication credentials\nfor that Element, and optionally add configuration for events. An Element Instance represents a connection\nto a single authenticated account at the target endpoint such as a Salesforce, Marketo, or Netsuite.\n\nTransformation\n\nCloud Element supports mapping and transforming data between your application and any of the cloud services you're leveraging through our Element Mapper. Element Mapper is an API and Data Mapping Application to map and transform data across different Elements. This allows you to define how you want your resource to look and then go about mapping and transforming that resource for each Element, as needed.\n\nFormula\n\nCloud Elements supports customizable workflows, called Formulas. Formulas are user-defined workflows that have a trigger (incoming event, API request, timer, etc.) that, when triggered, will begin executing a series of steps. These steps can go about accomplishing a large variety of different use cases across different services. Some ways our customers are using them now include keeping their systems in sync, migrating data between systems, automating business workflows, and many more.\n\nThe Transformation APIs allow you to:\n\n\nmanage custom object and custom data fields\nmap custom data fields to and from the format that your application uses and expects\nprogrammatically persist and maintain transformations for each of your client\u2019s CRM, Marketing, and Help Desk services\n\n\nBulk API and CEQL\n\nCloud Element Bulk API calls provide an option to upload a large number of resources, such as contacts, into a Cloud Service all at once.\n\nThe Bulk APIs require the name of the object identified within the cloud service and a  file with populated data included in each request.\n\nCloud Elements provides discovery services to get a list of available objects.\n\nThe Cloud Elements Query Language (CEQL) is a query language used by Cloud Elements to standardize searching across all of our different elements. Many APIs support some form of searching in their APIs but they\u2019re almost all different, so we have standardized a common way to search across all of our elements. Cloud Elements translates the CEQL to the endpoint\u2019s searching syntax, however at times, CEQL supports more than the endpoint.\n\nDiscovery Service\n\nCloud Elements includes a comprehensive data discovery service that provides normalized metadata, such as the list of  field names and types. Additional information, if available from an endpoint, may also be obtained such as: display name, read-only, etc. If an endpoint doesn\u2019t provide discovery service APIs, Cloud Elements will still provide a minimum set of metadata about the given resource (e.g., name and type). Cloud Elements also allows you to discover custom fields (as long as the values are not empty), by supplying an object Id when a native discovery service is not available. The Discovery Service is used along with the Transformation Service to normalize the responses across endpoints.\n\nOAuth Proxy\n\nThe OAuth Proxy feature gives you the capability to have multiple environments, such as development, QA, etc, with one endpoint application. For example some vendors only allow one callback URL per application. The proxy will allow for the same callback URL to be used with multiple application endpoints. You would then use the proxy address as the Callback URL instead of your own Callback URL. This permits multiple endpoint applications to one callback URL.\n\nWe offer two forms of the proxy.\nStandard OAuth Proxy Configuration: requires an API key and secret to be passed as URL parameters or in the JSON payload needed to create an instance.\nOAuth Proxy with API Key and Secret Management: option to input your API key and secret during the proxy creation and we will take care of the rest during instance creation.\n\n    \n  \n\n  \n\n\n\n\n  \n\n\n\n\n  \n\n\n\n\n  \n\n  \n    \n      \n        About\n        Resources\n        Contact Us\n        Our Team\n        Sign In\n      \n      \n        In The News\n        Press Releases\n        Events\n        Careers\n        Status\n      \n      \n        Support\n        Privacy Policy\n        Website Terms and Conditions of Use\n        Sitemap\n        Change Log\n      \n      \n        \n          \n            \n              \n            \n            \n              \n            \n            \n              \n            \n            \n              \n            \n            \n              \n            \n          \n        \n        \n          Questions? Email us at info@cloud-elements.com or call +1.866.830.3456.\n        \n      \n    \n  \n  \n    \n      \u00a9 Copyright 2016 Cloud Elements Inc. All rights reserved. Various trademarks held by their respective owners. | 3001 Brighton Blvd. Suite #642, Denver, CO 80216 United States", "time": "2017-05-24T23:39:01.406116"}
{"url": "http://developers.bluesnap.com/v8976-JSON/docs", "site": "bluesnap.com", "descr": "Menu\n  \n    \n      \n  Square\n  Accept Credit Cards From An iPhone, Android or iPad - Square\n  \n  \n  \n  \n\n\n  \n  \n    Apps\n  \n\n\n\n  \n    \n  \n  Manage Apps\n\n\n\n      \n        \n          \n  \n    \n    \n  \n\n\n\n  \n    \n      \n  Square\n  Accept Credit Cards From An iPhone, Android or iPad - Square\n  \n  \n  \n  \n\n\n    \n    Developer\n\n\n  \n    The Basics\n    \n      Getting started\n      The structure of a Square business\n      Code samples\n      Client libraries\n      Troubleshooting errors\n      Catalog Overview\n      FAQ\n  \n  \n    Online Payments\n    \n      Square Checkout Overview\n      Checkout: Get Started\n      Payment API: Get Started\n      Embedding the Square Payment Form\n      Processing a payment (REST)\n      Processing a payment (PHP)\n      Processing a payment (Ruby)\n      Processing a payment (Other languages)\n      Testing using the API sandbox\n      Processing recurring payments\n      Delayed capture transactions\n  \n  \n    In-Person Payments\n    \n      Register API Overview\n      Using the Register API (iOS)\n      Using the Register API (Android)\n      Using the Web API (Android)\n  \n  \n    Full API Reference\n    \n      \n        Connect v2 (REST)\n      \n      \n        Connect v2 (.NET)\n      \n      \n        Connect v2 (Python)\n      \n      \n        Connect v1 (REST)\n      \n      \n        Register SDK (iOS)\n      \n      \n        Register SDK (Android)\n      \n      \n        OAuth\n      \n    \n  \n  \n    Release Notes\n    \n      Catalog API (2017-05)\n      Web API for Android released (2016-11)\n      Register API for iOS v1.2 released (2016-11)\n      Register API for iOS v1.1 released (2016-10)\n      Register API for Android sample application released (2016-10)\n      Register API for Android v1.1 released (2016-09)\n      Register API for Android released (2016-05)\n      Connect API v2 released (2016-03)\n      API changes (2016-02-16)\n  \n  \n    Other Reference\n    \n      \n        Terms of service\n      \n    \n  \n\n\n        \n        \n          \n  \n    Square APIs: Getting Started\n    \n      Square provides a collection of APIs to help you build integrations for a wide\n      range of merchant use cases. The most common use cases are:\n    \n    \n      E-commerce. Merchants can accept online payments with a secure,\n      customizable form they embed on their website. They can also issue refunds for\n      previously processed payments.\n    \n    \n      In-person commerce. Custom iOS and Android point-of-sale apps\n      can use the Square Register API to process payments securely with Square hardware.\n    \n    \n      Reporting. Merchants can download the details of their transaction\n      and deposit history, along with their item and inventory information.\n    \n    \n      Employee management. Business owners can track employee hours\n      and set employee permissions for certain activities, like issuing refunds in\n      Square Register.\n    \n    Complete the steps in this article to get up and running, and to familiarize\n      yourself with all of Square's APIs. Please note that using Square APIs requires\n      experience with programming.\n    \n    \n      \n        Important: Square E-commerce\n        and Register APIs are currently\n        available only in the United States, Canada, Australia, the United Kingdom, and Japan.\n        We are working to make them available in additional countries soon.\n        Version 1 of the API is available everywhere.\n      \n    \n  \n\n  \n    Step 1: Create a Square account\n    \n      Square developer accounts are the same as Square merchant accounts. If you\n      already have a Square account, you're all set.\n    \n      If you don't already have a Square account,\n      create one to start using\n      the API.\n    \n    \n      If you're planning to use Square APIs to process card payments, visit\n      squareup.com/activate\n      after you create your account to ensure your account is enabled for payment\n      processing. Otherwise, if you use a non-sandbox API that requires payments activation,\n      you may get error responses that you must activate.\n    \n  \n\n  \n    Step 2: Register an application with Square\n    \n      Now that you have a Square account, visit \n      https://connect.squareup.com/apps and sign in.\n    \n      This is your application dashboard. It's where you register\n      new applications, change your application settings, and find all of your application\n      credentials.\n    \n    \n      To register your first application:\n    \n      \n        Click New Application.\n      \n      \n        Enter a name for your application and click Create App.\n        (Note that your application name can't include the word .)\n      \n    \n    \n      As soon as your application is created, the control panel for\n      it appears.\n      The control panel consists of four tabs (Credentials,\n      OAuth, Webhooks, and\n      Register API), each with multiple sections.\n    \n  \n\n  \n    Step 3: Learn about application credentials\n    \n      The Credentials and OAuth tabs of your\n      application's control panel include a lot of different credentials that\n      can be tricky to keep straight. Here's a quick rundown:\n    \n    Personal Access Token\n    \n      This is found in the Credentials tab of the control panel.\n    \n    \n      This special token gives you full API access to your own\n      Square account. When you send HTTPS requests to Square API endpoints, you\n      include this value in a header to identify yourself.\n    \n    \n      If you're building an application just for yourself, this is the only\n        access token you'll ever need to use.\n    \n    Application ID\n    \n      This is found in the Credentials tab of the control panel.\n    \n    This is your application's unique ID. It's used in a couple places:\n    \n      \n        If you're building an application that other merchants will use,\n        you'll specify this value during the OAuth flow (discussed later).\n      \n      \n        If you're using the e-commerce API, you'll provide this value when you embed\n        the secure payment form on your website.\n      \n    \n    Application Secret\n    \n      This is found in the OAuth tab of the control panel.\n    \n    \n      If you're building an application that other merchants will use, you provide\n      this value during the OAuth flow to confirm your application's identity.\n    \n    \n      As its name suggests, this value is a secret!\n      If you think it's been compromised, you can click Show Secret\n      and then Replace Secret in the application control panel to\n      replace it.\n    \n    Sandbox Application ID and Access Token\n    \n      This is found in the Credentials tab of the control panel.\n    \n    \n      The e-commerce API provides a sandbox that lets you try out\n      processing credit card payments without actually moving any money.\n    \n    \n      To process e-commerce payments in sandbox mode, you provide these credentials\n      anywhere you would typically provide your standard Application ID and Personal\n      Access Token.\n    \n  \n\n  \n    Step 4: Send your first API request\n    \n      Now that you have your application credentials, you can start communicating\n      with Square APIs! Let's start with a simple  command.\n    \n    \n      Paste the following into a terminal and replace \n      with your personal access token:\n    \n        \n      When the command completes, it prints JSON output representing the basic details\n      for all of your Square business's locations. Its structure\n      resembles the following:\n    \n        \n      Nice work! You've successfully sent a request to the Square Connect API's\n      ListLocations endpoint.\n    \n  \n\n  \n    Step 5: Send an API request from code\n    A  command is a nice start, but let's see what that same command looks\n      like from code.\n    \n    \n      Create a new blank text file, .\n    \n    \n      Paste the following into  and replace \n      with your personal access token:\n    \n      \n      This example is in Python because it's easy to read and run, but you can of\n      course communicate with Square API endpoints from any programming language.\n    \n    \n      Run the sample from the command line with the following command:\n    \n        \n      The sample will print the same JSON output that your  command\n      did in Step 4: Send your first API request.\n    \n  \n\n  \n    Step 6: Pick an HTTPS library\n    \n      No matter what you're building, your application is probably going to be communicating\n      with Square API endpoints over HTTPS. Before you begin development, you should\n      pick an HTTPS library to work with.\n    \n    \n    For certain languages, Square provides\n      client libraries that\n      make it easy to communicate with API endpoints. (Note that these client libraries\n      currently only support Connect\n      API version 2 endpoints. If you will use version\n      1 endpoints as well, you should stick with a different library for now.)\n    \n    \n      All common programming languages provide at least one built-in library for sending\n      HTTPS requests. Most languages also have one or more popular libraries that\n      are developed by a third party.\n    \n      If this is your first time working with HTTPS requests, the\n      Unirest suite of libraries is recommended.\n      It is well documented and easy to use.\n    \n\n    \n\n    \n      It's also recommended that you use an HTTPS request tool (such as\n      Postman or\n      Paw) to help you quickly and easily\n      test out requests to API endpoints during development.\n    \n    Generating client libraries from Swagger (advanced)\n    \n      Version 2 of the Connect API is defined with the\n      Swagger specification.\n      The definition is available on\n      Github.\n      You can use this definition to generate custom client libraries, and to simplify\n      other development tasks.\n    \n    \n      See Generating client libraries and other tools with Swagger for more information.\n    \n  \n\n  \n    Step 7: Learn more about the APIs you want to use\n    \n      You're ready to begin diving into whichever Square APIs fit your use case. Here's\n      a rundown of the APIs Square provides:\n    \n\n    OAuth API\n    \n      If you're using any of the APIs listed below to develop an application\n      for other merchants to use, you use the OAuth API to let those merchants\n      authorize your application to act on their behalf.\n    \n    \n      When a merchant completes the OAuth flow for your app, you generate an access\n      token for them. If you use this access token wherever you've previously\n      used your personal access token, API requests apply to that merchant's\n      account instead of to yours.\n    \n    \n      To learn all about using the OAuth API, see OAuth\n      Overview.\n    \n    \n      Code samples for the OAuth flow are available on\n      \n        Github.\n    \n\n    E-commerce API\n    \n      The e-commerce API consists of a few different components:\n    \n    \n      \n        A Javascript library that you include on your website to\n        embed a secure payment form\n      \n      \n        An HTTPS endpoint (called \n        Charge) that you use to initiate a transaction from your back-end server\n        after a buyer enters their card details into the payment form\n      \n      \n        Additional HTTPS endpoints for initiating refunds, saving\n        customer information, and other actions related to e-commerce\n      \n    \n    \n      All HTTPS endpoints related to e-commerce are part of \n      Square Connect version 2. Be sure to read the API conventions to learn the\n      details of interacting with these endpoints.\n    \n    \n      To learn the basics of using the e-commerce API, see\n      E-commerce Overview.\n    \n\n    Register API (in-person payments)\n    \n      The Register API lets your Android or iOS app open the Square Register app to\n      process in-person payments with Square hardware.\n    \n    \n      If you're developing a custom point-of-sale app, this is the API for you. To\n      learn the basics of using the Register API, see\n      Register API Overview.\n    \n\n    Reporting and employee management APIs\n    \n      Currently, most of Square's reporting and employee management HTTPS endpoints\n      are part of Square Connect version 1. Be sure\n      to read the API conventions to learn the details of interacting with these\n      endpoints.\n    \n    \n      Code samples for item management and transaction reporting are available on\n      \n      Github.\n    \n  \n\n\n          \n  Was this page helpful?\n\n  \n    \n  \n  \n  \n  \n\n\n  \n\n  \n    \n  \n  \n  \n  \n\n\n  \n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n  Still haven't found what you are looking for?\n  \n    Ask for help on\n    \n      Stack Overflow\n    \n    or on our\n    \n      community board.", "time": "2017-05-24T23:39:01.909085"}
{"url": "http://developers.bluesnap.com/v8976-JSON/docs", "site": "bluesnap.com", "descr": "BitPay\nAccept BitcoinWalletCardDocsHelpLog InSign UpAccept BitcoinWalletCardDocsHelpLog InSign UpDocumentationGetting StartedSelling OnlineSelling in PersonBanking & SettlementsUse CasesEmail BillingDonationsDevelopmentCreating InvoicesDisplaying InvoicesInvoice CallbacksInvoice StatesTestingRest APIResourcesHow to Pay with BitcoinWallet ComparisonBitPay Exchange RateHelp & SupportIntegration GuidesSelect Integration---commerce:SEODrupal CommerceIngenicoMagentoOScommerceOpenCartPrestaShopShopifyVirtue MartWP eCommerceWooCommerceWordpressXcartZenCartCreating InvoicesAn invoice is created by sending an HTTP POST message to bitpay.com/invoices with the details of the invoice passed in the body of the request.The body of the message must be JSON encoded and the content-type should be set to . On successful creation, the invoice details will be provided in a JSON encoded response.If there is an error, you will receive a JSON encoded error response. All error responses will have an error field that is an object with two fields called type and message. A merchant is restricted to creating no more than 100 invoices per hour (there are also per second and per minute limits). The fields in the request are described below.Required POST FieldsThis is the amount that is required to be collected from the buyer. Note, if this is specified in a currency other than BTC, the price will be converted into BTC at market exchange rates to determine the amount collected from the buyer. This is the currency code set for the price setting. Supported pricing currencies include , , , and all currencies listed on our Bitcoin Exchange Rates page.Optional Payment Notification (IPN) FieldsThe BitPay invoice service can be configured to send JSON-encoded POST callbacks to a merchant-provided URL endpoint. Settings for this capability are described below. A passthru variable provided by the merchant and designed to be used by the merchant to correlate the invoice with an order or other object in their system. Maximum string length is 100 characters. This passthru variable can be a JSON-encoded string, e.g.: A URL to send status update messages to your server (this must be an https URL, unencrypted http URLs or any other type of URL is not supported).BitPay will send an IPN callback to this URL when the invoice status changes.An invoice is considered to be  immediately upon receipt of payment.An invoice is considered to be  after 1 block confirmation (~10 minutes).An invoice is considered to be  after 6 block confirmations (~1 hour).If not set on the invoice, transactionSpeed will default to your account-level Order Settings. Note: orders are always posted to your BitPay Account Summary for settlement after 6 block confirmations (regardless of this setting). Notifications will be sent on every status change. Notifications are only sent when an invoice is  (according to the  setting).BitPay will send an email to this email address when the invoice status changes.Optional Order Handling FieldsThis is the URL for a return link that is displayed on the receipt, to return the shopper back to your website after a successful purchase. This could be a page specific to the order, or to their account.Optional Display InformationUsed to display your public order number to the buyer on the BitPay invoice. In the merchant Account Summary page, this value is used to identify the ledger entry. Maximum string length is 100 characters.Used to display an item description to the buyer. Maximum string length is 100 characters.Used to display an item SKU code or part number to the buyer. Maximum string length is 100 characters.Defaults to . Indicates a physical item will be shipped (or picked up). Indicates that nothing is to be shipped for this order.Buyer FieldsThese fields are used for display purposes only and will be shown on the invoice if provided. Maximum string length of each field is 100 characters.BitPay Server Response{\n  \"url\": \"https://test.bitpay.com/invoice?id=7MxRGVuBC1XvV138b3AqAR\",\n  \"posData\": \"{ \\\"ref\\\" : 711454, \\\"affiliate\\\" : \\\"spring112\\\" }\",\n  \"status\": \"new\",\n  \"btcPrice\": \"0.069032\",\n  \"btcDue\": \"0.069032\",\n  \"price\": 20,\n  \"currency\": \"USD\",\n  \"exRates\": {\n    \"USD\": 289.71999999999997\n  },\n  \"itemDesc\": \"Lawncare, March\",\n  \"invoiceTime\": 1426574968897,\n  \"expirationTime\": 1426575868897,\n  \"currentTime\": 1426574968952,\n  \"guid\": \"177005a3-2867-4c65-add8-7ab088e3c414\",\n  \"id\": \"7MxRGVuBC1XvV138b3AqAR\",\n  \"btcPaid\": \"0.000000\",\n  \"rate\": 289.72,\n  \"exceptionStatus\": false,\n  \"paymentUrls\": {\n    \"BIP21\": \"bitcoin:mjBQNNE16a6gWKkkMxc2QiLzrZVViyruUe?amount=0.069032\",\n    \"BIP72\": \"bitcoin:mjBQNNE16a6gWKkkMxc2QiLzrZVViyruUe?amount=0.069032&r=https://test.bitpay.com/i/7MxRGVuBC1XvV138b3AqAR\",\n    \"BIP72b\": \"bitcoin:?r=https://test.bitpay.com/i/7MxRGVuBC1XvV138b3AqAR\",\n    \"BIP73\": \"https://test.bitpay.com/i/7MxRGVuBC1XvV138b3AqAR\"\n  },\n  \"token\": \"Hncf45uBVPNoiXbycHDh2cC37auMxhrxm5ijNCsTKGKfX4Y1vbjWCZvoSdciMNw5G\"\n}\nThe response to a create invoice request, the response to a get invoice request, and the content of a status update notification are all identical JSON representations of the invoice object. The fields are described below.The unique id of the invoice.An https URL where the invoice can be viewed.The passthrough variable provided by the merchant on the original invoice creation.The current invoice base status. See Invoice States for more info. Possible states: , , , , , .The current invoice extended status. See Invoice States for more info. Possible states: , , , .The amount of bitcoin paid to the invoice.The numeric exchange rate (based on invoice currency) associated with the invoice at the time of the original purchase.The price set by the merchant (in terms of the provided currency).The 3 letter currency code in which the invoice was priced.The amount of bitcoins being requested for payment of this invoice (same as the price if the merchant set the price in BTC).The time the invoice was created in milliseconds since midnight January 1, 1970. Time format is 2009-01-03T18:15:05.123Z.The time at which the invoice expires and no further payment will be accepted (in milliseconds since midnight January 1, 1970). Currently, all invoices are valid for 15 minutes. Time format is 2009-01-03T18:15:05.123Z.The current time on the BitPay.com system (by subtracting the current time from the expiration time, the amount of time remaining for payment can be determined). Time format is 2009-01-03T18:15:05.123Z.Displaying InvoicesBitPay\n\n\n    \n    twitter-ico\n    Created with Sketch.\n    \n    \n        \n            \n                \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n    facebook-ico\n    Created with Sketch.\n    \n    \n        \n            \n                \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n    linkedin-ico\n    Created with Sketch.\n    \n    \n        \n            \n                \n                    \n                        \n                            \n                            \n                            \n                        \n                    \n                \n            \n        \n    \nHelp & SupportExchange RatesBusinessesAccept BitcoinIntegrationsDocumentationPricingPayoutsIndividualsPay with BitcoinBitPay CardBitPay Card FAQsBitPay WalletDevelopersDeveloper DocsBitcoreInsightOpen SourceCompanyAboutTeamPressBlogTerms of UsePrivacy Policy", "time": "2017-05-24T23:39:01.951741"}
{"url": "http://developers.bluesnap.com/v8976-Extended/docs", "site": "bluesnap.com", "descr": "", "time": "2017-05-24T23:39:02.154026"}
{"url": "http://developers.bluesnap.com/docs/make-a-payment-payment-api", "site": "bluesnap.com", "descr": "BitX is now Luno.\n    Read more\n    \u00d7\n  \n\n  \n    \n      \n        \n        \n          \n          \n        \n      \n      \n        \n\n\n  \n    \n    \n    \n    \n  \n\n\n      \n    \n    \n      \n        Sign In\n        Sign Up\n      \n      \n        Wallet\n        Sign Out\n      \n      \n        \n        Help\n        Blog\n      \n    \n  \n\n\n    \n\n  \n    \n      \n      \n        \n          \n            \n          \n        \n      \n    \n    \n      \n    \n    Get Luno\n  \n  \n    Account\n    \n      \n        Sign In\n      \n      \n        Sign Up\n      \n      \n        Wallet\n        Sign Out\n      \n    \n  \n  \n  \n    \nResources\n\n  \n    Blog\n  \n  \n    Help Centre\n  \n  \n    Bitcoin Price\n  \n  \n    Learning Portal\n  \n  \n    Fees & Features\n  \n\n\n  \n  \n  \n    \nProducts\n\n  \n    Luno Wallet\n  \n  \n    Luno Exchange\n  \n  \n    Luno API\n  \n\n\n  \n  \n  \n    \nAbout\n\n  \n    Company\n  \n  \n    Careers\n  \n\n\n  \n  \n  \n    \n    \n  \n\n\n\n    \n\n\n  \n  \n    \n      Luno API\n      Build custom applications or integrate payments with our powerful Bitcoin API\n    \n  \n\n  \n    \n      The Luno Bitcoin API gives you the ability to:\n      \n        Access current and historic Bitcoin market data\n        Submit trade orders and view order status\n        Buy and sell Bitcoin\n        Send and receive Bitcoin\n        Generate Bitcoin wallet addresses\n        Integrate your app with Luno customer accounts using OAuth2\n        Accept Bitcoin payments as a merchant\n        Build a custom e-commerce checkout experience\n      \n      \n      The Luno API makes Bitcoin available to anyone. See also: Luno for Business\n\n      \n        \n          Security\n\n          Make sure to always use HTTPS when calling the API.\n          Non-TLS HTTP requests cause error 403 to be returned. Using\n          non-TLS requests can leak your authentication\n          credentials.\n\n          Make sure that your client validates the server's SSL\n          certificate. Many libraries (e.g. urllib2 in Python2) don't\n          validate server certificates by default. Failing to verify\n          the server certificate makes your application vulnerable to\n          man-in-the-middle attack.\n\n          Conventions\n\n          Timestamps are always represented as an integer number\n          of milliseconds since the UTC Epoch (a Unix timestamp).\n\n          Prices and volumes are always represented as a decimal\n          strings e.g. \"123.3432\". We use strings instead of floats\n          to preserve the precision.\n\n          Parameters for POST calls are sent as URL-encoded forms\n          (application/x-www-form-urlencoded).\n\n          Rate\n            limiting\n\n          Non-authenticated API calls are rate limited to 10 per\n          minute. Authenticated API calls are rate limited to 60 per\n          minute. API call rate limits allow bursts up to 5\n          consecutive calls. Exceeding the limit causes HTTP error code 429\n          or 503 to be returned.\n\n          Libraries\n\n          The Go library is the recommended way to access the API:\n               view it on GitHub.\n          \n\n\n          The following libraries were implemented by third parties or are no\n          longer under active development and are listed here for convenience.\n          No support for them is provided by Luno and they may be out of date.\n          A thorough review of the code is recommended before including them in any project.\n\n          \n            \n              Android\n            \n            \n              Haskell\n            \n            \n              Node.js\n            \n            \n              PHP\n            \n            \n              Python\n            \n            \n              Ruby\n            \n          \n\n          Market data\n\n          Market data API calls can be accessed by anyone without\n          authentication.\n\n          Ticker\n\n          Returns the latest ticker indicators.\n\n          Definition\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          All tickers\n\n          Returns the latest ticker indicators from all active\n          Luno exchanges.\n\n          Definition\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          Order Book\n\n          Returns a list of bids and asks in the order book. Ask\n          orders are sorted by price ascending. Bid orders are sorted\n          by price descending. Note that multiple orders at the same\n          price are not necessarily conflated.\n\n          Definition\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          Trades\n\n          Returns a list of the most recent trades. At most 100 results are returned per call.\n\n          Definition\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          \n            Authentication\n\n          Some API calls require your application to authenticate\n          itself. This is done using an API key associated with your\n          account. You can create an API key by visiting the API Keys section on the settings page.\n\n          An API key consists of an id and a secret. For example:\n          cnz2yjswbv3jd (key id) and\n          0hydMZDb9HRR3Qq-iqALwZtXLkbLR4fWxtDZvkB9h4I (key\n          secret).\n\n          API requests are authenticated using HTTP basic\n          authentication with the key id as the username and the key\n          secret as the password. A missing, incorrect or revoked key causes\n          error 401 to be returned.\n\n          Permissions\n\n          Each API key is granted a set of permissions when it is created.\n          The key can only be used to call the permitted API functions.\n          \n\n          Here is a list of the possible permissions:\n\n          \n             (View balance)\n             (View transactions)\n             (Send to any address)\n             (View addresses)\n             (Create addresses)\n             (View orders)\n             (Create orders)\n             (View withdrawals)\n             (Create withdrawals)\n             (View merchant invoices)\n             (Create merchant invoices)\n             (Debit accounts)\n             (Credit accounts)\n             (View beneficiaries)\n             (Create and delete beneficiaries)\n          \n\n          A set of permissions is represented as the bitwise OR of each\n          permission in the set.\n          For example the set of permissions required to view balances and\n          orders is .\n\n\n          Accounts\n\n          All transactions on the Luno platform operate on accounts.\n          Each account is denominated in a single currency and\n          contains an ordered list of entries that track its running balance.\n          \n\n          Each account has a separate balance and available balance.\n          The available balance may be lower than the balance if some funds\n          have been reserved (e.g. for a open limit order).\n          Account entries affect the balance and available balance\n          independently.\n          \n\n          Account entries are numbered sequentially. It is guaranteed\n          that entries are never reordered or deleted.\n          It is also guaranteed that the core attributes of the entry\n          (the running balances and index) are never modified.\n          Therefore, an account acts as an append-only log of transactions.\n          \n\n          Create Account\n          Create an additional account for the specified currency.\n          Definition\n          \n\n          Arguments\n          \n           You must be verified to trade  in order to be able to create an account. A user has a limit of 4 accounts per currency.\n\n          Example request\n          \n\n          Example response\n          \n\n          Permissions required\n          \n\n          Balances\n\n          Return the list of all accounts and their respective balances.\n\n          Definition\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          Permissions required\n          \n\n\n          Transactions\n\n          Return a list of transaction entries from an account.\n\n          Transaction entry rows are numbered sequentially starting from 1,\n          where 1 is the oldest entry.\n          The range of rows to return are specified with the\n           (inclusive) and  (exclusive)\n          parameters. At most 1000 rows can be requested per call.\n\n          If  or  is non-positive, the range\n          wraps around the most recent row. For example, to fetch the 100 most\n          recent rows, use  and .\n          \n\n          Definition\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          Permissions required\n          \n\n\n          Pending transactions\n\n          Return a list of all pending transactions related to the account.\n\n          Unlike account entries, pending transactions are not numbered,\n          and may be reordered, deleted or updated at any time.\n\n          Definition\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          Permissions required\n          \n\n\n          Orders\n\n          Trading on the market is done by submitting trade orders.\n          After a new order has been created, it is submitted for processing by the\n          order matching engine. The order then either matches against an existing order\n          in the order book and is filled or it rests in the order book until it is\n          stopped.\n          \n\n          Click here to read more about how order matching works.\n\n          List Orders\n\n          Returns a list of the most recently placed orders. You\n          can specify an optional  parameter to restrict\n          the results to only open orders. You can also specify the market by using the optional pair parameter. The list is truncated\n          after 100 items.\n\n          Definition\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          \n            BID\n\n            bid (buy) limit order\n\n            ASK\n\n            ask (sell) limit order\n          The possible order states are:\n\n          \n            PENDING\n\n            The order has been placed. Some trades may have\n            taken place but the order is not filled yet.\n\n            COMPLETE\n\n            The order is no longer active. It has been settled or has been\n            cancelled.\n          \n\n          The  and  amounts\n          are the principal amounts that were traded, ignoring fees.\n          For example, if the order resulted in a single trade of\n          1 BTC for 1000 ZAR, then  and\n          .\n\n          The  and  amounts\n          are the fees debited after the trade principal amounts.\n\n          For example, for a buy order,  would\n          be credited to the BTC account and\n          \n          would be debited from the ZAR account.\n          Similarly, for a sell order, \n          would be credited to the ZAR account and\n          \n          would be debited from the BTC account.\n          \n\n          The  specifies the market.\n\n          Permissions required\n          \n\n\n          Post Limit Order\n\n          Create a new trade order.\n\n          \n          Warning!\n          Orders cannot be reversed once they have executed.\n          Please ensure your program has been thoroughly tested before\n          submitting orders.\n          \n\n          Definition\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          Permissions required\n          \n\n\n          Post Market Order\n\n          Create a new market order.\n\n          \n          Warning!\n          Orders cannot be reversed once they have executed.\n          Please ensure your program has been thoroughly tested before\n          submitting orders.\n          \n\n          Definition\n          A market order executes immediately, and either buys as much bitcoin that can be bought for a set amount of fiat currency, or sells a set amount of bitcoin for as much fiat as possible.\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          Permissions required\n          \n\n\n          Stop an Order\n\n          Request to stop an order.\n\n          Definition\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          Permissions required\n          \n\n\n          Get an Order\n\n          Get an order by its id.\n\n          Definition\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          Permissions required\n          \n\n          List Trades\n\n          Returns a list of your recent trades for a given pair, sorted by oldest\n          first.\n\n           in the response indicates the type of order that\n          you placed in order to participate in the trade.\n\n          If  in the response is true, then the order\n          which completed the trade (market taker) was a bid order.\n\n          Definition\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          Permissions required\n          \n\n          Fee Information\n\n          Returns your fees and 30 day trading volume (as of midnight) for a given pair.\n\n          Definition\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          Permissions required\n          \n\n\n          Receive addresses\n\n          Receive addresses\n\n          Returns the default receive address associated with your\n          account and the amount received via the address. You can\n          specify an optional address parameter to return information\n          for a non-default receive address. In the response,\n          total_received is the total confirmed Bitcoin amount\n          received excluding unconfirmed transactions.\n          total_unconfirmed is the total sum of unconfirmed receive\n          transactions.\n\n          Definition\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          Permissions required\n          \n\n\n          Create receive address\n\n          Allocates a new receive address to your account. There is a rate limit of 1 address per hour, but bursts of up to 10 addresses are allowed.\n\n          Definition\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          Permissions required\n          \n\n\n          Withdrawals requests\n\n          List withdrawal requests\n\n          Returns a list of withdrawal requests.\n\n          Definition\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          Permissions required\n          \n\n\n          Request a withdrawal\n\n          Creates a new withdrawal request.\n\n          Definition\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          Permissions required\n          \n\n\n          Get the status of a withdrawal\n            request\n\n          Returns the status of a particular withdrawal\n          request.\n\n          Definition\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          Permissions required\n          \n\n\n          Cancel a withdrawal\n            request\n\n          Cancel a withdrawal request. This can only be done if\n          the request is still in state .\n\n          Definition\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          Permissions required\n          \n\n\n          Send\n\n          Send Bitcoin from your account to a Bitcoin address or email address.\n\n          If the email address is not associated with an existing Luno account,\n          an invitation to create an account and claim the funds will be sent.\n          \n\n          \n          Warning!\n          Bitcoin transactions are irreversible.\n          Please ensure your program has been thoroughly tested before\n          using this call.\n          \n\n          Definition\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          Permissions required\n          \n\n\n          Quotes\n\n          Quotes allow you to lock in an exchange rate for a short time\n          with the option of either accepting or rejecting the quote.\n\n          Quotes can be useful for various customer-facing applications\n          where price fluctuations would be confusing.\n          \n\n          The API is used as follows:\n          First create a quote for the\n          transaction that you want to perform.\n          If you decide to accept the quote before it expires, you will\n          exercise the quote.\n          If you decide not to accept it, you will\n          discard the quote.\n          You can also retrieve the status of a quote at any time.\n          \n\n          Create a quote\n\n          Creates a new quote to buy or sell a particular amount.\n\n          You can specify either the exact amount that you want to pay or\n          the exact amount that you want too receive.\n\n          For example, to buy exactly 0.1 Bitcoin using ZAR, you would\n          create a quote to BUY 0.1 XBTZAR. The returned quote includes\n          the appropriate ZAR amount.\n          To buy Bitcoin using exactly ZAR 100, you would create a quote to\n          SELL 100 ZARXBT. The returned quote specifies the Bitcoin\n          as the counter amount that will be returned.\n          \n\n          An error is returned if your account is not verified for the\n          currency\n          pair, or if your account would have insufficient balance to ever\n          exercise the quote.\n          \n\n          Definition\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n\n          Permissions required\n          \n\n\n          Get a quote\n\n          Get the latest status of a quote.\n\n          Definition\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          Permissions required\n          \n\n\n          Exercise a quote\n\n          Exercise a quote to perform the trade. If there is sufficient\n          balance available in your account, it will be debited and the\n          counter amount credited.\n          \n\n          An error is returned if the quote has expired or if you\n          have insufficient available balance.\n\n          Definition\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          Permissions required\n          \n\n\n          Discard a quote\n\n          Discard a quote. Once a quote has been discarded, it cannot\n          be exercised even if it has not expired yet.\n\n          Definition\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n          Permissions required\n          \n\n\n          OAuth2\n\n          The OAuth2 API allows you to build applications that\n          securely link into Luno accounts. Users can authorize your\n          application to perform certain actions on their account\n          such as fetching transaction history, trading and even\n          withdrawing funds.\n\n          If you are interested in integrating with Luno, please\n          contact us. We will need\n          the following information to register your OAuth2\n          client:\n\n          \n            Application name\n            Application description\n            Website URL\n            Permissions required\n            Redirect URL\n            Your Luno account username\n          \n\n          Authorize\n\n          The first step to connecting to a user's account is to\n          redirect the user to the authorize endpoint.\n\n          \n\n          The user is presented with a page explaining the\n          requested permissions. If the user authorizes the request,\n          they will be redirected to the client's redirect URL with\n          an authorization code specified as one of the query\n          parameters e.g.\n          https://example.com/callback?code=authorization_code&state=your_unique_state.\n\n          The requested permissions (scope) is an integer\n          representing a set of permissions as described in\n          the permissions section.\n          For example, to view the user's balance and orders, the\n          permission required is Perm_R_Balance | Perm_R_Orders =\n          33.\n\n          Grant\n\n          Once your application has received an authorization\n          code, it can exchange it for an API key. This is done by\n          calling the grant endpoint. The resulting API key can be\n          used to access the Luno API calls for which it has the\n          appropriate permissions.\n\n          Definition\n          \n\n          Arguments\n          \n\n          Example request\n          \n\n          Example response\n          \n\n\n          Streaming API (beta)\n\n          \n          Beta warning: This API is still in beta phase. This means that\n          it may still undergo incompatible changes.\n          \n\n          \n          The websocket API provides streaming access to market data.\n          It is more efficient and provides lower latency information than\n          repeatedly polling the orderbook and recent trades but is\n          more complicated to implement.\n          \n\n          \n          The streaming protocol works by requiring the client to keep an\n          in-memory record of the order book. Update messages are then sent\n          from the server and the client uses these to update its copy\n          of the order book. If they are applied correctly and fully, the\n          client's view of the order book will be identical to the server's\n          view.\n          \n\n          Protocol\n\n          The client state consists of the following data:\n          \n            sequence number\n            set of bid orders (id, price, volume)\n            set of ask orders (id, price, volume)\n            list of trades\n          \n          \n\n          Each update message transmitted from the server has a unique\n          increasing sequence number.\n          The message with sequence number n can be applied to state\n          sequence n-1 to produce state sequence n.\n\n          A message may contain multiple updates which must be applied\n          atomically and in order.\n\n          If an update is received out-of-sequence (for example update\n          sequence n+2 or n-1 received after update sequence n),\n          the client cannot continue and must reinitialize the state.\n\n          There are three types of update:\n\n          Create\n\n          Add a bid or ask order to the order book with a given id, price and volume.\n\n          \n\n          Delete\n\n          Remove the order from the order book with a given id.\n\n          \n\n          Trade\n\n          Reduce the outstanding volume of an order in the order book and append a trade to the trades list.\n\n          \n\n          Examples\n\n          A new order is placed below market\n\n          In this case, an update message would be sent with a single create update.\n\n          A market order is placed that is immediately filled\n\n          In this case, an update message would be sent containing multiple trade updates. There will be no create update since the new order never enters the order book.\n\n          An order is placed that is partially filled\n\n          In this case, the update message contains multiple trade updates and a create update. The volume in the create update is the remaining volume for the order.\n\n          An order is stopped\n\n          In this case, the update message contains a single delete update.\n\n\n          Websockets\n\n          The streaming updates protocol described above can be accessed\n          using websockets. The server first sends the current order book\n          state and thereafter sends update messages as quickly as possible.\n          Both the client and server must send regular keep alive messages\n          to avoid disconnection during periods of low update message\n          activity.\n          \n\n          Connect to the websocket server at: \n\n          \n          Beta warning: This API is still in beta phase. This means that\n          it may still undergo incompatible changes.\n          \n\n          The client must start by sending API key credentials:\n\n          \n\n          The server will then send the current order book in this format:\n\n          \n\n          Thereafter the server sends messages like these:\n\n          \n\n          An empty message is a keep alive message.\n\n          If there is any error while processing an update (e.g.\n          an out-of-order update) or there is a network error or timeout\n          (e.g. keep alive message not received in time), the client should\n          close the connection and reconnect in order to reinitialize its\n          state.\n          It is critical that clients implement exponential backoff for\n          all reconnections to avoid overloading the server in case of errors.\n          \n\n          Merchant API\n\n          The Luno Merchant API is currently only available to high-volume partners. If you are interested in integrating Bitcoin payments as a merchant, please contact Luno Support.\n\n\n          Changelog\n\n          \n            \n\t\t    2017-03-02: Added  which returns your fees and 30 day trading volume.\n            \n            \n              2016-11-21: The  now returns at most 100 results per call.\n            \n            \n              2016-11-01: Removed 50 receive address create limit on  to allow unlimited receive addresses per account. Address creation is rate limited to 1 per hour, allowing for bursts of up to 10 consecutive calls.\n            \n            \n              2016-08-10: Added  to allow\n              listing of recent trades. Please note that trades will soon be\n              removed from the response of \n              .\n            \n            2016-08-05: Added beta Streaming API section\n            2016-07-25: Added optional  parameter to .\n            2016-05-29: Error code 429 may be returned when exceeding rate limits. This will become the default as of 2016-07-01.\n            2016-04-04: Added  field to  and  responses.\n            2016-02-05: Added optional  parameter to  and added  field to the response.\n            2015-09-14: Added  to allow placing of market orders.\n            2015-07-29: Added  and  permissions. You will have to generate a new API key if you require these permissions.\n            2015-06-08: Renamed  to  and  to  to be more consistent with other endpoints. The old URLs are now deprecated.\n\n            2015-05-28: Added  for creating additional accounts in specified currencies.\n            2015-05-07: Added the \"Name\" field to the \"Balance\" response\n            2015-04-25:\n              \n                Added the \"Accounts\" section.\n                Added the account transactions and pending transactions calls.\n                Added the \"Permissions\" section.\n                Documented which permissions are required for each call.\n                Updated description of the \"send\" call. A pin is no longer required.\n                Added \"name\" parameter to \n              \n            \n\n            2015-03-27: Return a list of trades for an order on  if the order has any trades.\n            \n\n            2015-01-30: Clarified the interpretation of , ,  and  in the  response in the case where  is nonzero for buy orders and where  is nonzero for sell orders.\n            \n\n            2014-12-17: The amount parameter for withdrawal requests now\n              excludes the withdrawal fee.\n            \n\n            2014-12-12:\n              \n                Added the new Quotes API.\n                The  beta call has been\n                  deprecated.\n              \n            \n\n            2014-12-04: The  method can now be called\n              with no arguments to return all account balances.\n            \n\n            2014-08-26:\n\n              \n                Added Send API call.\n\n                Added OAuth2 API.\n              \n            \n\n            2014-06-10: Orders placed through the API are no\n              longer subject to different limits than those placed\n              through the website.\n\n            2014-06-02:\n\n              \n                You can now create multiple API keys with\n                  different permissions (e.g. read-only,\n                  read/write).\n\n                Added calls to list, create, get and cancel\n                  withdrawal requests.\n\n                Added link to Android client library.\n              \n            \n\n            2014-05-29:\n\n              \n                The preferred host name for API calls has\n                  changed to .\n\n                Added experimental call to retrieve\n                  transactions list.\n\n                Added call to allocate new receive\n                  addresses.\n\n                Receive address call now returns the amount\n                  received by that address.\n\n                You can now request \n                  to return only the list of open orders.\n              \n            \n\n            2014-04-15: Previously orders created through the\n              API would expire after 24 hours. Now, orders created\n              through the API do not expire. The behaviour is now the\n              same as for orders placed through the website.\n\n            2014-01-25:\n\n              \n                A new  call has\n                  been added to get the bitcoin address you need\n                  to fund your trade account balance.\n              \n            \n\n            2014-01-21:\n\n              \n                The API has been extended to support\n                  multiple asset pairs.\n\n                A new  call has been\n                  added to query the trading account\n                  balance.\n\n                All URLs have been renamed from\n                   to\n                  . The old URLs\n                  are now deprecated.\n\n                getlimits: This call has been deprecated.\n                  Please use the new  call\n                  instead.\n\n                ticker: The  field is\n                  now deprecated.\n\n                orderbook: The  field\n                  is now deprecated.\n\n                trades: The  field is\n                  now deprecated.\n\n                listorders: The ,\n                  ,  and\n                   fields are now deprecated.\n                  Please use ,\n                  , ,\n                   fields instead.\n\n                The embedded market indicator has been\n                  removed since nobody is using it.\n\n                All deprecated features will continue to\n                  work for two months.\n              \n            \n\n            2014-01-06:\n\n              \n                listorders: Added fee_btc and fee_zar\n                  fields.\n\n                listorders: Removed SETTLEMENT state (it's\n                  no longer relevant).\n\n                ticker: Removed mtgox_price (use Mt Gox's\n                  API directly instead).\n              \n            \n          \n\n        \n\n        \n          \n            \n              Security\n\n              \n                Conventions\n              \n\n              \n                Rate Limiting\n              \n\n              \n                Libraries\n              \n\n              \n                Market Data\n\n                \n                  \n                    Ticker\n                  \n\n                  \n                    All\n                      Tickers\n                  \n\n                  \n                    Order Book\n                  \n\n                  \n                    Trades\n                  \n                \n              \n\n              \n                Authentication\n                \n                  Permissions\n                \n              \n\n              \n                Accounts\n                \n\n                  Create Account\n                  Balances\n                  Transactions\n                  Pending transactions\n                \n              \n\n              \n                Orders\n\n                \n                  \n                    List\n                      orders\n                  \n\n                  \n                    Post limit order\n                  \n\n                  \n                    Post market order\n                  \n\n                  \n                    Stop an\n                      order\n                  \n\n                  \n                    Get an\n                      order\n                  \n\n                  \n                    List trades\n                  \n                  \n                    Fee Information\n                  \n                \n              \n\n              \n                Receive addresses\n\n                \n                  \n                    Receive\n                      address\n                  \n\n                  \n                    Create\n                      receive address\n                  \n                \n              \n\n              \n                Withdrawal requests\n\n                \n                  \n                    List withdrawal\n                      requests\n                  \n\n                  \n                    Request a\n                      withdrawal\n                  \n\n                  \n                    Get the status\n                      of a withdrawal request\n                  \n\n                  \n                    Cancel a\n                      withdrawal request\n                  \n                \n              \n\n              \n                Send\n              \n\n              \n                Quotes\n                \n                  Create a quote\n                  Get a quote\n                  Exercise a quote\n                  Discard a quote\n                \n              \n\n              \n                OAuth2\n\n                \n                  \n                    Authorize\n                  \n\n                  \n                    Grant\n                  \n                \n              \n\n              \n                Streaming API (beta)\n                \n                  Protocol\n                  Examples\n                  Websockets\n                \n              \n\n              \n                Merchant API\n              \n\n              \n                Changelog\n              \n            Back to top\n          \n        \n      \n\n    \n  \n\n\n\n    \n\n  \n    \n      It\u2019s never too late to get started with Bitcoin. Learn, buy and use Bitcoin with Luno now.\n    \n    \n      \n      \n      \n      \n      \n    \n  \n\n\n    \n\n  \n    \n      \n      \u00a9 Copyright 2017\n      \n        \n        \n        \n        \n      \n    \n    \n      \nAbout\n\n  \n    Company\n  \n  \n    Careers\n  \n\n\n    \n    \n      \nResources\n\n  \n    Blog\n  \n  \n    Help Centre\n  \n  \n    Bitcoin Price\n  \n  \n    Learning Portal\n  \n  \n    Fees & Features\n  \n\n\n    \n    \n      \nProducts\n\n  \n    Luno Wallet\n  \n  \n    Luno Exchange\n  \n  \n    Luno API\n  \n\n\n    \n    \n      Other\n      \n        \n          Security\n        \n        \n          Legal\n        \n      \n    \n    \n      Language\n      \n        \n        \n        \n          English\n        \n        \n        \n          Indonesia", "time": "2017-05-24T23:39:02.329869"}
{"url": "https://iugu.com/referencias/api", "site": "iugu.com", "descr": "Docs\n                        \n                        \n                            API Reference\n                        \n                        \n                            Support\n                        \n                    \n                    \n                \n\n                \n                    \n                        \n                            \n                                Log into Dashboard\n                                \n                            \n                        \n                    \n                \n            \n        \n\n        \n            \n                \n                \n                \n                    \n                        \n    Back to DocsPayments REST APIPayPal PaymentsIntegration StepsPrerequisitesCreate PayPal PaymentGet Payment ApprovalExecute PaymentCredit Card PaymentsPCI ComplianceIntegration StepsPrerequisitesCreate Credit Card PaymentAuthorize and Capture PaymentsOverviewIntegration StepsPrerequisitesAuthorize PaymentCapture Authorized PaymentOrdersOverviewIntegration StepsPrerequisitesCreate OrderGet Customer ApprovalExecute OrderAuthorize OrderCapture OrderRefund PaymentsIntegration StepsPrerequisitesFully Refund a SalePartially Refund a SaleRefund a Captured PaymentPayment Experience Web ProfilesIntegration StepsPrerequisitesCreate Web Experience ProfileCreate PayPal Payment with Web ProfileGet Customer ApprovalOther Payment Experience API TasksBilling Plans and AgreementsBilling PlansBilling AgreementIntegration StepsPrerequisitesCreate PlanActivate PlanCreate AgreementGet Customer ApprovalExecute AgreementTest REST API TransactionsIntegration StepsPrerequisitesTest Credit Card PaymentsTest PayPal Payments\n\n                        \n                            \n\t\n  Authorize and capture payments\n\n  \nUse the Payments API to authorize a payment that you can capture later. For example, you might have a delayed shipment for which you do not want to collect funds right away.\n\nOverview\nYou can authorize credit card payments and PayPal payments.\nCredit card payment authorizations are immediately approved so no further action is needed before you can capture these payments.\n\nNote: Direct credit card payment and related features are restricted in some countries.\n\nPayPal payment authorizations require buyer approval before you can capture these payments. For information, see PayPal Express Checkout Integration.\nAuthorization and capture includes these time periods:\n\nTo ensure that funds are still available, you can re-authorize a payment after the initial three-day honor period. You can re-authorize a payment only once from days four to 29 after the three-day honor period for the original authorization expires. If 30 days have passed from the original authorization, you must create a new authorization instead. A re-authorized payment itself has a new three-day honor period. You can re-authorize a transaction once for up to 115% of the original authorization or $75 USD more, whichever is less.\nFor any payment type, you can capture less than the or the full original authorized amount. You can also capture up to 115% of or $75 USD more than the original authorized amount, whichever is less.\nYou can also complete partial captures during a single authorization period. For PayPal payment authorizations, you must enable this feature on your PayPal account.\n\nNote: Buyers and merchants cannot close accounts that have authorized payments that have not yet been captured.\n\n\nNote: You can also authorize payments for orders, which confirms the availability of funds but does not place the funds on hold. You can make multiple authorizations and captures against a single order. See authorize orders.\n\n\n\nIntegration steps\n\n\nPrerequisites\n\n\nGet an access token. To get an access token, you must create a PayPal app. When you create an app, PayPal generates a set of OAuth  and  keys for your app for both the sandbox and live environments. Then, to get an access token, you pass the  credentials in the  header in a get access token request. The authorization server issues an access token in exchange for your client ID and secret credentials. You use the access token for authentication when you make REST API requests.\nFor more information, see make your first call. If you are a non-US developer, see International Developer Questions. You can use your sandbox access token to try any of the code in the REST API reference.\n Each API response includes HATEOAS links that enable you to construct a payment flow.\n\n\nTo receive payments in a currency that you do not hold, first configure your Payment Receiving Preferences in your PayPal account. Otherwise, your payment status might be pending until you manually approve the payment in your PayPal account.\n\n\nTo receive guest checkout payments, which allow credit cards, enable the PayPal Account Optional option in your account settings. The path to this option for US accounts is:\nProfile > My selling tools > Website preferences > PayPal Account Optional\n\n\nTo test payments, create test buyer and merchant accounts in the PayPal sandbox. To create a test buyer account, select the Personal account type. To create a test merchant account, select the Business account type. See create sandbox accounts.\n\n\n\nAuthorize the payment\nTo authorize a payment to be captured later, create a payment and set the  to . You can authorize PayPal payments and credit card payments.\n\nThis example creates an authorization for a PayPal payment:\n\nIf the request succeeds, the response includes the payment details. The response also includes:\n\n. The PayPal-generated ID for the authorization.\n. The state of the authorization, which is either  or .\n. The date and time when the payment authorization was created.\n. The  and  links that you use to get buyer approval and execute the payment authorization. After you successfully execute the payment authorization, PayPal responds with a  link that you use to capture the payment.\n\n\n\nFor a credit card authorization, the response returns an authorization object with the  set to  or :\n\nNext, capture an authorized payment.\nCapture an authorized payment\nTo capture an authorized payment, include the authorization ID in the URI of the call.\nInclude the amount that you want to capture in the  object in the JSON request body. For a partial capture, you can provide a lower amount.\nOptionally, set  to  to prevent future captures.\n\nThe response shows details for the captured payment including links that enable you to complete actions against the captured payment:\n\nNext\nYou can complete these authorization-related tasks:\n\nShow authorization details \nRe-authorize a payment\nVoid an authorization\nRefund a captured payment\n\nOr, learn how to create orders.\nAdditional information\n\nThe REST APIs and HATEOAS\nPayments API Reference\nCapture payments later in the SDK Quickstart Guide\nHow PayPal uses OAuth 2.0\nREST API errors\nPayPal REST API Country and Currency Support\n\n\n\n\n  \n\n                        \n                    \n                \n            \n\n            \n                \n                    \n                        \n                            \n                                Docs\n                                \n                                    Express Checkout\n                                    Payment Buttons\n                                    Braintree SDK\n                                    All Docs\n                                \n                            \n                            \n                                Support\n                                \n                                    FAQ\n                                    Merchant Support\n                                    Account Support\n                                    Community\n                                \n                            \n                            \n                                Resources\n                                \n                                    GitHub\n                                    Partners\n                                    Demo Portal\n                                    Blog\n                                \n                            \n                            \n                                Family\n                                \n                                    Braintree\n                                    Venmo\n                                    Paydiant\n                                    Xoom\n                                \n                            \n                        \n                        \n                            \n                                \n                                    Privacy\n                                    Legal\n                                    Contact\n                                \n                            \n                            \n                                Copyright 1999-2017 PayPal. All rights reserved.", "time": "2017-05-24T23:39:02.451473"}
{"url": "https://developer.visa.com/reference", "site": "visa.com", "descr": "BlueSnap Developer Hub{\"id\":\"57336fd5a6a9c40e00e13a0b\",\"name\":\"BlueSnap Developer Hub\",\"subdomain\":\"bluesnap-developers\",\"versions\":[{\"_id\":\"57336fd5a6a9c40e00e13a0e\",\"releaseDate\":\"2016-04-21T12:38:21.772Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Reporting\",\"version_clean\":\"4.0.1\",\"version\":\"4.0.1\"},{\"_id\":\"57336fd5a6a9c40e00e13a12\",\"releaseDate\":\"2016-04-13T15:39:35.430Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Payment API\",\"version_clean\":\"2.0.1\",\"version\":\"2.0.1\"},{\"_id\":\"57345e531f1b32170018de9d\",\"releaseDate\":\"2016-05-12T10:43:31.248Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Quickstart\",\"version_clean\":\"1.0.1\",\"version\":\"1.0.1\"},{\"_id\":\"57345e82a24c162000670314\",\"releaseDate\":\"2016-05-12T10:44:18.526Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Extended Payment API\",\"version_clean\":\"3.0.1\",\"version\":\"3.0.1\"},{\"_id\":\"57345f1bf0dc3a0e007748b8\",\"releaseDate\":\"2016-05-12T10:46:51.470Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Backup of v1 Dev Hub\",\"version_clean\":\"0.0.0\",\"version\":\"0\"},{\"_id\":\"57b1cf234c0c6f0e000078be\",\"releaseDate\":\"2016-08-15T14:18:11.085Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Reporting - 3.17.1 Aug 2016\",\"version_clean\":\"4.0.3\",\"version\":\"4.0.3\"},{\"_id\":\"57b1dae94c0c6f0e000078f7\",\"releaseDate\":\"2016-08-15T15:08:25.009Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Quickstart - 3.17.1 Aug 2016\",\"version_clean\":\"1.0.3\",\"version\":\"1.0.3\"},{\"_id\":\"57b32c65c9a4551700b968df\",\"releaseDate\":\"2016-08-16T15:08:21.265Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Extended API - 3.17.1 Aug 2016\",\"version_clean\":\"3.0.3\",\"version\":\"3.0.3\"},{\"_id\":\"57b6e797aabccd0e00f24890\",\"releaseDate\":\"2016-08-19T11:03:51.708Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Payment API - XML - 3.17.1 (Aug 2016)\",\"version_clean\":\"2.0.3\",\"version\":\"2.0.3\"},{\"_id\":\"57d7f58cf6bfa00e00680b34\",\"releaseDate\":\"2016-09-13T12:48:12.723Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Payment API - testing JSON support per page\",\"version_clean\":\"2.0.2\",\"version\":\"2.0.2\"},{\"_id\":\"57d96350ed63190e0022d2c8\",\"releaseDate\":\"2016-09-14T14:48:48.141Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Payment API - JSON - 3.18 Oct 2016\",\"version_clean\":\"2.1.2\",\"version\":\"2.1.2\"},{\"_id\":\"57e03831031bca0e00460d70\",\"releaseDate\":\"2016-09-19T19:10:41.642Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Reporting and Tools - 3.18 Oct 2016\",\"version_clean\":\"4.0.4\",\"version\":\"4.0.4\"},{\"_id\":\"57e28f07daba90170011753c\",\"releaseDate\":\"2016-09-21T13:45:43.345Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Payment API - XML - 3.18 Oct 2016\",\"version_clean\":\"2.0.4\",\"version\":\"2.0.4\"},{\"_id\":\"57e28fb71e7b7220000d7f3d\",\"releaseDate\":\"2016-09-21T13:48:39.181Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Basics - 3.18 Oct 2016\",\"version_clean\":\"1.0.4\",\"version\":\"1.0.4\"},{\"_id\":\"57e2900630b3901700643823\",\"releaseDate\":\"2016-09-21T13:49:58.628Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Extended API - 3.18 Oct 2016\",\"version_clean\":\"3.0.4\",\"version\":\"3.0.4\"},{\"_id\":\"5819f4cc06e08a370027f298\",\"releaseDate\":\"2016-11-02T14:14:36.124Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.18.1 Release\",\"version_clean\":\"4.0.5\",\"version\":\"4.0.5\"},{\"_id\":\"58345c3bad81fc25005a7abb\",\"releaseDate\":\"2016-11-22T14:54:51.290Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19 Release\",\"version_clean\":\"4.0.6\",\"version\":\"4.0.6\"},{\"_id\":\"58345c5e92b42a230018f2f1\",\"releaseDate\":\"2016-11-22T14:55:26.877Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19 Release\",\"version_clean\":\"2.0.5\",\"version\":\"2.0.5\"},{\"_id\":\"58345c7cf1f6b41b007f2254\",\"releaseDate\":\"2016-11-22T14:55:56.351Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19 Release\",\"version_clean\":\"2.1.3\",\"version\":\"2.1.3\"},{\"_id\":\"5834a8acb970792700f09d38\",\"releaseDate\":\"2016-11-22T20:21:00.222Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19 Release\",\"version_clean\":\"3.0.5\",\"version\":\"3.0.5\"},{\"_id\":\"5835d3f5b67de41b00d7b4cb\",\"releaseDate\":\"2016-11-23T17:37:57.348Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19 Release\",\"version_clean\":\"1.0.5\",\"version\":\"1.0.5\"},{\"_id\":\"587d05d253a1d13100269630\",\"releaseDate\":\"2017-01-16T17:41:38.767Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19.2 Release\",\"version_clean\":\"2.0.6\",\"version\":\"2.0.6\"},{\"_id\":\"587d05f458434025008973cf\",\"releaseDate\":\"2017-01-16T17:42:12.934Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19.2 Release\",\"version_clean\":\"2.1.4\",\"version\":\"2.1.4\"},{\"_id\":\"587e5ce618c2e22f00fe7fde\",\"releaseDate\":\"2017-01-17T18:05:26.145Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19.2 Release\",\"version_clean\":\"3.0.6\",\"version\":\"3.0.6\"},{\"_id\":\"587e5edf18c2e22f00fe80a1\",\"releaseDate\":\"2017-01-17T18:13:51.330Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19.2 Release\",\"version_clean\":\"1.0.6\",\"version\":\"1.0.6\"},{\"_id\":\"5888bf55e7c13a2d0075208c\",\"releaseDate\":\"2017-01-25T15:08:05.359Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19.3 nano\",\"version_clean\":\"4.0.7\",\"version\":\"4.0.7\"},{\"_id\":\"58ade8044b3e0b0f00e1bd4f\",\"releaseDate\":\"2017-02-22T19:35:32.491Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"v 3.20 Release\",\"version_clean\":\"8976.0.0-JSON\",\"version\":\"8976-JSON\"},{\"_id\":\"58ade83e75df0f1b001ed70a\",\"releaseDate\":\"2017-02-22T19:36:30.067Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.20 Release\",\"version_clean\":\"8976.0.0-XML\",\"version\":\"8976-XML\"},{\"_id\":\"58b0795eca312823003c681c\",\"releaseDate\":\"2017-02-24T18:20:14.087Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":true,\"codename\":\"3.20 Release\",\"version_clean\":\"8976.0.0-Basics\",\"version\":\"8976-Basics\"},{\"_id\":\"58b57d9d4714a81900118c62\",\"releaseDate\":\"2017-02-28T13:39:41.432Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.20 Release\",\"version_clean\":\"8976.0.0-Tools\",\"version\":\"8976-Tools\"},{\"_id\":\"58b58050c0da3223002f13ad\",\"releaseDate\":\"2017-02-28T13:51:12.260Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.20 Release\",\"version_clean\":\"8976.0.0-Extended\",\"version\":\"8976-Extended\"},{\"_id\":\"590b31db030acd0f00f0607c\",\"releaseDate\":\"2017-05-04T13:51:23.450Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.21.0 Release\",\"version_clean\":\"8976.0.0-Basics-Draft\",\"version\":\"8976-Basics-Draft\"},{\"_id\":\"590b3203c0161e19009537bd\",\"releaseDate\":\"2017-05-04T13:52:03.955Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.21.0 Release\",\"version_clean\":\"8976.0.0-Tools-Draft\",\"version\":\"8976-Tools-Draft\"},{\"_id\":\"590b3232b5f9ab23009dc4bf\",\"releaseDate\":\"2017-05-04T13:52:50.478Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.21.0 Release\",\"version_clean\":\"8976.0.0-JSON-Draft\",\"version\":\"8976-JSON-Draft\"},{\"_id\":\"590b325726f50e0f00dd6c0d\",\"releaseDate\":\"2017-05-04T13:53:27.274Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.21.0 Release\",\"version_clean\":\"8976.0.0-XML-Draft\",\"version\":\"8976-XML-Draft\"},{\"_id\":\"590b3280030acd0f00f060b7\",\"releaseDate\":\"2017-05-04T13:54:08.391Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.21.0 Release\",\"version_clean\":\"8976.0.0-Extended-Draft\",\"version\":\"8976-Extended-Draft\"}],\"doc_slug\":\"\",\"current_version\":{\"version_clean\":\"8976.0.0-JSON\",\"version\":\"8976-JSON\"},\"oauth\":{\"enabled\":false},\"api\":{\"name\":\"\",\"url\":\"https://sandbox.bluesnap.com/services/2\",\"contenttype\":\"body\",\"auth\":\"basic\",\"explorer\":true,\"proxyEnabled\":true,\"jwt\":false,\"authextra\":[{\"_id\":\"561b9fceab412a0d004d8631\",\"type\":\"header\",\"default\":\"Basic QVBJXzE0NDQ2NTAyMDMxNDQ5NDA0MjIzNjU6QkxVRTEyMw==\",\"key\":\"Authorization\"}],\"headers\":[{\"_id\":\"561c03a2eaf4852b00a46771\",\"value\":\"Application/XML\",\"key\":\"content-type\"},{\"_id\":\"56f12a866d8030220001ef98\",\"value\":\"2.0\",\"key\":\"bluesnap-version\"}],\"object_definitions\":[]},\"apiAlt\":[{\"_id\":\"57ee593a21ceb20e0061959e\",\"object_definitions\":[],\"headers\":[{\"_id\":\"57ee59b33b369f0e00469e40\",\"value\":\"application/json\",\"key\":\"content-type\"},{\"_id\":\"57ee59b33b369f0e00469e3f\",\"value\":\"application/json\",\"key\":\"accept\"},{\"_id\":\"57ee672b21ceb20e006195a4\",\"value\":\"2.0\",\"key\":\"bluesnap-version\"}],\"authextra\":[{\"_id\":\"57ee59b33b369f0e00469e3e\",\"type\":\"header\",\"default\":\"Basic QVBJXzE0NDQ2NTAyMDMxNDQ5NDA0MjIzNjU6QkxVRTEyMw==\",\"key\":\"Authorization\"}],\"jwt\":false,\"proxyEnabled\":true,\"explorer\":true,\"auth\":\"basic\",\"contenttype\":\"body\",\"url\":\"https://sandbox.bluesnap.com/services/2\",\"name\":\"JSON\"}],\"plan_details\":{\"name\":\"Business\",\"is_active\":true,\"cost\":199,\"versions\":10000,\"custom_domain\":true,\"custom_pages\":true,\"whitelabel\":true,\"errors\":true,\"password\":true,\"landing_page\":true,\"themebuilder\":true,\"stylesheet\":true,\"javascript\":true,\"html\":true,\"extra_html\":true,\"admins\":true,\"apps\":true},\"apps\":{\"enabled\":false},\"intercom\":\"\",\"intercom_secure_emailonly\":false,\"flags\":{\"allow_hub2\":false,\"hub2\":false,\"migrationRun\":true,\"oauth\":false,\"swagger\":false,\"correctnewlines\":false,\"speedyRender\":true,\"allowXFrame\":false,\"jwt\":false,\"hideGoogleAnalytics\":false,\"stripe\":false,\"autoSslGeneration\":false},\"asset_base_url\":\"\"}API BasicsPayment API JSONPayment API XMLExtended Payment APIReporting & ToolsSign Up{\"__v\":0,\"_id\":\"58ade8054b3e0b0f00e1bd79\",\"api\":{\"results\":{\"codes\":[]},\"settings\":\"\",\"auth\":\"required\",\"params\":[],\"url\":\"\"},\"body\":\"The BlueSnap Payment API is designed for easy implementation and out-of-the-box global  payment processing. It supports credit and debit card payments, digital wallets and Paypal. Design your checkout form and start accepting payments quickly.\\n\\n##About the API\\nThis API is a collection of RESTful based web services. It uses standard HTTP features, such as HTTP verbs and Basic authentication, and can be used easily with any HTTP client.\\n\\nThese are the base API URLs for the BlueSnap environments:\\nSandbox: `https://sandbox.bluesnap.com`\\nProduction: `https://ws.bluesnap.com`\\n\\nFor information about credentials, authentication and more, see [About the BlueSnap APIs](/v1.0/docs/about).\\n\\n##API web services\\nThese are the core web services in the API:\\n  * Card Transactions (including digital wallets): [Auth Capture](doc:auth-capture) & [Auth Only](doc:auth-only)\\n  * [Create PayPal Transaction](doc:create-paypal-transaction)\\n  * [ACH/ECP Transaction](doc:create-ecp-transaction) \\n  * Subscriptions: [Create Plan](doc:create-plan) & [Create Subscription](doc:create-subscription) \\n  * [Refund](doc:refund) \\n  * [Vaulted Shopper](doc:create-vaulted-shopper) \\n\\n**See the full list of endpoints and requests in the left menu.**\\n\\n##Quickstart\\nNeed help getting started?\\nSee the tutorials on [setting up a basic checkout page](/v1.0/docs/build-a-form) and [accepting your first credit card payment](/v1.0/docs/make-a-payment-payment-api).\\n\\n##Android SDK\\nBlueSnap's [Android SDK](doc:android-sdk) enables you to easily accept credit card and PayPal payments directly from your Android app and then process the payments via BlueSnap's Payment API.\",\"category\":\"58ade8044b3e0b0f00e1bd50\",\"createdAt\":\"2016-05-12T14:01:35.267Z\",\"excerpt\":\"Reference docs, guides and tutorials for the Payment API (JSON)\",\"githubsync\":\"\",\"hidden\":false,\"isReference\":false,\"link_external\":false,\"link_url\":\"\",\"next\":{\"pages\":[],\"description\":\"\"},\"order\":0,\"parentDoc\":null,\"project\":\"57336fd5a6a9c40e00e13a0b\",\"slug\":\"bluesnap-payment-api-json\",\"sync_unique\":\"\",\"title\":\"BlueSnap Payment API (JSON)\",\"type\":\"basic\",\"updates\":[],\"user\":\"560d5913af97231900938124\",\"version\":\"58ade8044b3e0b0f00e1bd4f\",\"childrenPages\":[]}Payment API (JSON)BlueSnap Payment API (JSON)Card TransactionspostAuth CapturepostAuth OnlyputCaptureputAuth ReversalgetRetrievePayPal TransactionspostCreate PayPal TransactionputUpdate PayPal TransactiongetRetrieve PayPal TransactionACH/ECP TransactionspostCreate ECP TransactiongetRetrieve ECP TransactionRefundsputRefundVaulted ShopperspostCreate Vaulted ShopperputUpdate Vaulted ShoppergetRetrieve Vaulted ShopperSubscriptionspostCreate PlanputUpdate PlangetRetrieve All PlansgetRetrieve Specific PlanpostCreate SubscriptionputUpdate SubscriptiongetRetrieve All SubscriptionsgetRetrieve Specific SubscriptiongetRetrieve All Charges for a SubscriptiongetRetrieve Specific ChargegetRetrieve Subscription Switch Charge AmountMarketplaceMarketplace OverviewpostCreate VendorputUpdate VendorgetRetrieve VendorgetRetrieve All VendorsWalletsCreate WalletRetrieve WalletErrorsError Handling OverviewFraud ErrorsCard Transaction ErrorsAlt Transaction ErrorsSubscription & Billing Plan ErrorsRefund ErrorsVaulted shopper errorsBatch Transaction ErrorsHosted Payment Field ErrorsWallet ErrorsMarketplace ErrorsJSON ObjectsSchemas (.xsd files)altTransactionbillingContactInfocardHolderInfocardTransactionchargechargeInfochargeListcreditCardecpecpInfoecpTransactionfraudEventsfraudResultInfolastPaymentInfomessagemetadatapayerInfopaymentSourcepaymentSourcespayoutInfopaypalTransactionplanplanListpriceprocessingInforefundrefundssubscriptionsubscriptionListshippingContactInfotransactionFraudInfotransactionMetaDataudfvaultedShoppervendorAgreementvendorvendorInfovendorPrincipalTest Data & CodesTest Card DataCredit Card CodesCountry CodesCurrency CodesState and Province CodesAVS Response CodesCVV Response CodesGuides & ToolsStatement DescriptorHosted Payment FieldsClient-side EncryptionFraud PreventionAccount UpdaterIPNs (Webhooks)Retrieving Card InfoSubscriptions GuideMasterPass GuideVisa Checkout GuidePayPal GuideACH/ECPMetadata GuideReturning Shoppers GuideBatch Processing Guide (XML)Reporting APILATAM Local ProcessingMobile SDKAndroid SDKEdit this PageSuggest EditsBlueSnap Payment API (JSON)Reference docs, guides and tutorials for the Payment API (JSON)\n\n\t\n\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\tThe BlueSnap Payment API is designed for easy implementation and out-of-the-box global  payment processing. It supports credit and debit card payments, digital wallets and Paypal. Design your checkout form and start accepting payments quickly.\nAbout the API\nThis API is a collection of RESTful based web services. It uses standard HTTP features, such as HTTP verbs and Basic authentication, and can be used easily with any HTTP client.\nThese are the base API URLs for the BlueSnap environments:Sandbox: Production: \nFor information about credentials, authentication and more, see About the BlueSnap APIs.\nAPI web services\nThese are the core web services in the API:\n\nCard Transactions (including digital wallets): Auth Capture & Auth OnlyCreate PayPal TransactionACH/ECP Transaction Subscriptions: Create Plan & Create Subscription Refund Vaulted Shopper \nSee the full list of endpoints and requests in the left menu.\nQuickstart\nNeed help getting started?See the tutorials on setting up a basic checkout page and accepting your first credit card payment.\nAndroid SDK\nBlueSnap's Android SDK enables you to easily accept credit card and PayPal payments directly from your Android app and then process the payments via BlueSnap's Payment API.\n\n\t\t\t\t\n\t\t\t\n\t\t\n\t\n\n  \n  \n    \n\t  \n    \n    \n    \n    \n    Legal  |  Privacy Policy |  BlueSnap Terms & Conditions  |  \u00a9 2016  BlueSnap Inc. All rights reserved.", "time": "2017-05-24T23:39:03.475460"}
{"url": "https://developer.visa.com/reference", "site": "visa.com", "descr": "Documentation\n    \n      \n      \n        \n        \n          CyberSource Payments\n        \n        \n          \n          \n            \n    CyberSource Payments API\n\n\n\n    \n    \n        \n        \n            Authorize a Credit Card\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Capture Funds for an Authorized Amount\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Create a Sales Transaction\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Refund A Capture\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Refund A Sale\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Create A Credit\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Void A Capture\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Void A Sale\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Void A Refund\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Void A Credit\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Reverse An Authorization\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Payments Search\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Payments Search by Id\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve a Payment Authorization\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve a Capture\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve Capture By Authorization Id\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Search for Specific Sale\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve A Refund\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve Refund By Capture Id\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve Refund By Sale Id\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve A Credit\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve A Reversal\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve A Void Transaction\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve All Authorizations\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve All Captures\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve All Sales\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve All Refunds\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve All Credits\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Payer Authentication Check Enrollment\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Payer Authentication Validate Authentication\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Error Resource\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    Secure Acceptance Flexible Token API\n\n\n\n    \n    \n        \n        \n            Generate Key\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Tokenize Card\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n        \n      \n      \n      \n        \n        \n          Payment Account Attributes Inquiry\n        \n        \n          \n          \n            \n    Funds Transfer Attributes Inquiry API\n\n\n\n    \n    \n        \n        \n            Funds Transfer Inquiry\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    General Attributes Inquiry API\n\n\n\n    \n    \n        \n        \n            General Inquiry\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n        \n      \n      \n      \n        \n        \n          Foreign Exchange Rates\n        \n        \n          \n          \n            \n    Foreign Exchange Rates API\n\n\n\n    \n    \n        \n        \n            Foreign Exchange Rates\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n        \n      \n      \n      \n        \n        \n          Visa Consumer Transaction Controls\n        \n        \n          \n          \n            \n    Customer Rules API\n\n\n\n    \n    \n        \n        \n            Registration\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Manage Controls by Document ID\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n        \n            \n            \n                \n                \n                    Retrieve the consumer transaction controls document\n                \n            \n            \n            \n                \n                \n                    Create a new payment control(s) within the consumer transaction controls document\n                \n            \n            \n            \n                \n                \n                    Update the existing details of a consumer transaction control document\n                \n            \n            \n            \n                \n                \n                    Delete existing details within the consumer transaction controls document for a card\n                \n            \n            \n        \n        \n    \n    \n    \n        \n        \n            Delete Control Document by Document ID\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Application Configuration\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n        \n            \n            \n                \n                \n                    Retrieve the App's configuration data for notification callback settings\n                \n            \n            \n            \n                \n                \n                    Update the App's configuration data for notification callback settings\n                \n            \n            \n        \n        \n    \n    \n    \n        \n        \n            Rule Categories Allowed by Primary Account Number\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Merchant Controls Allowed by Primary Account Number\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Transaction Controls Allowed by Primary Account Number\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    Authorization Decision API\n\n\n\n    \n    \n        \n        \n            Decision Request\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Decision Request Actions\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n        \n            \n            \n                \n                \n                    Retrieve the details of a specific decision record\n                \n            \n            \n            \n                \n                \n                    Update the state of a specific decision record\n                \n            \n            \n        \n        \n    \n    \n    \n        \n        \n            Decision Requests by PrimaryAccountNumber\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Decision Request History for SponsorID\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Merchant Pre-Evaluation Decision Request\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    Program Administration API\n\n\n\n    \n    \n        \n        \n            Manage rule configuration category and configurable capabilities for an issuer\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n        \n            \n            \n                \n                \n                    Retrieve rule configuration and capabilities allowed for an issuer\n                \n            \n            \n            \n                \n                \n                    Create rule configuration and capabilities allowed for an issuer\n                \n            \n            \n            \n                \n                \n                    Modify rule configuration and capabilities allowed for an issuer\n                \n            \n            \n            \n                \n                \n                    Delete rule configuration and capabilities allowed for an issuer\n                \n            \n            \n        \n        \n    \n    \n    \n        \n        \n            Manage transaction controls allowed for an issuer\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n        \n            \n            \n                \n                \n                    Retrieve transaction controls allowed for an issuer\n                \n            \n            \n            \n                \n                \n                    Create transaction controls allowed for an issuer\n                \n            \n            \n            \n                \n                \n                    Modify transaction controls allowed for an issuer\n                \n            \n            \n            \n                \n                \n                    Delete transaction controls allowed for an issuer\n                \n            \n            \n        \n        \n    \n    \n\n\n          \n          \n          \n            \n    Enrollment Callback API\n\n\n\n    \n    \n        \n        \n            Enrollment Callback\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n        \n            \n            \n                \n                \n                    Enroll a card\n                \n            \n            \n            \n                \n                \n                    De-enroll a card\n                \n            \n            \n        \n        \n    \n    \n\n\n          \n          \n          \n            \n    Notification Delivery Callback API\n\n\n\n    \n    \n        \n        \n            Notification Callback\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n        \n      \n      \n      \n        \n        \n          Merchant Locator\n        \n        \n          \n          \n            \n    Merchant Locator API\n\n\n\n    \n    \n        \n        \n            Locator\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n        \n      \n      \n      \n        \n        \n          Merchant Search\n        \n        \n          \n          \n            \n    Merchant Search API\n\n\n\n    \n    \n        \n        \n            Search\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n        \n      \n      \n      \n        \n        \n          Visa Travel Notification Service\n        \n        \n          \n          \n            \n    Visa Travel Notification API\n\n\n\n    \n    \n        \n        \n            Add Travel Itinerary\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Update Travel Itinerary\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Delete Travel Itinerary\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve Travel Itinerary\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n        \n      \n      \n      \n        \n        \n          Visa Merchant Offers Resource Center\n        \n        \n          \n          \n            \n    Offers Data API\n\n\n\n    \n    \n        \n        \n            Retrieve Offers By Offer Id\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve Offers By Content Id\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve Offers By Filter\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve All Offers\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    Reference Data API\n\n\n\n    \n    \n        \n        \n            Retrieve Data by Merchant Address\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve Data by Merchant\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve Data by Reference\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n        \n      \n      \n      \n        \n        \n          Visa Checkout\n        \n        \n          \n          \n            \n    Get Payment Data API\n\n\n\n    \n    \n        \n        \n            Get Payment Data\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    Update Payment Information API\n\n\n\n    \n    \n        \n        \n            Update Payment Info\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n        \n      \n      \n      \n        \n        \n          Merchant Measurement\n        \n        \n          \n          \n            \n    Merchant Benchmark API\n\n\n\n    \n    \n        \n        \n            Merchant Benchmark\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n        \n      \n      \n      \n        \n        \n          Preauthorized Payment Cancellation Service\n        \n        \n          \n          \n            \n    Stop Payment Order API\n\n\n\n    \n    \n        \n        \n            Stop Payment Order\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    Stop Payment Order Details API\n\n\n\n    \n    \n        \n        \n            Stop Payment Details\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    Stop Payment Order Inquiry API\n\n\n\n    \n    \n        \n        \n            Stop Payment Inquiry\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n        \n      \n      \n      \n        \n        \n          Digital Card and Account Services\n        \n        \n          \n          \n            \n    Card Inquiry API\n\n\n\n    \n    \n        \n        \n            Debit Card Inquiry\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    Card Services API\n\n\n\n    \n    \n        \n        \n            Create Card ID for a PAN\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve Account and Balance Information for Card ID\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve Account and Balance Information for Account ID\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve Card and Account Details for Card ID\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Card Status\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n        \n            \n            \n                \n                \n                    Retrieve Card Status\n                \n            \n            \n            \n                \n                \n                    Update Card Status\n                \n            \n            \n        \n        \n    \n    \n    \n        \n        \n            Verify User Information\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve Cardholder Information\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve Notification Settings\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Notification Details\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n        \n            \n            \n                \n                \n                    Retrieve Notification Details\n                \n            \n            \n            \n                \n                \n                    Update Notification Details\n                \n            \n            \n        \n        \n    \n    \n    \n        \n        \n            Notification Subscriptions\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n        \n            \n            \n                \n                \n                    Retrieve Notification Subscriptions\n                \n            \n            \n            \n                \n                \n                    Update Notification Subscriptions\n                \n            \n            \n        \n        \n    \n    \n    \n        \n        \n            Verify One-Time Passcode\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve Transaction History\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve Requirements to Load Funds to Card\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Load Funds to Card\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Retrieve a List of Fund Transfer Accounts\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Transfer Funds to an Account or Card\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n        \n      \n      \n      \n        \n        \n          Visa Card Eligibility Service\n        \n        \n          \n          \n            \n    Visa Card Eligibility API\n\n\n\n    \n    \n        \n        \n            Validate\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Prepay\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Redeem\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n        \n      \n      \n      \n        \n        \n          B2B Virtual Account Payment Method\n        \n        \n          \n          \n            \n    Account Management service\n\n\n\n    \n    \n        \n        \n            Virtual Card Requisition\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Manage Payment Controls\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            List Payment Control\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Get Account Status\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Get Security Code\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Request Virtual Account\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    Single Use Account Pool Maintenance Service\n\n\n\n    \n    \n        \n        \n            SUA Get Account Status\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Manage Proxy\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    Payment Service\n\n\n\n    \n    \n        \n        \n            Process Payments\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Resend Payment\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Get Payment Detail URL\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Get Payment Details\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Cancel Payment\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    Supplier Service\n\n\n\n    \n    \n        \n        \n            Create Supplier\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Update Supplier\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Disable Supplier\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Get Supplier Details\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Manage Supplier Account\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n        \n      \n      \n      \n        \n        \n          Mobile Location Confirmation\n        \n        \n          \n          \n            \n    Cardholder Enrollment API\n\n\n\n    \n    \n        \n        \n            Enrollments\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    Location Update API\n\n\n\n    \n    \n        \n        \n            Locations\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n        \n      \n      \n      \n        \n        \n          Visa Direct\n        \n        \n          \n          \n            \n    Funds Transfer API\n\n\n\n    \n    \n        \n        \n            PullFundsTransactions POST\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            PullFundsTransactions GET\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            MultiPullFundsTransactions POST\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            MultiPullFundsTransactions GET\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            PushFundsTransactions POST\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            PushFundsTransactions GET\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            MultiPushFundsTransactions POST\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            MultiPushFundsTransactions GET\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            ReverseFundsTransactions POST\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            ReverseFundsTransactions GET\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            MultiReverseFundsTransactions POST\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            MultiReverseFundsTransactions GET\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    Watch List Screening API\n\n\n\n    \n    \n        \n        \n            Watch List Inquiry\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    mVisa API\n\n\n\n    \n    \n        \n        \n            CashInPushPayments POST\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            CashInPushPayments GET\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            CashOutPushPayments POST\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            CashOutPushPayments GET\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            MerchantPushPayments POST\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            MerchantPushPayments GET\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    Reports API\n\n\n\n    \n    \n        \n        \n            TransactionData\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n        \n      \n      \n      \n        \n        \n          Visa Token Service\n        \n        \n          \n          \n            \n    Enroll PAN\n\n\n\n    \n    \n        \n        \n            Enroll PAN\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    Provision Token\n\n\n\n    \n    \n        \n        \n            Provision Token\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Provision Token Given PAN Enrollment ID\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    Get Card Meta Data\n\n\n\n    \n    \n        \n        \n            Get Card Meta Data\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    Get Content\n\n\n\n    \n    \n        \n        \n            Get Content\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    Payment data (Token and Cryptogram)- Given token\n\n\n\n    \n    \n        \n        \n            Payment data\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    Token Life Cycle Management\n\n\n\n    \n    \n        \n        \n            Delete Token\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Suspend Token\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Resume Token\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n          \n            \n    Token Status Retrieval Request\n\n\n\n    \n    \n        \n        \n            Get Token Status\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n        \n      \n      \n      \n        \n        \n          Visa Global ATM Locator\n        \n        \n          \n          \n            \n    Locate ATMs API\n\n\n\n    \n    \n        \n        \n            ATMs Inquiry\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Totals Inquiry\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Routes Inquiry\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n    \n        \n        \n            Geocodes Inquiry\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n        \n      \n      \n      \n        \n        \n          Payment Account Validation\n        \n        \n          \n          \n            \n    Payment Account Validation API\n\n\n\n    \n    \n        \n        \n            Card Validation\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        \n    \n    \n\n\n          \n          \n        \n      \n      \n    \n    \n      \n      \n        \n        \n          Request & Response Codes", "time": "2017-05-24T23:39:04.833114"}
{"url": "https://developer.visa.com/reference", "site": "visa.com", "descr": "Contact Sales: 1 866-374-0948\nPRODUCTS\n\n\tAPIs\n\t\n\t\tAggregation API\n\t\tAccount Verification API\n\t\tOpen Banking API\n\t\teBills API\n\t\tRisk Insights\n\t\tMoney Movement API\n\t\n\n\tFeatured FinApps\n\t\n\t\tAccount Summary\n\t\tBudgets\n\t\tCash Flow Analysis\n\t\tExpense & Income Analysis\n\t\tInvestment Holding\n\t\tNet Worth Summary\n\t\n\n\tData Analytics\n\t\n\t\tTransaction Data Enrichment\n\t\tFor Financial Institutions\n\t\tCredit Risk Modeling\n\t\tConsumer Spending Data\n\t\tRetail Competitive Insights\n\t\n\n\n\nSOLUTIONS\n\n\tIndustry Solutions\n\t\n\t\tWealth Management\n\t\tPersonal Financial Management\n\t\tRisk Insight Suite\n\t\tRetail Banking\n\t\tPayments\n\t\tData Clarity\n\t\n\n\tDeveloper Solutions\n\t\n\t\tBuild Financial Apps\n\t\tCustomer Activation\n\t\tFraud Reduction\n\t\n\n\n\nSERVICES\n\n\tProfessional Services\n\tClient Services\n\tDeveloper Support\n\tSecurity Dashboard\n\n\nRESOURCES\nCOMPANY\n\n\tWhy Yodlee\n\tCareers\n\tIndia Office\n\tLaunchpad\n\tIncubator\n\tInvestor Relations\n\tNewsroom\n\tContact Us\n\n\nTransactions\nFastLink\nMore\u2026\nPremium Features\nTandem\nSense\n\n\n\t\t\n\t\t\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t          \n\n          \n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\n\nCONTACT SALES: 1 866-374-0948DEVELOPER PORTALBlogContact UsAustralia and New ZealandEMEAGlobal\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPRODUCTS\n\n\tAPIs\n\t\n\t\tAggregation API\n\t\tAccount Verification API\n\t\tOpen Banking API\n\t\teBills API\n\t\tRisk Insights\n\t\tMoney Movement API\n\t\n\n\tFeatured FinApps\n\t\n\t\tAccount Summary\n\t\tBudgets\n\t\tCash Flow Analysis\n\t\tExpense & Income Analysis\n\t\tInvestment Holding\n\t\tNet Worth Summary\n\t\n\n\t\u00a0\n\t\n\t\tSave for a Goal\n\t\tTransactions\n\t\tFastLink\n\t\tMore\u2026\n\t\tPremium Features\n\t\tTandem\n\t\tSense\n\t\n\n\tData Analytics\n\t\n\t\tTransaction Data Enrichment\n\t\tFor Financial Institutions\n\t\tCredit Risk Modeling\n\t\tConsumer Spending Data\n\t\tRetail Competitive Insights\n\t\n\n\n\nSOLUTIONS\n\n\tIndustry Solutions\n\t\n\t\tWealth Management\n\t\tPersonal Financial Management\n\t\tRisk Insight Suite\n\t\tRetail Banking\n\t\tPayments\n\t\tData Clarity\n\t\n\n\tDeveloper Solutions\n\t\n\t\tBuild Financial Apps\n\t\tCustomer Activation\n\t\tFraud Reduction\n\t\n\n\n\nSERVICES\n\n\tProfessional Services\n\tClient Services\n\tDeveloper Support\n\tSecurity Dashboard\n\n\nRESOURCES\nCOMPANY\n\n\tWhy Yodlee\n\tCareers\n\tIndia Office\n\tLaunchpad\n\tIncubator\n\tNewsroom\n\tInvestor Relations\n\tNewsroom\n\tContact Us\n\n\n\n\n\n \n \n\n\n\t\t\t\t\n\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t            \n            \t\t\t\n\t\t\t                \n                    \n\n                        \n                            Open Banking API\n\n                                                \n                        \n                    \n\n\t\t\t\t\t\n                \n            \n        \t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\r\n\r\n\r\n\t\t\r\n\t\r\n\t\r\n\t\t\r\n\t\t\r\n\t\t\t\t\r\n\t\t\r\n\r\n\t\t\t\r\n\n\t\n\t\t\n\t\t\tPut Banking Innovation on the Fast Track\nNow your financial institution can share data with third party developers and innovate as fast as today\u2019s non-banking digital innovators \u2013 all while meeting the most stringent security regulations. Envestnet\u00ae | Yodlee\u00ae Open Banking API makes it all possible.\n\n\t\t\n\t\n\n\t\n\t\t\n\t\t\tSafely work with third-party developers\nAs a single API with a customized developer portal, the Open Banking API connects all internal bank systems, yet only exposes data to developers in a secure and compliant way. This allows financial institutions to innovate with speed and agility. Leveraging our immense data network, the Yodlee Open Banking API enables financial institutions to access user-permissioned financial data from over 15,500 global sources.\n\n\t\t\n\t\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\t\n\t\t\n\t\t\tKey Benefits\n\n\t\t\n\t\n\n\t\n\t\t\n\t\t\t\nTap internal and external developers to create apps and functionality that can be rapidly deployed in a secure bank environment\nSafely exposes data structures for app development\nSpecialized tools, a custom developer portal, sample code, API library and community assets spearhead quicker and more efficient development cycles\n\n\n\t\t\n\t\n\n\t\n\t\t\n\t\t\t\nCo-branded for your individual financial institution\nFrees data locked in legacy systems\nEliminates banking system complexity\nExposes bank API in a secure and compliant way to decrease risk and speed innovation\n\n\n\t\t\n\t\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\t\n\t\t\n\t\t\tMore APIs\n\n\t\t\n\t\n\r\n\r\n        \r\n\r\n       \r\n   \r\n    AGGREGATION API \r\n            \r\n        \r\n\r\n\r\n\r\n\r\n        \r\n\r\n       \r\n   \r\n    ACCOUNT VERIFICATION API \r\n            \r\n        \r\n\r\n\r\n\r\n\r\n        \r\n\r\n       \r\n   \r\n   eBILLS API \r\n            \r\n        \r\n\r\n\r\n\r\n\r\n        \r\n\r\n       \r\n   \r\n   MONEY MOVEMENT API \r\n            \r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\t\n\t\t\n\t\t\tRelated Resources\n\n\t\t\n\t\nRetail Banking Data Sheet: Open Banking API \u2013 EMEAAggregation API eBook: Fintech Rising: Creating Synergy in Financial ServicesRetail Banking Data Sheet: Open Banking API \u2013 USMore Resources\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\t\n\t\t\n\t\t\tGo Under the Hood\n\n\t\t\n\t\n\n\t\n\t\t\n\t\t\tIncubator\nGot a vision or a prototype in need of financial data? It\u2019s time to apply for the incubator program!\n\n\t\t\n\t\nLearn More\n\t\n\t\t\n\t\t\tDeveloper Portal\nGet access to the latest documentation, sample code, testing tools, and more on our Developer Portal.\n\n\t\t\n\t\nLog In\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\t\n\t\t\n\t\t\tClients Working With Us\n\n\t\t\n\t\n\r\n\r\n\n\t\t\t\r\n\t\t\r\n\t\t\r\n\t\t\t\r\n\t\r\n\t\r\n\t\r\n\r\n\t\t\r\n\t\r\n\r\n\r\n\r\n\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\r\n\r\n       \t\t\t\r\n        \r\n         \r\n          \r\n             \r\n              \r\n                Ready To Talk?Contact Us\r\n                          \r\n            \r\n          \r\n         \r\n               \r\n               \r\n       \r\n       \r\n         \r\n          \r\n             \r\n              \r\n                \r\n                                Newsletter Sign-up:\r\n                                  \r\n                  \r\n                  \r\n                      \r\n                  \r\n                   \r\n                                      \r\n                          \r\n            \r\n          \r\n         \r\n                \r\n      \r\n      \r\n\t\t\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\t\t\t\t\t\t                  \r\n          \r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tCompany InfoCompany\nContact Us\nOur Team\nEvents\nCareers\nIndia Office\nInvestor Relations\nNewsroom\nTrending\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tOfferingsData Platform\nDeveloper APIs\nData Analytics\nProducts\nSolutions\nServices\nResources\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tLegalPrivacy Notice\nYodlee Security\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tYodlee Portals\t\t\t\r\n\r\n\r\nYodlee Blog\r\nDeveloper Portal\r\nLaunchpad\r\nIncubator\r\nMoney by Envestnet|Yodlee\r\nYodlee Labs \r\nNEW Yodlee MoneyCenter\r\nYodlee SmallBusiness\r\n\r\n\r\n\r\n\r\nEnvestnet\r\nPMC\u00ae\r\nTamarac\u2122\r\nERS\r\nWheelhouse Analytics\r\n\r\n\r\n\r\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\r\n\r\n        \t\r\n\t\t\t\t\t\r\n            \r\n            \r\n            \r\n                                    \r\n          \r\n\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\r\n     \r\n      \r\n      \t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t\u00a9 2017 Envestnet | Yodlee.\u2122", "time": "2017-05-24T23:39:05.540782"}
{"url": "https://developer.visa.com/reference", "site": "visa.com", "descr": "", "time": "2017-05-24T23:39:05.920711"}
{"url": "https://developer.visa.com/reference", "site": "visa.com", "descr": "Toggle navigation\n\n\n\n\n\n\n\n\nDevelopers Center \n\n\n\n\nAPI Reference\nGuide\nSign up\n \n\n\n\n\n\n\n\n\n\nimg.wp-smiley,img.emoji{display:inline!important;border:none!important;box-shadow:none!important;height:1em!important;width:1em!important;margin:0 .07em!important;vertical-align:-0.1em!important;background:none!important;padding:0!important;}\n\n\n\n\n\n\n\n\n\n\n\n\n\nAPI DOC\n\n\n\n\n\n\n\n\n\n{{ navigationService.title | uppercase}}\n\n\n+\n-\n-\n\n{{ resourceGroup.title }}\n\n\n\n\n{{ resource.title }}\n\n\n\n\n\n\n\n\n\n{{ resourceGroup.title }}\n\n\nBASE URI\n\n\n{{ contentService.uri }}\n\n\n\n\n{{ resource.title }}\n\n\n\n{{ resource.method }}\n\n\n{{ resource.uri }}\n\n\nURI Parameters\n\n\n{{ argument.name }}\n\nREQUIRED\n \n\n\n{{ argument.description }}\n-\n\n\n\nRequest Arguments\n\n\n{{ argument.name }}\n\nREQUIRED\n \n\n\n{{ argument.description }}\n-\n\n\n\nResponse Attributes\n\n\n{{ attribute.name }}\n\n{{ attribute.type }}\n\n\n{{ attribute.description }}\n-\n\n\n\n\n\n\n\n{{ currentLanguage }}\n\n\n\n\n{{ languageValue }}\n\n\n\n\n\n\n\n\n\n\n\nExample Request\n\n                                                    {{ lineCode }}\n                                                \n\n\nExample Request Body\n\n                                                    {\n                                                        '{{ key }}': '{{ value }}',\n                                                    }\n                                                \n\n\nExample Response Body\n\n                                                    {\n                                                        '{{ key }}': '{{ value }}',\n                                                    }\n                                                \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{{ currentSectionTitle }}\n\n\n\n\n{{ currentSessionValue.title }}\n\n\n\n\n\n{{ currentLanguage }}\n\n\n\n\n{{ languageValue }}\n\n\n\n\n \n\n\n\n \n\n\n{{ status.name }}\n{{ status.description }}\n\n\n\n\nNo example\nLearn more about Payfirma\n\n\n\n \n\n\nExample Request\n\n                                    {{ lineCode }}\n                                \n\n\nExample Request Body\n\n                                    {\n                                      '{{ key }}': '{{ value }}',\n                                    }\n                                \n\n\nExample Response Body\n\n                                    {\n                                      '{{ key }}': '{{ value }}',  '{{ key }}':['{{va}}],\n                                    }", "time": "2017-05-24T23:39:05.998893"}
{"url": "https://developer.visa.com/reference", "site": "visa.com", "descr": "Docs\n                        \n                        \n                            API Reference\n                        \n                        \n                            Support\n                        \n                    \n                    \n                \n\n                \n                    \n                        \n                            \n                                Log into Dashboard\n                                \n                            \n                        \n                    \n                \n            \n        \n\n        \n            \n                \n                \n                \n                    \n                        \n    Back to DocsPayments REST APIPayPal PaymentsIntegration StepsPrerequisitesCreate PayPal PaymentGet Payment ApprovalExecute PaymentCredit Card PaymentsPCI ComplianceIntegration StepsPrerequisitesCreate Credit Card PaymentAuthorize and Capture PaymentsOverviewIntegration StepsPrerequisitesAuthorize PaymentCapture Authorized PaymentOrdersOverviewIntegration StepsPrerequisitesCreate OrderGet Customer ApprovalExecute OrderAuthorize OrderCapture OrderRefund PaymentsIntegration StepsPrerequisitesFully Refund a SalePartially Refund a SaleRefund a Captured PaymentPayment Experience Web ProfilesIntegration StepsPrerequisitesCreate Web Experience ProfileCreate PayPal Payment with Web ProfileGet Customer ApprovalOther Payment Experience API TasksBilling Plans and AgreementsBilling PlansBilling AgreementIntegration StepsPrerequisitesCreate PlanActivate PlanCreate AgreementGet Customer ApprovalExecute AgreementTest REST API TransactionsIntegration StepsPrerequisitesTest Credit Card PaymentsTest PayPal Payments\n\n                        \n                            \n\t\n  Credit card payments\n\n  \nUse the Payments API to easily and securely accept online and mobile credit card payments. You can enable payers to make credit card payments with only a few clicks, depending on the country.\n\nNote: Some countries restrict direct credit card payments and related features.\n\nPayPal makes it simple to charge credit cards. Just pass the credit card, shipping, and payment information to the Payments REST API.\nPCI compliance\nAll merchants who accept, store, transmit or process any card holder data, regardless of size or number of transactions, must comply with the Payment Card Industry Data Security Standards (PCI DSS).\n\n\nNote: If you do not want to store credit card information on your servers, you can use the Vault API to store credit card details in the PayPal vault. See store credit card data.\n\n\nIntegration steps\nTo accept a credit card payment:\n\n\nPrerequisites\n\n\nGet an access token. To get an access token, you must create a PayPal app. When you create an app, PayPal generates a set of OAuth  and  keys for your app for both the sandbox and live environments. Then, to get an access token, you pass the  credentials in the  header in a get access token request. The authorization server issues an access token in exchange for your client ID and secret credentials. You use the access token for authentication when you make REST API requests.\nFor more information, see make your first call. If you are a non-US developer, see International Developer Questions. You can use your sandbox access token to try any of the code in the REST API reference.\n Each API response includes HATEOAS links that enable you to construct a payment flow.\n\n\nTo receive payments in a currency that you do not hold, first configure your Payment Receiving Preferences in your PayPal account. Otherwise, your payment status might be pending until you manually approve the payment in your PayPal account.\n\n\nTo receive guest checkout payments, which allow credit cards, enable the PayPal Account Optional option in your account settings. The path to this option for US accounts is:\nProfile > My selling tools > Website preferences > PayPal Account Optional\n\n\nTo test payments, create test buyer and merchant accounts in the PayPal sandbox. To create a test buyer account, select the Personal account type. To create a test merchant account, select the Business account type. See create sandbox accounts.\n\n\n\nCreate credit card payment\nThis sample request makes a direct credit card payment with only the required fields.\n\nImportant: Include an access token in the  header. For more information about credentials and authorization, see make your first call.\n\n\n\nNote: For sandbox calls, you can use the credit card numbers provided in your sandbox accounts.\n\nA successful call returns payment details.\nThese details include the PayPal-generated ID for the payment, the date and time when the payment was created, the payment state, which for credit card payments is , payer information, and transaction information.\nThe transaction information includes related resources, which is an array of the financial transactions that are related to the payment.\nThe related resources include sales, authorizations, captures, and refunds. To get information about a resource, use the ID returned for that resource. For example, to show details for a related authorization, use the ID returned in the  object. You can also use the HATEOAS links for a related resource to complete operations for that resource. For example, a  object provides a  link that enables you to refund the sale.\n\nNext\nA sale is a completed payment. You can use the payment ID to show sale details and refund a sale.\nThen, learn how to authorize payments that you can capture later.\nAdditional information\n\nThe REST APIs and HATEOAS\nPayments API Reference\nProcess credit card payments in the SDK Quickstart Guide\nHow PayPal uses OAuth 2.0\nREST API errors\nPayPal REST API Country and Currency Support\n\n\n\n\n  \n\n                        \n                    \n                \n            \n\n            \n                \n                    \n                        \n                            \n                                Docs\n                                \n                                    Express Checkout\n                                    Payment Buttons\n                                    Braintree SDK\n                                    All Docs\n                                \n                            \n                            \n                                Support\n                                \n                                    FAQ\n                                    Merchant Support\n                                    Account Support\n                                    Community\n                                \n                            \n                            \n                                Resources\n                                \n                                    GitHub\n                                    Partners\n                                    Demo Portal\n                                    Blog\n                                \n                            \n                            \n                                Family\n                                \n                                    Braintree\n                                    Venmo\n                                    Paydiant\n                                    Xoom\n                                \n                            \n                        \n                        \n                            \n                                \n                                    Privacy\n                                    Legal\n                                    Contact\n                                \n                            \n                            \n                                Copyright 1999-2017 PayPal. All rights reserved.", "time": "2017-05-24T23:39:07.050490"}
{"url": "https://developer.visa.com/reference", "site": "visa.com", "descr": "Menu\n  \n    \n      \n  Square\n  Accept Credit Cards From An iPhone, Android or iPad - Square\n  \n  \n  \n  \n\n\n  \n  \n    Apps\n  \n\n\n\n  \n    \n  \n  Manage Apps\n\n\n\n      \n        \n          \n  \n    \n    \n  \n\n\n\n  \n    \n      \n  Square\n  Accept Credit Cards From An iPhone, Android or iPad - Square\n  \n  \n  \n  \n\n\n    \n    Developer\n\n\n  \n    The Basics\n    \n      Getting started\n      The structure of a Square business\n      Code samples\n      Client libraries\n      Troubleshooting errors\n      Catalog Overview\n      FAQ\n  \n  \n    Online Payments\n    \n      Square Checkout Overview\n      Checkout: Get Started\n      Payment API: Get Started\n      Embedding the Square Payment Form\n      Processing a payment (REST)\n      Processing a payment (PHP)\n      Processing a payment (Ruby)\n      Processing a payment (Other languages)\n      Testing using the API sandbox\n      Processing recurring payments\n      Delayed capture transactions\n  \n  \n    In-Person Payments\n    \n      Register API Overview\n      Using the Register API (iOS)\n      Using the Register API (Android)\n      Using the Web API (Android)\n  \n  \n    Full API Reference\n    \n      \n        Connect v2 (REST)\n      \n      \n        Connect v2 (.NET)\n      \n      \n        Connect v2 (Python)\n      \n      \n        Connect v1 (REST)\n      \n      \n        Register SDK (iOS)\n      \n      \n        Register SDK (Android)\n      \n      \n        OAuth\n      \n    \n  \n  \n    Release Notes\n    \n      Catalog API (2017-05)\n      Web API for Android released (2016-11)\n      Register API for iOS v1.2 released (2016-11)\n      Register API for iOS v1.1 released (2016-10)\n      Register API for Android sample application released (2016-10)\n      Register API for Android v1.1 released (2016-09)\n      Register API for Android released (2016-05)\n      Connect API v2 released (2016-03)\n      API changes (2016-02-16)\n  \n  \n    Other Reference\n    \n      \n        Terms of service\n      \n    \n  \n\n\n        \n        \n          \n  \n    Square Checkout Overview\n    \n      Square Checkout lets merchants accept online payments for\n      supported payment types\n      using a checkout workflow hosted on \n      that simplifies the process of accepting online payments by providing:\n      \n        \n          Chargeback protection\n          for qualifying transactions.\n        \n        \n          \n            Next business day deposits.\n          \n        PCI compliance.\n        SSL support.\n      \n    \n    \n      \n        While SSL is not required to use Checkout, Square strongly\n        recommends that merchant sites be SSL certified to reduce the risk of man-in-the-middle attacks.\n      \n    \n  \n\n\n  \n    Summary\n    \n      \n        Languages supported:\n        PHP,\n        C#,\n        Ruby,\n        Python, HTTP\n      \n      \n        Platform: Web\n      \n      \n        Implementation: SDK, SaaS\n      \n    \n    \n      Additional Resources:\n    \n    \n      \n        Square Checkout: Getting Started\n      \n      \n        Technical Reference\n      \n      \n        Stack Overflow Tag\n      \n    \n  \n\n  \n    The Checkout UI\n    \n      Square Checkout has two main screens: payment processing and payment\n      confirmation.\n    \n    \n      The payment processing screen is where customers enter their credit card details\n      and (optionally) confirm their shipping information:\n    \n    \n    \n      The payment confirmation page is only displayed if you opt not to redirect the\n      customer to your own confirmation page:\n    \n    \n  \n\n  \n    Technical Overview\n    Requirements\n    \n      To use Square Checkout on your website, you must be using a hosting solution\n      that allows you to create dynamic pages that support server side scripting\n      (e.g., PHP, Ruby, ASP, Java). If your hosting solution only supports HTML, you\n      cannot use Square Checkout at this time.\n    \n    Square Checkout in a nutshell\n    \n      Square Checkout is a RESTful web service and payment UI, hosted on Square\u2019s\n      servers, for collecting and processing payment information. To take payments\n      with Checkout, merchant sites need to add code that sends order information to\n      Square and (optionally) verifies the result.\n    \n    \n      In general, completing an order with Square Checkout involves the following\n      steps:\n    \n    \n      \n        Merchant - Create a POST request:\n        \n          \n            Package the order information as a JSON message. NOTE: Currently, Square\n            Checkout cannot calculate shipping costs or taxes dynamically, those totals must\n            be provided in the POST request as line items in the order.\n          \n          \n            Add an authorization token to the header.\n          \n        \n      \n      \n        Merchant - Send the generated POST request to Square Checkout and process the\n        response:\n        \n          Save the returned checkout ID.\n          \n            Automatically redirect the customer to the returned Checkout page URL.\n          \n        \n      \n      \n        Customer - Provide payment details using the Square Checkout UI.\n      \n      \n        Square Checkout - Process the transaction and sends email confirmation to\n        merchant and customer.\n      \n      Merchant - Verify the transaction results.\n    \n    Which would look something like this:\n    \n    \n      Once payment processing completes, transaction and buyer details can be accessed\n      via the Square Dashboard.\n    \n    Create the POST request\n    \n      Square Checkout is a RESTful endpoint. We recommend that merchants use the\n      Square Connect SDK to send/receive information to Square endpoints, but any site\n      capable of sending information as a JSON message in the following format can use\n      Checkout to process payments:\n    \n\n    \n    The key elements of the message are:\n    \n      \n        \n        - Square Checkout will send the customer to this URL after a successful\n        transaction or in the event of an unrecoverable error. If you do not provide a\n        redirect url, Square Checkout will display an order confirmation page on your\n        behalf.\n      \n      \n        \n        - The\n        idempotency key\n        is used to avoid processing the same order more than once. It can be any valid\n        string but must be unique for every order sent to Square Checkout for a given\n        location.\n      \n      \n        \n        - This is the identifier for the order (e.g., an order number) generated by your\n        shopping cart solution. Square Checkout will save this identifier with the\n        transaction information so you can link order information from your shopping\n        cart solution with the payment processing information from Square Checkout.\n      \n      \n        \n        - Each item in the order (including taxes and shipping costs) must be listed as\n        a line item in the order with an appropriate price and quantity.\n      \n    \n    \n      To process payments with Square Checkout you also need a valid location ID and\n      authorization token. Valid authorization tokens include:\n    \n    \n      \n        Personal access tokens from an application in your\n        Application Dashboard.\n      \n      \n        OAuth tokens from merchants using your\n        solution.\n      \n    \n    \n      The location ID is used to construct the full Checkout endpoint URL and to\n      associate payment with a particular store belonging to the merchant account. The\n      authorization token lets Square Checkout know that the transaction is authorized\n      for the merchant account associated with that location ID.\n    \n    Send the POST request to Square Checkout\n    The full Checkout URL for a given location ID is:\n\n    \n    When Checkout receives a merchant request at that URL it:\n    \n      Authenticates the authorization token.\n      Authenticates the location ID.\n      Verifies the location ID belongs to the merchant account indicated by the\n        authorization token and the location is able to create payments and orders.\n      Initializes a new transaction with the order information.\n      \n        Returns a new checkout ID and a checkout URL of the form\n          \n    \n    \n      When the merchant site receives the response it saves the checkout ID with the\n      local order information then redirects the customer to the Square-hosted\n      Checkout URL.\n    \n    Provide payment details using the Square Checkout UI\n    \n      When the customer is redirected to Square Checkout, they are presented with a\n      screen where they can review the order details as an itemized list and enter\n      their payment information. If the original POST request included shipping\n      information, those fields are pre-populated for the customer.\n    \n    Data entry validation in the Checkout UI includes:\n    \n      Proper formatting for email address.\n      Proper formatting for credit card number.\n      Credit card expiration date not in the past.\n      All required fields populated.\n    \n    Process the transaction\n    \n      Once the payment card information is submitted, Square Checkout will try to\n      authorize and capture payment. In the event of a recoverable error (e.g., the\n      card is declined), the customer is prompted to correct their information.\n    \n    \n      Once payment is processed, Checkout sends two verification emails: one to the\n      customer at the provided address and one to the merchant at the email address\n      associated with their Square account. The transaction and buyer details can also\n      be accessed through the\n      Square Dashboard.\n    \n    \n      If the original POST request included a redirect URL, the customer is\n      automatically sent to that URL, otherwise, they are presented with a Square\n      Checkout confirmation page.\n    \n    Verify transaction results\n    \n      Square strongly recommends setting a redirect URL and verifying transaction\n      results to guard against order spoofing. Checkout will append the transaction\n      ID, checkout ID, and store-generated order ID to the redirect URL to facilitate\n      verification. In order to verify the transaction results, merchants should query\n      Square\u2019s Transaction endpoint for the transaction details and confirm the\n      store-generated order ID, checkout ID, and transaction totals match the expected\n      values. For more information on how to verify transaction results, please see\n      the Square Checkout Setup guide (coming soon).\n    \n    Additional Resources\n    \n      \n        Square Checkout: Getting Started\n      \n      \n        OAuth Overview\n      \n      \n        Square Checkout on Stack Overflow\n      \n    \n  \n\n\n          \n  Was this page helpful?\n\n  \n    \n  \n  \n  \n  \n\n\n  \n\n  \n    \n  \n  \n  \n  \n\n\n  \n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n  Still haven't found what you are looking for?\n  \n    Ask for help on\n    \n      Stack Overflow\n    \n    or on our\n    \n      community board.", "time": "2017-05-24T23:39:07.798226"}
{"url": "https://developer.visa.com/reference", "site": "visa.com", "descr": "Toggle navigation\n        \n        \n        \n      \n      BitPay\n    \n\n    \n      \n        \n        \n        Integrations\n        Developers\n        Pricing\n      \n      \n        \n        Support\n        \n          Sign Up\n          Login\n        \n      \n    \n\n  \n\n\n  \n    \n      \n        \n          BitPay API\n          Cryptographically Secure RESTful Interface\n        \n        \n          \n            Get API Tokens\u00a0\u00a0\u203a\n          \n        \n      \n    \n  \n\n\n  \n    \n      \n        \n          \n            \n              Overview\n              \n                Concepts\n                Getting Access\n                Making Requests\n                Signing Your Request\n                CORS\n                API Sessions\n              \n            \n\n            \n              References\n              \n                \n                  \n                    Industries\n                  \n                \n                  \n                    Ledger Entry Codes\n                  \n                \n              \n            \n\n            \n              Resources\n              \n                \n                  \n                    Bills\n                  \n                \n                  \n                    Clients\n                  \n                \n                  \n                    Currencies\n                  \n                \n                  \n                    Invoices\n                  \n                \n                  \n                    Ledgers\n                  \n                \n                  \n                    Organizations\n                  \n                \n                  \n                    Payouts\n                  \n                \n                  \n                    Rates\n                  \n                \n                  \n                    Sessions\n                  \n                \n                  \n                    Settlements\n                  \n                \n                  \n                    Subscriptions\n                  \n                \n                  \n                    Tokens\n                  \n                \n              \n            \n          \n        \n      \n\n      \n        Overview\n        BitPay provides a standards-based REST interface which enables application developers to interact in a powerful, yet secure way with their BitPay account.  Using the BitPay API, clients can create and manage invoices, issue refunds, manage bills, retrieve real-time rates information, view merchant ledger entries, and much more. Developers may call the API directly over HTTPS using the language of their choice, or take advantage of one of BitPay's Node.js, PHP, and Ruby API clients.\n\n        Concepts\n\n        API Contract\n        BitPay considers the following types of API changes to be non-breaking and backwards-compatible:\n        \n          exposing a new resource type\n          adding a new method to an existing resource type\n          adding an optional property to an existing resource type\n          adding an optional query parameter to an existing resource method\n          deprecating an existing resource method and providing an alternative\n        \n\n        Identities\n        Authentication in BitPay's API utilizes a specialized identification scheme, BitAuth Identity Protocol.  Every Identity is represented in public form as a Client ID, which much like the Bitcoin protocol, is simply a hash of the identity's public key.  For your convenience, all of BitPay's Client Libraries support this functionality.\n\n        Tokens\n        Authorization in BitPay's API utilizes Capability-based Security principles.  Each API call must be accompanied by an API Token which grants access to the requested capability.  API Tokens are analagous to a real-world event ticket, which grants access to a specific event when presented at the door.  Also like tickets, they may grant broad or narrow privileges (e.g. 'General Admission' vs. 'Seat 44B') as well as add bearer requirements (e.g. 'Must be over 21' or 'Non-transferrable, must show ID').\n        New tokens are provided with each response from the API.  For example, creating a new Invoice with one token will provide a new, second token that grants access to view and interact with that Invoice exclusively.  If not using BitPay's Client Libraries, you will need to keep track of these tokens on your own.\n\n        Facades\n        Facades named collections of capabilities that can be granted, such as the ability to create invoices or grant refunds.  In the ticket analogy, this corresponds to the ticket 'level', where a 'VIP' ticket would confer broader access than a 'Standard' level ticket.  When registering an Identity, it is against a specific facade.  Best practices suggest that the requested facade should be limited to the minimum level that grants the required capabilities.\n\n        \n\n      Getting Access\n\n      To use any non-public facade a token will need to be sent with the API request. Tokens can require authentication, which would requiring cryptographically signing each request. You can either generate a token directly from an API client or via the My Account -> API Tokens page. To receive a token directly from an API client, send a  request to  with the following query parameters:\n      \n        label (e.g. )\n        id (e.g. )\n        facade (e.g. )\n      \n\n      This will respond with a new token that will include a . This pairing code can then be shared with a merchant organization administrator to approve access. This can be done by visiting My Account -> API Tokens and entering the pairing code, or by visiting the url format: .\n\n      Alternatively, pairing codes can be generated directly at My Account -> API Tokens, and can then be claimed by API clients which associates a Client ID with the token, and will activate it for further usage. To claim a token from an API client, send a  request to  with the following parameters:\n      \n        label (e.g. )\n        id (e.g. )\n        pairingCode (e.g. )\n      \n\n      A token without a Client ID authentication restriction can be made, and a token can then be copied directly to make API calls, such as creating invoices. It is also important to note that pairing codes will expire after 24 hours, however once a token is approved or claimed the expiration is cleared.\n\n      Making Requests\n\n      Requests to the BitPay REST API follow a RESTful convention using standard HTTP verbs against various BitPay resources to return JSON formatted responses.  Once again the mechanics of this exchange may be simplified through the use of one of the BitPay libraries.\n\n      Each request should include in the HTTP headers:\n      \n        (the hexadecimal public key generated from the client private key)\n        (header which is cryptographically computed as described below)\n        \n        \n      \n\n      To make an API request send an HTTP request with a HTTP method to a resource URI and include in the body JSON parameters of the following (plus any additional parameters needed):\n      \n        (obtained during client registration process above)\n        (an optional parameter to enforce idempotence for POST requests)\n      \n\n      For more information about specific resource URIs, please visit the resource documentation.\n\n      Signing Your Request\n\n      \n        The  header is the ECDSA signature of the full request URL concatenated with the request body, signed with your private key. So if you are sending a request to:\n      \n      https://bitpay.com/invoices\n      \n        And your request body is:\n      \n      {\"amount\":500,\"currency\":\"USD\",\"token\":\"1234567\"}\n      \n        The string you will sign is:\n      \n      https://bitpay.com/invoices{\"amount\":500,\"currency\":\"USD\",\"token\":\"1234567\"}\n      \n        The result should be included as the value of the  request header.\n      \n\n      Cross-Origin Resource Sharing\n\n      \n        The BitPay REST API supports CORS, so that you may send requests directly from the client, however remember to never expose your private key. If your key becomes compromised, you will want to disable your old Client ID and register a new one.\n      \n\n      API Sessions\n      \n        API sessions are an optional feature of our API which can be utilized to provide even greater security and reliability. In particular it protects against replay attacks and ensures api requests are processed in the same order they are received.\n      \n      \n        An API session can be created by issuing a  to . The server responds with a sessionId. The sessionId is used in each subsequent request along with a requestNumber. These fields,  and  are included as parameters either in the URL for a  or in the data body for  and .\n      \n      \n        On the first request, the  should be 1. Each additional request should increment the requestNumber by 1. If the server receives a request out of order it will return an error. If the client does not hear back from the server because of an interruption in network connectivity or some other problem, the client may retry by sending the same request with the same requestNumber. The server will then respond with a cached copy of the data if it had already serviced that request but was interrupted when delivering it to the client.\n      \n      \n        API sessions timeout after 15 minutes of inactivity. After 15 minutes, clients will get an error, and must create a new session. Clients can be programmed to handle creation of new sessions and timeouts automatically. Please see the Node.js client library for a working implementation.\n      \n\n      References\n      \n        \n         Industries\n         \n           \n              \n                Industry codes used in `orgs` resource\n                \n                  \n                \n              \n           \n         \n        \n         Ledger Entry Codes\n         \n           \n              \n                Codes marked as deprecated may have been used in the past, but are no longer used for newly  written ledger entries.\n                \n                  \n                \n              \n           \n         \n        \n      \n\n      Available Resources\n      \n        \n          Bills\n          \n\n           \n              \n                \n                  Resource  \n                \n                Bills are payment requests addressed to specific buyers. Bill line items have fixed prices, typically denominated in fiat currency. \n                \n                  Schema\n                  \n                \n              \n            \n\n            \n              \n                \n                  POST /bills\n                \n                Creates a bill for the calling merchant.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  GET /bills\n                \n                Retrieves all of the caller's bills.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  GET /bills/:billId\n                \n                Retrieves the specified bill.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  PUT /bills/:billId\n                \n                Updates the specified bill.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  POST /bills/:billId/deliveries\n                \n                Delivers the bill to the recipient's email.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n          \n        \n          Clients\n          \n\n           \n              \n                \n                  Resource  \n                \n                Clients are devices or developer applications used to access the BitPay API. A client is identified by its access key id. A client is associated with a token via a pairing process.\n                \n                  Schema\n                  \n                \n              \n            \n\n            \n              \n                \n                  POST /clients\n                \n                Associates a client identity with a user.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  GET /clients\n                \n                Retrieves the registered client access keys for the caller.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  PUT /clients/:keyId\n                \n                Modifies the given client access key (approving or disabling).\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n          \n        \n          Currencies\n          \n\n           \n              \n                \n                  Resource  \n                \n                Currencies are fiat currencies supported by BitPay\n                \n                  Schema\n                  \n                \n              \n            \n\n            \n              \n                \n                  GET /currencies\n                \n                Retrieves the list of supported currencies.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n          \n        \n          Invoices\n          \n\n           \n              \n                \n                  Resource  \n                \n                Invoices are time-sensitive payment requests addressed to specific buyers. An invoice has a fixed price, typically denominated in fiat currency. It also has a BTC equivalent price, calculated by BitPay, with an expiration time of about 15 minutes. \n                \n                  Schema\n                  \n                \n              \n            \n\n            \n              \n                \n                  POST /invoices\n                \n                Creates an invoice for the calling merchant.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  GET /invoices/:invoiceId\n                \n                Retrieves the specified invoice for the calling merchant.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  GET /invoices/:invoiceId/events\n                \n                Retrieves a bus token which can be used to subscribe to invoice events.\n                \n                  \n                    \n                  \n                \n\n                \n\n                \n                  \n                    Response\n                    \n                  \n                                \n              \n            \n              \n                \n                  GET /invoices\n                \n                Retrieves invoices for the calling merchant filtered by query. The `limit` and `offset` parameters specify pages for large query sets.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  POST /invoices/:invoiceId/refunds\n                \n                Creates a refund request for the given invoice.\n                \n\n                \n                  \n                    Parameters\n                    \n                  \n                \n\n                \n                  \n                    Response\n                    \n                  \n                                \n              \n            \n              \n                \n                  GET /invoices/:invoiceId/refunds/:requestId\n                \n                Returns the status of a refund.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  DELETE /invoices/:invoiceId/refunds/:requestId\n                \n                Cancels a pending refund request.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  GET /invoices/:invoiceId/refunds\n                \n                Returns the status of all refunds on an invoice.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  POST /invoices/:invoiceId/adjustments\n                \n                Accepts the overpayment or underpayment for the invoice. Uses type `acceptUnderpayment` to accept an underpayment. Uses type `acceptOverpayment` to accept an overpayment.  Uses `commit` true to commit the adjustment to the invoice or false to preview it.\n                \n\n                \n                  \n                    Parameters\n                    \n                  \n                \n\n                                \n              \n            \n              \n                \n                  POST /invoices/:invoiceId/notifications\n                \n                Resends the IPN for the specified invoice.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n          \n        \n          Ledgers\n          \n\n           \n              \n                \n                  Resource  \n                \n                Ledgers are records of money movement.\n                \n                  Schema\n                  \n                \n              \n            \n\n            \n              \n                \n                  GET /ledgers/:currency\n                \n                Retrieves the caller's ledger entries for the given currency.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  GET /ledgers\n                \n                Retrieves the caller's ledgers for each currency with summary.\n                \n                  \n                    \n                  \n                \n\n                \n\n                \n                  \n                    Response\n                    \n                  \n                                \n              \n            \n          \n        \n          Organizations\n          \n\n           \n              \n                \n                  Resource  \n                \n                Organizations are entities such as businesses, schools, NGOs, and clubs. They may be affiliated with another organization.\n                \n                  Schema\n                  \n                \n              \n            \n\n            \n              \n                \n                  POST /orgs\n                \n                Creates an org affiliated with the calling partner.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  GET /orgs\n                \n                Retrieves all of the caller's orgs.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  GET /orgs/:orgId\n                \n                Retrieves the specified org.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n          \n        \n          Payouts\n          \n\n           \n              \n                \n                  Resource  \n                \n                Payouts are batches of bitcoin payments to employees, customers, partners, etc.\n                \n                  Schema\n                  \n                \n              \n            \n\n            \n              \n                \n                  POST /payouts\n                \n                Creates a payout batch request.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  GET /payouts\n                \n                Retrieves all of the caller's payout requests by status.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  DELETE /payouts/:payoutId\n                \n                Cancels the given payout request if status is still new.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  GET /payouts/:payoutId\n                \n                Retrieves the specified payout request.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n          \n        \n          Rates\n          \n\n           \n              \n                \n                  Resource  \n                \n                Rates are exchange rates, representing the number of fiat currency units equivalent to one BTC.\n                \n                  Schema\n                  \n                \n              \n            \n\n            \n              \n                \n                  GET /rates\n                \n                Retrieves the list of exchange rates.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  GET /rates/:currency\n                \n                Retrieves the exchange rate for the given currency.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n          \n        \n          Sessions\n          \n\n           \n\n            \n              \n                \n                  POST /sessions\n                \n                Creates an API session to protect against replay attacks and ensure requests are received in the same order they are sent.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n          \n        \n          Settlements\n          \n\n           \n              \n                \n                  Resource  \n                \n                Settlements are transfers of payment profits from BitPay to bank accounts and bitcoin wallets owned by merchants, partners, etc. This endpoint exposes reports detailing these settlements.\n                \n                  Schema\n                  \n                \n              \n            \n\n            \n              \n                \n                  GET /settlements\n                \n                Retrieves settlement reports for the calling merchant filtered by query. The `limit` and `offset` parameters specify pages for large query sets.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  GET /settlements/:settlementId\n                \n                Retrieves a summary of the specified settlement.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  GET /settlements/:settlementId/reconciliationReport\n                \n                Gets a detailed reconciliation report of the activity within the settlement period\n                \n                  \n                    \n                  \n                \n\n                \n\n                \n                  \n                    Response\n                    \n                  \n                                \n              \n            \n          \n        \n          Subscriptions\n          \n\n           \n              \n                \n                  Resource  \n                \n                Subscriptions are repeat billing agreements with specific buyers. BitPay sends bill emails to buyers identified in active subscriptions according to the specified schedule.\n                \n                  Schema\n                  \n                \n              \n            \n\n            \n              \n                \n                  POST /subscriptions\n                \n                Creates a repeat billing subscription.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  GET /subscriptions\n                \n                Retrieves all of the caller's subscriptions.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  GET /subscriptions/:subscriptionId\n                \n                Retrieves the specified subscription.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n              \n                \n                  PUT /subscriptions/:subscriptionId\n                \n                Updates the specified subscription.\n                \n                  \n                    \n                  \n                \n\n                \n\n                                \n              \n            \n          \n        \n          Tokens\n          \n\n           \n              \n                \n                  Resource  \n                \n                Tokens are API access identifiers which are associated with a set of capabilities. A capability may be very broad, for example, retrieve the list of all exchange rates. Or a capability may be very specific, for example, update bill #12345. \n                \n                  Schema\n                  \n                \n              \n            \n\n            \n              \n                \n                  POST /tokens\n                \n                Creates or claims an access token.\n                \n                  \n                    \n                  \n                \n\n                \n\n                \n                  \n                    Response\n                    \n                  \n                                \n              \n            \n          \n        \n      \n\n    \n  \n\n  \n      \n        \n          \n            Get access to the most powerful bitcoin infrastructure on the planet.\n            Accept Bitcoin\u00a0\u00a0\u203a\n          \n        \n      \n  \n\n  \n  \n    Team\n    Media\n    Support\n    \n    Legal\n    Developers\n    Features\n    Pricing\n    Blog\n    Sign Up", "time": "2017-05-24T23:39:08.824156"}
{"url": "https://developer.visa.com/reference", "site": "visa.com", "descr": "BlueSnap Developer Hub{\"id\":\"57336fd5a6a9c40e00e13a0b\",\"name\":\"BlueSnap Developer Hub\",\"subdomain\":\"bluesnap-developers\",\"versions\":[{\"_id\":\"57336fd5a6a9c40e00e13a0e\",\"releaseDate\":\"2016-04-21T12:38:21.772Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Reporting\",\"version_clean\":\"4.0.1\",\"version\":\"4.0.1\"},{\"_id\":\"57336fd5a6a9c40e00e13a12\",\"releaseDate\":\"2016-04-13T15:39:35.430Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Payment API\",\"version_clean\":\"2.0.1\",\"version\":\"2.0.1\"},{\"_id\":\"57345e531f1b32170018de9d\",\"releaseDate\":\"2016-05-12T10:43:31.248Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Quickstart\",\"version_clean\":\"1.0.1\",\"version\":\"1.0.1\"},{\"_id\":\"57345e82a24c162000670314\",\"releaseDate\":\"2016-05-12T10:44:18.526Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Extended Payment API\",\"version_clean\":\"3.0.1\",\"version\":\"3.0.1\"},{\"_id\":\"57345f1bf0dc3a0e007748b8\",\"releaseDate\":\"2016-05-12T10:46:51.470Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Backup of v1 Dev Hub\",\"version_clean\":\"0.0.0\",\"version\":\"0\"},{\"_id\":\"57b1cf234c0c6f0e000078be\",\"releaseDate\":\"2016-08-15T14:18:11.085Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Reporting - 3.17.1 Aug 2016\",\"version_clean\":\"4.0.3\",\"version\":\"4.0.3\"},{\"_id\":\"57b1dae94c0c6f0e000078f7\",\"releaseDate\":\"2016-08-15T15:08:25.009Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Quickstart - 3.17.1 Aug 2016\",\"version_clean\":\"1.0.3\",\"version\":\"1.0.3\"},{\"_id\":\"57b32c65c9a4551700b968df\",\"releaseDate\":\"2016-08-16T15:08:21.265Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Extended API - 3.17.1 Aug 2016\",\"version_clean\":\"3.0.3\",\"version\":\"3.0.3\"},{\"_id\":\"57b6e797aabccd0e00f24890\",\"releaseDate\":\"2016-08-19T11:03:51.708Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Payment API - XML - 3.17.1 (Aug 2016)\",\"version_clean\":\"2.0.3\",\"version\":\"2.0.3\"},{\"_id\":\"57d7f58cf6bfa00e00680b34\",\"releaseDate\":\"2016-09-13T12:48:12.723Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Payment API - testing JSON support per page\",\"version_clean\":\"2.0.2\",\"version\":\"2.0.2\"},{\"_id\":\"57d96350ed63190e0022d2c8\",\"releaseDate\":\"2016-09-14T14:48:48.141Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Payment API - JSON - 3.18 Oct 2016\",\"version_clean\":\"2.1.2\",\"version\":\"2.1.2\"},{\"_id\":\"57e03831031bca0e00460d70\",\"releaseDate\":\"2016-09-19T19:10:41.642Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Reporting and Tools - 3.18 Oct 2016\",\"version_clean\":\"4.0.4\",\"version\":\"4.0.4\"},{\"_id\":\"57e28f07daba90170011753c\",\"releaseDate\":\"2016-09-21T13:45:43.345Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Payment API - XML - 3.18 Oct 2016\",\"version_clean\":\"2.0.4\",\"version\":\"2.0.4\"},{\"_id\":\"57e28fb71e7b7220000d7f3d\",\"releaseDate\":\"2016-09-21T13:48:39.181Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Basics - 3.18 Oct 2016\",\"version_clean\":\"1.0.4\",\"version\":\"1.0.4\"},{\"_id\":\"57e2900630b3901700643823\",\"releaseDate\":\"2016-09-21T13:49:58.628Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Extended API - 3.18 Oct 2016\",\"version_clean\":\"3.0.4\",\"version\":\"3.0.4\"},{\"_id\":\"5819f4cc06e08a370027f298\",\"releaseDate\":\"2016-11-02T14:14:36.124Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.18.1 Release\",\"version_clean\":\"4.0.5\",\"version\":\"4.0.5\"},{\"_id\":\"58345c3bad81fc25005a7abb\",\"releaseDate\":\"2016-11-22T14:54:51.290Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19 Release\",\"version_clean\":\"4.0.6\",\"version\":\"4.0.6\"},{\"_id\":\"58345c5e92b42a230018f2f1\",\"releaseDate\":\"2016-11-22T14:55:26.877Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19 Release\",\"version_clean\":\"2.0.5\",\"version\":\"2.0.5\"},{\"_id\":\"58345c7cf1f6b41b007f2254\",\"releaseDate\":\"2016-11-22T14:55:56.351Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19 Release\",\"version_clean\":\"2.1.3\",\"version\":\"2.1.3\"},{\"_id\":\"5834a8acb970792700f09d38\",\"releaseDate\":\"2016-11-22T20:21:00.222Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19 Release\",\"version_clean\":\"3.0.5\",\"version\":\"3.0.5\"},{\"_id\":\"5835d3f5b67de41b00d7b4cb\",\"releaseDate\":\"2016-11-23T17:37:57.348Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19 Release\",\"version_clean\":\"1.0.5\",\"version\":\"1.0.5\"},{\"_id\":\"587d05d253a1d13100269630\",\"releaseDate\":\"2017-01-16T17:41:38.767Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19.2 Release\",\"version_clean\":\"2.0.6\",\"version\":\"2.0.6\"},{\"_id\":\"587d05f458434025008973cf\",\"releaseDate\":\"2017-01-16T17:42:12.934Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19.2 Release\",\"version_clean\":\"2.1.4\",\"version\":\"2.1.4\"},{\"_id\":\"587e5ce618c2e22f00fe7fde\",\"releaseDate\":\"2017-01-17T18:05:26.145Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19.2 Release\",\"version_clean\":\"3.0.6\",\"version\":\"3.0.6\"},{\"_id\":\"587e5edf18c2e22f00fe80a1\",\"releaseDate\":\"2017-01-17T18:13:51.330Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19.2 Release\",\"version_clean\":\"1.0.6\",\"version\":\"1.0.6\"},{\"_id\":\"5888bf55e7c13a2d0075208c\",\"releaseDate\":\"2017-01-25T15:08:05.359Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19.3 nano\",\"version_clean\":\"4.0.7\",\"version\":\"4.0.7\"},{\"_id\":\"58ade8044b3e0b0f00e1bd4f\",\"releaseDate\":\"2017-02-22T19:35:32.491Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"v 3.20 Release\",\"version_clean\":\"8976.0.0-JSON\",\"version\":\"8976-JSON\"},{\"_id\":\"58ade83e75df0f1b001ed70a\",\"releaseDate\":\"2017-02-22T19:36:30.067Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.20 Release\",\"version_clean\":\"8976.0.0-XML\",\"version\":\"8976-XML\"},{\"_id\":\"58b0795eca312823003c681c\",\"releaseDate\":\"2017-02-24T18:20:14.087Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":true,\"codename\":\"3.20 Release\",\"version_clean\":\"8976.0.0-Basics\",\"version\":\"8976-Basics\"},{\"_id\":\"58b57d9d4714a81900118c62\",\"releaseDate\":\"2017-02-28T13:39:41.432Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.20 Release\",\"version_clean\":\"8976.0.0-Tools\",\"version\":\"8976-Tools\"},{\"_id\":\"58b58050c0da3223002f13ad\",\"releaseDate\":\"2017-02-28T13:51:12.260Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.20 Release\",\"version_clean\":\"8976.0.0-Extended\",\"version\":\"8976-Extended\"},{\"_id\":\"590b31db030acd0f00f0607c\",\"releaseDate\":\"2017-05-04T13:51:23.450Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.21.0 Release\",\"version_clean\":\"8976.0.0-Basics-Draft\",\"version\":\"8976-Basics-Draft\"},{\"_id\":\"590b3203c0161e19009537bd\",\"releaseDate\":\"2017-05-04T13:52:03.955Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.21.0 Release\",\"version_clean\":\"8976.0.0-Tools-Draft\",\"version\":\"8976-Tools-Draft\"},{\"_id\":\"590b3232b5f9ab23009dc4bf\",\"releaseDate\":\"2017-05-04T13:52:50.478Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.21.0 Release\",\"version_clean\":\"8976.0.0-JSON-Draft\",\"version\":\"8976-JSON-Draft\"},{\"_id\":\"590b325726f50e0f00dd6c0d\",\"releaseDate\":\"2017-05-04T13:53:27.274Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.21.0 Release\",\"version_clean\":\"8976.0.0-XML-Draft\",\"version\":\"8976-XML-Draft\"},{\"_id\":\"590b3280030acd0f00f060b7\",\"releaseDate\":\"2017-05-04T13:54:08.391Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.21.0 Release\",\"version_clean\":\"8976.0.0-Extended-Draft\",\"version\":\"8976-Extended-Draft\"}],\"doc_slug\":\"\",\"current_version\":{\"version_clean\":\"8976.0.0-Extended\",\"version\":\"8976-Extended\"},\"oauth\":{\"enabled\":false},\"api\":{\"name\":\"\",\"url\":\"https://sandbox.bluesnap.com/services/2\",\"contenttype\":\"body\",\"auth\":\"basic\",\"explorer\":true,\"proxyEnabled\":true,\"jwt\":false,\"authextra\":[{\"_id\":\"561b9fceab412a0d004d8631\",\"type\":\"header\",\"default\":\"Basic QVBJXzE0NDQ2NTAyMDMxNDQ5NDA0MjIzNjU6QkxVRTEyMw==\",\"key\":\"Authorization\"}],\"headers\":[{\"_id\":\"561c03a2eaf4852b00a46771\",\"value\":\"Application/XML\",\"key\":\"content-type\"},{\"_id\":\"56f12a866d8030220001ef98\",\"value\":\"2.0\",\"key\":\"bluesnap-version\"}],\"object_definitions\":[]},\"apiAlt\":[{\"_id\":\"57ee593a21ceb20e0061959e\",\"object_definitions\":[],\"headers\":[{\"_id\":\"57ee59b33b369f0e00469e40\",\"value\":\"application/json\",\"key\":\"content-type\"},{\"_id\":\"57ee59b33b369f0e00469e3f\",\"value\":\"application/json\",\"key\":\"accept\"},{\"_id\":\"57ee672b21ceb20e006195a4\",\"value\":\"2.0\",\"key\":\"bluesnap-version\"}],\"authextra\":[{\"_id\":\"57ee59b33b369f0e00469e3e\",\"type\":\"header\",\"default\":\"Basic QVBJXzE0NDQ2NTAyMDMxNDQ5NDA0MjIzNjU6QkxVRTEyMw==\",\"key\":\"Authorization\"}],\"jwt\":false,\"proxyEnabled\":true,\"explorer\":true,\"auth\":\"basic\",\"contenttype\":\"body\",\"url\":\"https://sandbox.bluesnap.com/services/2\",\"name\":\"JSON\"}],\"plan_details\":{\"name\":\"Business\",\"is_active\":true,\"cost\":199,\"versions\":10000,\"custom_domain\":true,\"custom_pages\":true,\"whitelabel\":true,\"errors\":true,\"password\":true,\"landing_page\":true,\"themebuilder\":true,\"stylesheet\":true,\"javascript\":true,\"html\":true,\"extra_html\":true,\"admins\":true,\"apps\":true},\"apps\":{\"enabled\":false},\"intercom\":\"\",\"intercom_secure_emailonly\":false,\"flags\":{\"allow_hub2\":false,\"hub2\":false,\"migrationRun\":true,\"oauth\":false,\"swagger\":false,\"correctnewlines\":false,\"speedyRender\":true,\"allowXFrame\":false,\"jwt\":false,\"hideGoogleAnalytics\":false,\"stripe\":false,\"autoSslGeneration\":false},\"asset_base_url\":\"\"}API BasicsPayment API JSONPayment API XMLExtended Payment APIReporting & ToolsSign Up{\"__v\":0,\"_id\":\"58b58051c0da3223002f13d1\",\"api\":{\"results\":{\"codes\":[]},\"settings\":\"\",\"auth\":\"required\",\"params\":[],\"url\":\"\"},\"body\":\"The BlueSnap Extended Payment API provides product catalog hosting and ecommerce tools along with global payment processing. It supports credit and debit card payments, digital wallets & Paypal.  \\n\\n##About the API\\nThis API is a collection of RESTful based web services. It uses standard HTTP features, such as HTTP verbs and Basic authentication, and can be used easily with any HTTP client.\\n\\nThese are the base API URLs for the BlueSnap environments:\\nSandbox: `https://sandbox.bluesnap.com`\\nProduction: `https://ws.bluesnap.com`\\n\\nFor information about credentials, authentication and more, see [About the BlueSnap APIs](http://bluesnap-developers.readme.io/docs/about).\\n\\n##API web services\\nThese are the core web services in the API:\\n\\nProcessing payments:\\n  * [Create Order and New Shopper](doc:create-shopper-and-order) \\n  * [Create Order with Existing Shopper](doc:create-order) \\n  * [Create Shopping Context](doc:create-shopping-context) (use for alternative payment methods like PayPal, or to separate the Auth and Capture phases)\\n\\nManaging shoppers:\\n  * [Create Shopper](doc:create-shopper) \\n  * [Update Shopper](doc:update-shopper) \\n\\nManaging your product catalog:\\n  * [Create Product](doc:create-product) \\n  * [Create SKU](doc:create-sku) \\n\\nManaging subscriptions:\\n  * [Update Subscription](doc:update-subscription) \\n\\n**See the full list of endpoints and requests in the left menu.**\\n\\n##Quickstart\\nNeed help getting started?\\nSee the tutorials on [setting up a basic checkout page](/v1.0/docs/build-a-form) and [accepting your first credit card payment](/v1.0/docs/make-a-payment-extended-api).\",\"category\":\"58b58050c0da3223002f13ae\",\"createdAt\":\"2016-05-12T14:30:55.037Z\",\"excerpt\":\"Host your product catalog on BlueSnap & process payments with our gateway\",\"githubsync\":\"\",\"hidden\":false,\"isReference\":false,\"link_external\":false,\"link_url\":\"\",\"next\":{\"pages\":[],\"description\":\"\"},\"order\":0,\"parentDoc\":null,\"project\":\"57336fd5a6a9c40e00e13a0b\",\"slug\":\"bluesnap-extended-payment-api\",\"sync_unique\":\"\",\"title\":\"BlueSnap Extended Payment API\",\"type\":\"basic\",\"updates\":[],\"user\":\"560d5913af97231900938124\",\"version\":\"58b58050c0da3223002f13ad\",\"childrenPages\":[]}Extended Payment APIBlueSnap Extended Payment APIOrderspostCreate Order and New ShopperpostCreate Order with Existing ShopperputRefund InvoicegetRetrieve Fulfillment InformationgetRetrieve OrdergetRetrieve Order HistorygetCart CalculationShopping ContextpostCreate Shopping ContextputUpdate Shopping ContextgetRetrieve Shopping ContextShopperspostCreate ShopperputUpdate ShoppergetRetrieve ShopperCatalogpostCreate ProductputUpdate ProductgetRetrieve ProductpostCreate SKUputUpdate SKUgetRetrieve SKUgetRetrieve SKU PricepostCreate Custom ParameterputUpdate Custom ParametergetRetrieve Custom ParametergetRetrieve CouponSubscriptionsputUpdate SubscriptiongetRetrieve SubscriptionpostCreate Subscription ChargegetRetrieve Subscription ChargegetRetrieve Subscription HistorygetRetrieve Subscription Switch Charge AmountWalletsCreate WalletRetrieve WalletErrorsError Handling OverviewGeneral ErrorsPayment & Processor ErrorsShopper ErrorsCatalog ErrorsFraud ErrorsHosted Payment Field ErrorsWallet ErrorsResourcesSchemas (.xsd files)balancebatch-orderbilling-contact-infobuynow-urlcartcart-infocart-itemcart-paramscatalog-pricecatalog-pricescatalog-recurring-chargecatalog-skucharge-infocharge-invoice-infocharge-policycharge-pricecouponcoupon-code-infocoupon-codes-infocoupon-discount-policycoupon-exceptionscoupon-infocoupon-percentcoupon-pricecoupon-rulescouponscredit-cardcredit-card-infocredit-cards-infocustom-param-settingscustom-parameterdownload-linksdrop-down-valuesecpecp-infoecps-infoexpected-total-pricefinancial-transactionfinancial-transactionsfixed-selection-typefraud-events / fraud-eventfraud-infofree-trialfulfillmentinitial-periodinvalid-propertyinvoiceinvoice-contact-infoinvoice-contacts-infoinvoicesitem-pricelast-charge-resultlicense-keyslocal-bank-transferlocal-bank-transfer-infolong-text-typemanual-recurring-infomerchant-value-typemessages / messageone-time-chargeorderorder-detailsorder-historyordering-shopperoverride-recurring-chargepast-orderspayment-infopaypalpaypal-infopaypal-subscriptionperiodsplan-charge-amount-limitplimus-calculated-totalpost-sale-infopriceprice-discountprice-discountspricing-settingsproductproduct-skusrecurring-periodrecurring-plan-settingsrefundsshipping-contact-infoshoppershopper-contact-infoshopper-detailsshopper-infoshopping-contextshort-text-typeskusku-buynow-urlssku-charge-pricesku-coupon-settingssku-custom-parametersku-custom-parameterssku-download-linksku-effective-datessku-licensesku-parametersku-quantity-policyskussubscriptionsubscription-chargesubscription-chargessubscription-paymentsubscriptionstotal-pricetotal-price-with-taxtransaction-payment-infotrial-periodudfunit-pricevisual-settingsweb-authenticationweb-inforefundTest Data & CodesTest Card DataCredit Card CodesCountry CodesCurrency CodesState and Province CodesLanguage CodesAVS Response CodesCVV Response CodesGuides & ToolsStatement DescriptorHosted Payment FieldsClient-Side EncryptionFraud PreventionAccount UpdaterIPNs (Webhooks)Retrieving Card InfoSubscriptions GuideMasterPass GuideVisa Checkout GuidePayPal GuideLatAm GuideACH/ECPReporting APIEdit this PageSuggest EditsBlueSnap Extended Payment APIHost your product catalog on BlueSnap & process payments with our gateway\n\n\t\n\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\tThe BlueSnap Extended Payment API provides product catalog hosting and ecommerce tools along with global payment processing. It supports credit and debit card payments, digital wallets & Paypal.  \nAbout the API\nThis API is a collection of RESTful based web services. It uses standard HTTP features, such as HTTP verbs and Basic authentication, and can be used easily with any HTTP client.\nThese are the base API URLs for the BlueSnap environments:Sandbox: Production: \nFor information about credentials, authentication and more, see About the BlueSnap APIs.\nAPI web services\nThese are the core web services in the API:\nProcessing payments:\n\nCreate Order and New Shopper Create Order with Existing Shopper Create Shopping Context (use for alternative payment methods like PayPal, or to separate the Auth and Capture phases)\nManaging shoppers:\n\nCreate Shopper Update Shopper \nManaging your product catalog:\n\nCreate Product Create SKU \nManaging subscriptions:\n\nUpdate Subscription \nSee the full list of endpoints and requests in the left menu.\nQuickstart\nNeed help getting started?See the tutorials on setting up a basic checkout page and accepting your first credit card payment.\n\n\t\t\t\t\n\t\t\t\n\t\t\n\t\n\n  \n  \n    \n\t  \n    \n    \n    \n    \n    Legal  |  Privacy Policy |  BlueSnap Terms & Conditions  |  \u00a9 2016  BlueSnap Inc. All rights reserved.", "time": "2017-05-24T23:39:09.220603"}
{"url": "https://developer.visa.com/reference", "site": "visa.com", "descr": "", "time": "2017-05-24T23:39:10.938331"}
{"url": "https://developer.visa.com/reference", "site": "visa.com", "descr": "Docs\n                        \n                        \n                            API Reference\n                        \n                        \n                            Support\n                        \n                    \n                    \n                \n\n                \n                    \n                        \n                            \n                                Log into Dashboard\n                                \n                            \n                        \n                    \n                \n            \n        \n\n        \n            \n                \n                \n                \n                    \n                        \n    Back to DocsPayments REST APIPayPal PaymentsIntegration StepsPrerequisitesCreate PayPal PaymentGet Payment ApprovalExecute PaymentCredit Card PaymentsPCI ComplianceIntegration StepsPrerequisitesCreate Credit Card PaymentAuthorize and Capture PaymentsOverviewIntegration StepsPrerequisitesAuthorize PaymentCapture Authorized PaymentOrdersOverviewIntegration StepsPrerequisitesCreate OrderGet Customer ApprovalExecute OrderAuthorize OrderCapture OrderRefund PaymentsIntegration StepsPrerequisitesFully Refund a SalePartially Refund a SaleRefund a Captured PaymentPayment Experience Web ProfilesIntegration StepsPrerequisitesCreate Web Experience ProfileCreate PayPal Payment with Web ProfileGet Customer ApprovalOther Payment Experience API TasksBilling Plans and AgreementsBilling PlansBilling AgreementIntegration StepsPrerequisitesCreate PlanActivate PlanCreate AgreementGet Customer ApprovalExecute AgreementTest REST API TransactionsIntegration StepsPrerequisitesTest Credit Card PaymentsTest PayPal Payments\n\n                        \n                            \n\t\n  PayPal payments\n\n  \nUse the Payments API to easily and securely accept online and mobile PayPal payments. You can enable customers to make PayPal payments with only a few clicks, depending on the country. A completed payment is known as a sale.\n\nIntegration steps\nTo accept a PayPal payment:\n\n\nPrerequisites\n\n\nGet an access token. To get an access token, you must create a PayPal app. When you create an app, PayPal generates a set of OAuth  and  keys for your app for both the sandbox and live environments. Then, to get an access token, you pass the  credentials in the  header in a get access token request. The authorization server issues an access token in exchange for your client ID and secret credentials. You use the access token for authentication when you make REST API requests.\nFor more information, see make your first call. If you are a non-US developer, see International Developer Questions. You can use your sandbox access token to try any of the code in the REST API reference.\n Each API response includes HATEOAS links that enable you to construct a payment flow.\n\n\nTo receive payments in a currency that you do not hold, first configure your Payment Receiving Preferences in your PayPal account. Otherwise, your payment status might be pending until you manually approve the payment in your PayPal account.\n\n\nTo receive guest checkout payments, which allow credit cards, enable the PayPal Account Optional option in your account settings. The path to this option for US accounts is:\nProfile > My selling tools > Website preferences > PayPal Account Optional\n\n\nTo test payments, create test buyer and merchant accounts in the PayPal sandbox. To create a test buyer account, select the Personal account type. To create a test merchant account, select the Business account type. See create sandbox accounts.\n\n\n\nCreate PayPal payment\nAfter you collect the payment details from the customer, specify the payment details in a  call.\nIn the request URI, set the .\nIn the JSON request body, set the  to , the redirect URLs, the  to , and the transaction information in the  array, which contains one or more  objects:\n\nA successful call returns confirmation of the transaction, with the  state and a payment ID that you can use in subsequent calls:\n\nNext, get approval from the customer for the payment.\nGet payment approval\nWhen you create a payment for a PayPal payment, the customer must approve the payment before you can execute the sale. To enable the customer to approve the payment, pass the  field to the  function on your client. When the customer approves the payment, PayPal calls your client-side  callback. PayPal passes the  and  to your call back.\nFor details, see Set up your client.\n\nNote: For existing full-page-redirect integrations, redirect the customer to the  from the  response so that he or she can approve the payment.\nFor NVP/SOAP API full-page redirect integrations, PayPal does a full-page redirect to the  that was specified when the payment was created, with  and  appended to the URL.\n\nNext, execute the payment.\nExecute payment\nTo execute the payment after the customer's approval, make a  call. In the JSON request body, use the  value that was passed to your site. In the header, use the access token that you used when you created the payment.\n\nThe execute payment call returns a  object with transaction details:\n\nNext\nA sale is a completed payment. You can use the payment ID to show sale details and refund a sale.\nThen, learn how to make credit card payments.\nAdditional information\n\nThe REST APIs and HATEOAS\nPayments API Reference\nProcess PayPal payments in the SDK Quickstart Guide\nHow PayPal uses OAuth 2.0\nREST API errors\nPayPal REST API Country and Currency Support\n\n\n\n\n  \n\n                        \n                    \n                \n            \n\n            \n                \n                    \n                        \n                            \n                                Docs\n                                \n                                    Express Checkout\n                                    Payment Buttons\n                                    Braintree SDK\n                                    All Docs\n                                \n                            \n                            \n                                Support\n                                \n                                    FAQ\n                                    Merchant Support\n                                    Account Support\n                                    Community\n                                \n                            \n                            \n                                Resources\n                                \n                                    GitHub\n                                    Partners\n                                    Demo Portal\n                                    Blog\n                                \n                            \n                            \n                                Family\n                                \n                                    Braintree\n                                    Venmo\n                                    Paydiant\n                                    Xoom\n                                \n                            \n                        \n                        \n                            \n                                \n                                    Privacy\n                                    Legal\n                                    Contact\n                                \n                            \n                            \n                                Copyright 1999-2017 PayPal. All rights reserved.", "time": "2017-05-24T23:39:11.973298"}
{"url": "https://developer.visa.com/reference", "site": "visa.com", "descr": "Contact Sales: 1 866-374-0948\nPRODUCTS\n\n\tAPIs\n\t\n\t\tAggregation API\n\t\tAccount Verification API\n\t\tOpen Banking API\n\t\teBills API\n\t\tRisk Insights\n\t\tMoney Movement API\n\t\n\n\tFeatured FinApps\n\t\n\t\tAccount Summary\n\t\tBudgets\n\t\tCash Flow Analysis\n\t\tExpense & Income Analysis\n\t\tInvestment Holding\n\t\tNet Worth Summary\n\t\n\n\tData Analytics\n\t\n\t\tTransaction Data Enrichment\n\t\tFor Financial Institutions\n\t\tCredit Risk Modeling\n\t\tConsumer Spending Data\n\t\tRetail Competitive Insights\n\t\n\n\n\nSOLUTIONS\n\n\tIndustry Solutions\n\t\n\t\tWealth Management\n\t\tPersonal Financial Management\n\t\tRisk Insight Suite\n\t\tRetail Banking\n\t\tPayments\n\t\tData Clarity\n\t\n\n\tDeveloper Solutions\n\t\n\t\tBuild Financial Apps\n\t\tCustomer Activation\n\t\tFraud Reduction\n\t\n\n\n\nSERVICES\n\n\tProfessional Services\n\tClient Services\n\tDeveloper Support\n\tSecurity Dashboard\n\n\nRESOURCES\nCOMPANY\n\n\tWhy Yodlee\n\tCareers\n\tIndia Office\n\tLaunchpad\n\tIncubator\n\tInvestor Relations\n\tNewsroom\n\tContact Us\n\n\nTransactions\nFastLink\nMore\u2026\nPremium Features\nTandem\nSense\n\n\n\t\t\n\t\t\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t          \n\n          \n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\n\nCONTACT SALES: 1 866-374-0948DEVELOPER PORTALBlogContact UsAustralia and New ZealandEMEAGlobal\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPRODUCTS\n\n\tAPIs\n\t\n\t\tAggregation API\n\t\tAccount Verification API\n\t\tOpen Banking API\n\t\teBills API\n\t\tRisk Insights\n\t\tMoney Movement API\n\t\n\n\tFeatured FinApps\n\t\n\t\tAccount Summary\n\t\tBudgets\n\t\tCash Flow Analysis\n\t\tExpense & Income Analysis\n\t\tInvestment Holding\n\t\tNet Worth Summary\n\t\n\n\t\u00a0\n\t\n\t\tSave for a Goal\n\t\tTransactions\n\t\tFastLink\n\t\tMore\u2026\n\t\tPremium Features\n\t\tTandem\n\t\tSense\n\t\n\n\tData Analytics\n\t\n\t\tTransaction Data Enrichment\n\t\tFor Financial Institutions\n\t\tCredit Risk Modeling\n\t\tConsumer Spending Data\n\t\tRetail Competitive Insights\n\t\n\n\n\nSOLUTIONS\n\n\tIndustry Solutions\n\t\n\t\tWealth Management\n\t\tPersonal Financial Management\n\t\tRisk Insight Suite\n\t\tRetail Banking\n\t\tPayments\n\t\tData Clarity\n\t\n\n\tDeveloper Solutions\n\t\n\t\tBuild Financial Apps\n\t\tCustomer Activation\n\t\tFraud Reduction\n\t\n\n\n\nSERVICES\n\n\tProfessional Services\n\tClient Services\n\tDeveloper Support\n\tSecurity Dashboard\n\n\nRESOURCES\nCOMPANY\n\n\tWhy Yodlee\n\tCareers\n\tIndia Office\n\tLaunchpad\n\tIncubator\n\tNewsroom\n\tInvestor Relations\n\tNewsroom\n\tContact Us\n\n\n\n\n\n \n \n\n\n\t\t\t\t\n\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t            \n            \t\t\t\n\t\t\t                \n                    \n\n                        \n                            eBills API\n\n                                                \n                        \n                    \n\n\t\t\t\t\t\n                \n            \n        \t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\r\n\r\n\r\n\t\t\r\n\t\r\n\t\r\n\t\t\r\n\t\t\r\n\t\t\t\t\r\n\t\t\r\n\r\n\t\t\t\r\n\n\t\n\t\t\n\t\t\tPaying Bills Has Never Been So Rewarding\nImprove online bill pay with a solution that lowers existing costs, generates significant new revenue, and provides a compelling digital user experience. With Envestnet\u00ae | Yodlee\u00ae eBills, you can enable your customers to pay any biller or individual using electronic and paper check payments, quickly and easily.\n\n\t\t\n\t\n\n\t\n\t\t\n\t\t\tGenerate new fee revenue by offering consumers the convenience of guaranteed, same-day electronic payments to hundreds of national and regional billers across multiple categories, including credit cards, mortgage, auto finance, insurance, utilities, cable and wireless. Optional bill reminders and alerts remind users to pay their bills and warn them when bills are overdue, to help users better manage their money.\n\n\t\t\n\t\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\t\n\t\t\n\t\t\tKey Benefits\n\n\t\t\n\t\n\n\t\n\t\t\n\t\t\t\nRich paperless bills presentation for nearly 3,000 bills\nLow-cost, next-day electronic payments standard\nRevenue generating, fee-based expedited payments\nProprietary, revenue generating credit and debit card-based payments\nMobile payments\n\n\n\t\t\n\t\n\n\t\n\t\t\n\t\t\t\nEnd-to-end electronic execution of transactions to lower costs and increase profits\nIntuitive user interface\nAbility to set bill reminders and pay bills automatically\nPaper payment option\nEasy integration into existing online banking and bill payment services\n\n\n\t\t\n\t\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\t\n\t\t\n\t\t\tMore APIs\n\n\t\t\n\t\n\r\n\r\n        \r\n\r\n       \r\n   \r\n   AGGREGATION API \r\n            \r\n        \r\n\r\n\r\n\r\n\r\n        \r\n\r\n       \r\n   \r\n   ACCOUNT VERIFICATION API \r\n            \r\n        \r\n\r\n\r\n\r\n\r\n        \r\n\r\n       \r\n   \r\n   OPEN BANKING API \r\n            \r\n        \r\n\r\n\r\n\r\n\r\n        \r\n\r\n       \r\n   \r\n   MONEY MOVEMENT API \r\n            \r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\t\n\t\t\n\t\t\tRelated Resources\n\n\t\t\n\t\nIAV API Data Sheet: Reduce Risk for Bank Payments Using the Envestnet | Yodlee Account Verification APIIAV API eBook: 7 Ways to Optimize Your Mobile Payments AppIAV API Whitepaper: Enabling Financial Disruption with Instant Account VerificationMore Resources\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\t\n\t\t\n\t\t\tGo Under the Hood\n\n\t\t\n\t\n\n\t\n\t\t\n\t\t\tIncubator\nGot a vision or a prototype in need of financial data? It\u2019s time to apply for the incubator program!\n\n\t\t\n\t\nLearn More\n\t\n\t\t\n\t\t\tDeveloper Portal\nGet access to the latest documentation, sample code, testing tools, and more on our Developer Portal.\n\n\t\t\n\t\nLog In\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\t\n\t\t\n\t\t\tClients Working With Us\n\n\t\t\n\t\n\r\n\r\n\n\t\t\t\r\n\t\t\r\n\t\t\r\n\t\t\t\r\n\t\r\n\t\r\n\t\r\n\r\n\t\t\r\n\t\r\n\r\n\r\n\r\n\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\r\n\r\n       \t\t\t\r\n        \r\n         \r\n          \r\n             \r\n              \r\n                Ready To Talk?Contact Us\r\n                          \r\n            \r\n          \r\n         \r\n               \r\n               \r\n       \r\n       \r\n         \r\n          \r\n             \r\n              \r\n                \r\n                                Newsletter Sign-up:\r\n                                  \r\n                  \r\n                  \r\n                      \r\n                  \r\n                   \r\n                                      \r\n                          \r\n            \r\n          \r\n         \r\n                \r\n      \r\n      \r\n\t\t\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\t\t\t\t\t\t                  \r\n          \r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tCompany InfoCompany\nContact Us\nOur Team\nEvents\nCareers\nIndia Office\nInvestor Relations\nNewsroom\nTrending\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tOfferingsData Platform\nDeveloper APIs\nData Analytics\nProducts\nSolutions\nServices\nResources\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tLegalPrivacy Notice\nYodlee Security\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tYodlee Portals\t\t\t\r\n\r\n\r\nYodlee Blog\r\nDeveloper Portal\r\nLaunchpad\r\nIncubator\r\nMoney by Envestnet|Yodlee\r\nYodlee Labs \r\nNEW Yodlee MoneyCenter\r\nYodlee SmallBusiness\r\n\r\n\r\n\r\n\r\nEnvestnet\r\nPMC\u00ae\r\nTamarac\u2122\r\nERS\r\nWheelhouse Analytics\r\n\r\n\r\n\r\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\r\n\r\n        \t\r\n\t\t\t\t\t\r\n            \r\n            \r\n            \r\n                                    \r\n          \r\n\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\r\n     \r\n      \r\n      \t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t\u00a9 2017 Envestnet | Yodlee.\u2122", "time": "2017-05-24T23:39:12.367211"}
{"url": "https://developer.visa.com/reference", "site": "visa.com", "descr": "API\n\nSeja bem-vindo(a) \u00e0 documenta\u00e7\u00e3o da API da iugu.\n\n\n\nApresenta\u00e7\u00e3o\n\nN\u00f3s criamos nossa API seguindo a t\u00e9cnica REST. Dessa forma, nossas URLs s\u00e3o amig\u00e1veis e previs\u00edveis. Todas as nossas APIs respondem em JSON ou XML.\n\nTodas as nossas chamadas s\u00e3o feitas, na vers\u00e3o mais atual da API, na URL https://api.iugu.com/v1/\n\nExemplos da utiliza\u00e7\u00e3o pr\u00e1tica das chamadas de nossa API podem ser conferidas em nossos Conceitos t\u00e9cnicos.\n\n\n\nAutentica\u00e7\u00e3o\n\nA autentica\u00e7\u00e3o na Iugu API \u00e9 feita atrav\u00e9s da utiliza\u00e7\u00e3o de um API Token. Voc\u00ea pode gerenciar seus tokens nas configura\u00e7\u00f5es de sua conta.\n\nH\u00e1 duas maneiras de se autenticar, sendo a primeira, e mais recomendada, utilizando HTTP Basic Auth. Coloque seu API Token como sendo o username da autentica\u00e7\u00e3o b\u00e1sica sem necessidade de nenhum password (senha). A outra maneira \u00e9 enviar o API Token num par\u00e2metro de nome api_token.\n\nCada usu\u00e1rio tem seu pr\u00f3prio Token, al\u00e9m da conta. Caso mande o token do usu\u00e1rio, deve tamb\u00e9m ser enviado o account_id para que a iugu possa identificar para qual conta vai essa chamada. (Recomendamos que o api token de conta seja utilizado)\n\nOs tokens de conta podem ser TEST ou LIVE, sendo que todas as chamadas em que tokens TEST s\u00e3o utilizados ir\u00e3o criar objetos de teste.\n\nTodas as chamadas devem ser feitas via HTTPS e devem conter a autentica\u00e7\u00e3o.\n\n\n\nErros\n\nA Iugu API utiliza os pr\u00f3prios C\u00f3digos de Status HTTP para indicar sucesso ou falha da chamada. Em geral os c\u00f3digos iniciados com 2 indicam sucesso, os iniciados com 4 indicam erro (Ex: Falta de par\u00e2metro obrigat\u00f3rio) e iniciados com 5 indicam erro interno nos servidores da Iugu.\n\nResposta de Erro\n\n\n\n\n\nEx de Erro de Autentica\u00e7\u00e3o (Status 401)\n\n\n{\n    \"errors\": \"Unauthorized\"\n}\n\n\nEx de Erro de Par\u00e2metro (Status 422)\n\n\n{\n    \"errors\": {\n        \"due_date\": [\n            \"should not be in the past\"\n        ]\n    }\n}\n\n\nErros mais comuns\n\n\n\n\n\n\n\nVersionamento\n\nN\u00f3s liberamos novas vers\u00f5es da API toda vez que efetuamos mudan\u00e7as que n\u00e3o s\u00e3o retrocompat\u00edveis, por\u00e9m mantemos as antigas vers\u00f5es da API funcionando.\n\nNossas chamadas de API partem da URL https://api.iugu.com/v1/ sendo que esse v1 \u00e9 justamente a vers\u00e3o da API.\n\n\n\nTokens e Cobran\u00e7a Direta\n\nO processo para cobran\u00e7a transparente funciona da seguinte maneira:\n\n\nPrimeiramente, os dados de cart\u00e3o de cr\u00e9dito do cliente s\u00e3o enviados a Iugu atrav\u00e9s que conex\u00e3o segura SSL. A Iugu ent\u00e3o retorna um token que representa o meio de pagamento desse cliente.\nEsse token \u00e9 ent\u00e3o utilizado para que seja feita uma cobran\u00e7a atrav\u00e9s deste meio de pagamento.\nPronto! Pagamento efetuado!\n\n\nCriar um Token\n\nO Token \u00e9 uma representa\u00e7\u00e3o do meio de pagamento do cliente (por ex: seu cart\u00e3o de cr\u00e9dito), sendo totalmente seguro, de forma que n\u00e3o \u00e9 poss\u00edvel que algu\u00e9m consiga as informa\u00e7\u00f5es do cart\u00e3o de cr\u00e9dito do cliente utilizando esse token. O token \u00e9 gerado para uma transa\u00e7\u00e3o espec\u00edfica, tornando-o ainda mais seguro.\n\nATEN\u00c7\u00c3O:\nA API de Cria\u00e7\u00e3o de Token n\u00e3o utiliza a autentica\u00e7\u00e3o via api_token.\nEsta chamada API deve ser utilizada apenas em aplica\u00e7\u00f5es sem compatibilidade com JavaScript (mobile). Para todas as outras, disponibilizamos o iugu.js.\n\n\nDefini\u00e7\u00e3o\n\nPOST https://api.iugu.com/v1/payment_token\n\n\nPar\u00e2metros\n\n\n\n\n\nPar\u00e2metros: data\n\n\n\n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/payment_token \n    -d \"account_id=56001D39F7AD441332B873E15F067193\" \n    -d \"method=credit_card\" \n    -d \"data[number]=4111111111111111\" \n    -d \"data[verification_value]=123\" \n    -d \"data[first_name]=Joao\" \n    -d \"data[last_name]=Silva\" \n    -d \"data[month]=12\" \n    -d \"data[year]=2019\"\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n  \"id\": \"77C2565F6F064A26ABED4255894224F0\",\n  \"method\": \"credit_card\",\n  \"extra_info\": {\n    \"brand\": \"VISA\",\n    \"holder_name\": \"Jo\u00e3o Silva\",\n    \"display_number\": \"XXXX-XXXX-XXXX-1111\",\n    \"month\": 12,\n    \"year\": 2019\n  },\n  \"test\": false\n}\nCobran\u00e7a Direta\n\nPodemos efetuar uma cobran\u00e7a direta de um valor, utilizando um token de cart\u00e3o de cr\u00e9dito, uma forma de pagamento de cliente ou gerando um boleto banc\u00e1rio.\n\n\nDefini\u00e7\u00e3o\n\nPOST https://api.iugu.com/v1/charge\n\n\nPar\u00e2metros\n\n\n\n\n\nPar\u00e2metros: items\n\n\n  \n\n\nPar\u00e2metros: payer\n\n\n  \n\n\nPar\u00e2metros: address\n\n\n  \nOBS.: Para emitir boletos com a iugu, \u00e9 obrigat\u00f3rio o envio do CEP e do n\u00famero do endere\u00e7o do seu cliente para a iugu. N\u00f3s buscamos o endere\u00e7o completo dele na base dos Correios. O par\u00e2metro de complemento \u00e9 opcional.\n\n\nExemplo de Chamada \n  \n     - Cart\u00e3o de Cr\u00e9dito\n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/charge \\\n    -u seuApiToken: \\\n    -d \"token=123AEAE123EA0kEIEIJAEI\" \\\n    -d \"email=teste@teste.com\" \\\n    -d \"items[][description]=Item Um\" \\\n    -d \"items[][quantity]=1\" \\\n    -d \"items[][price_cents]=1000\" \\\n    -d \"payer[cpf_cnpj]=12312312312\" \\\n    -d \"payer[name]=Nome do Cliente\" \\\n    -d \"payer[phone_prefix]=11\" \\\n    -d \"payer[phone]=12121212\" \\\n    -d \"payer[email]=teste@teste.com\" \\\n    -d \"payer[address][street]=Rua Tal\" \\\n    -d \"payer[address][number]=700\" \\\n    -d \"payer[address][city]=S\u00e3o Paulo\" \\ \n    -d \"payer[address][state]=SP\" \\\n    -d \"payer[address][country]=Brasil\" \\\n    -d \"payer[address][zip_code]=12122-000\"\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\nIugu::Charge.create({\n    token: \"123AEAE123EA0kEIEIJAEI\",\n    email: \"teste@teste.com\",\n    items: [{\n        description: \"Item Um\",\n        quantity: \"1\",\n        price_cents: \"1000\"\n    }],\n    payer: {\n        name: \"Nome do Cliente\",\n        phone_prefix: \"11\",\n        phone: \"12121212\",\n        email: \"teste@teste.com\",\n        address: {\n            street: \"Rua Tal\",\n            number: \"700\",\n            city: \"S\u00e3o Paulo\",\n            state: \"SP\",\n            country: \"Brasil\",\n            zip_code: \"12122-00\"\n        }\n    }\n})\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\nIugu_Charge::create(Array(\n    \"token\" = > \"123AEAE123EA0kEIEIJAEI\",\n    \"email\" = > \"teste@teste.com\",\n    \"items\" = > Array(\n        Array(\n            \"description\" = > \"Item Um\",\n            \"quantity\" = > \"1\",\n            \"price_cents\" = > \"1000\"\n        )\n    ) ,\n    \"payer\" = > Array(\n        \"name\" = > \"Item Um\",\n        \"phone_prefix\" = > \"1\",\n        \"phone\" = > \"1000\",\n        \"email\" => \"teste@teste.com\",\n        \"address\" => Array(\n            \"street\" => \"Rua Tal\",\n            \"number\" => \"700\",\n            \"city\" => \"S\u00e3o Paulo\",\n            \"state\" => \"SP\",\n            \"country\" => \"Brasil\",\n            \"zip_code\" => \"12122-00\"\n        )\n    )\n));\n  \n\n\nExemplo de Retorno \n  \n     - Cart\u00e3o de Cr\u00e9dito\n  \n\n\n{\n    \"success\": true,\n    \"message\": \"Autorizado\",\n    \"invoice_id\": \"53B53D39F7AD44C4B8B873E15F067193\"\n}Exemplo de Chamada \n  \n     - Boleto Banc\u00e1rio\n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/charge \n    -u seuApiToken: \n    -d \"method=bank_slip\" \n    -d \"email=teste@teste.com\" \n    -d \"items[][description]=Item Um\" \n    -d \"items[][quantity]=1\" \n    -d \"items[][price_cents]=1000\" \n    -d \"payer[cpf_cnpj]=12312312312\" \n    -d \"payer[name]=Nome do Cliente\" \n    -d \"payer[phone_prefix]=11\" \n    -d \"payer[phone]=12121212\" \n    -d \"payer[email]=teste@teste.com\" \n    -d \"payer[address][street]=Rua Tal\" \n    -d \"payer[address][number]=700\" \n    -d \"payer[address][city]=S\u00e3o Paulo\"  \n    -d \"payer[address][state]=SP\" \n    -d \"payer[address][country]=Brasil\" \n    -d \"payer[address][zip_code]=12122-000\"\n    -d \"payer[address][complement]=bloco 3, ap. 32\"\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\nIugu::Charge.create({\n    method: \"bank_slip\",\n    email: \"teste@teste.com\",\n    items: [{\n        description: \"Item Um\",\n        quantity: \"1\",\n        price_cents: \"1000\"\n    }],\n    payer: {\n      \tcpf_cnpj: \"12312312312\",\n        name: \"Nome do Cliente\",\n        phone_prefix: \"11\",\n        phone: \"12121212\",\n        email: \"teste@teste.com\",\n        address: {\n            street: \"Rua Tal\",\n            number: \"700\",\n            city: \"S\u00e3o Paulo\",\n            state: \"SP\",\n            country: \"Brasil\",\n            zip_code: \"12122-00\",\n            complement: \"bloco 3, ap. 32\"\n        }\n    }\n})\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\nIugu_Charge::create(Array(\n    \"method\" = > \"bank_slip\",\n    \"email\" = > \"teste@teste.com\",\n    \"items\" = > Array(\n        Array(\n            \"description\" = > \"Item Um\",\n            \"quantity\" = > \"1\",\n            \"price_cents\" = > \"1000\"\n        )\n    ) ,\n    \"payer\" = > Array(\n        \"cpf_cnpj\" = > \"12312312312\",\n        \"name\" = > \"Item Um\",\n        \"phone_prefix\" = > \"1\",\n        \"phone\" = > \"1000\",\n        \"email\" => \"teste@teste.com\",\n        \"address\" => Array(\n            \"street\" => \"Rua Tal\",\n            \"number\" => \"700\",\n            \"city\" => \"S\u00e3o Paulo\",\n            \"state\" => \"SP\",\n            \"country\" => \"Brasil\",\n            \"zip_code\" => \"12122-00\",\n            \"complement\" => \"bloco 3, ap. 32\"\n        )\n    )\n));\n  \n\n\nExemplo de Retorno \n  \n     - Boleto Banc\u00e1rio\n  \n\n\n{\n    \"errors\": {},\n    \"url\": \"http://url_do_boleto\",\n    \"success\": true,\n    \"invoice_id\": \"53B53D39F7AD44C4B8B873E15F067193\"\n}\n\nClientes e Formas de Pagamento\n\nUtilizando o objeto cliente voc\u00ea pode controlar os pagamentos feito por um cliente espec\u00edfico, bem como controlar os dados de contato desse cliente. Tamb\u00e9m permite a cria\u00e7\u00e3o de formas de pagamento desse cliente para que ent\u00e3o o pagamento recorrente (assinatura) possa ser automatizado utilizando a forma de pagamento padr\u00e3o deste cliente.\n\n\n\nClientes\n\nObjeto Cliente\n\nCriar um Cliente\n\nCria um objeto Cliente\n\n\nDefini\u00e7\u00e3o\n\nPOST https://api.iugu.com/v1/customers\n\n\nPar\u00e2metros\n\n\n\n\n\nPar\u00e2metros: custom_variables\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/customers \n   -u seuApiToken: \n   -d \"email=email@email.com\" \n   -d \"name=Nome do Cliente\" \n   -d \"notes=Anota\u00e7\u00f5es Gerais\" \n   -d \"cc_emails=email_cc@email.com;email_cc2@email.com\" \n   -d \"zip_code=12122000\" \n   -d \"number=700\" \n   -d \"street=Rua Tal\" \n   -d \"city=S\u00e3o Paulo\" \n   -d \"state=SP\"\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\nIugu::Customer.create({\n    email: \"email@email.com\",\n    name: \"Nome do Cliente\",\n\tnotes: \"Anota\u00e7\u00f5es Gerais\"\n})\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\nIugu_Customer::create(Array(\n\u00a0\u00a0\u00a0\u00a0\"email\"\u00a0=>\u00a0\"email@email.com\",\n\u00a0\u00a0\u00a0\u00a0\"name\"\u00a0=>\u00a0\"Nome\u00a0do\u00a0Cliente\",\n\u00a0\u00a0\u00a0\u00a0\"notes\"\u00a0=>\u00a0\"Anota\u00e7\u00f5es\u00a0Gerais\"\n));\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"77C2565F6F064A26ABED4255894224F0\",\n    \"email\": \"email@email.com\",\n    \"name\": \"Nome do Cliente\",\n    \"notes\": \"Anota\u00e7\u00f5es Gerais\",\n    \"created_at\": \"2013-11-18T14:58:30-02:00\",\n    \"updated_at\": \"2013-11-18T14:58:30-02:00\",\n    \"custom_variables\":[]\n}\nBuscar um Cliente\n\nRetorna os dados de um Cliente\n\n\nDefini\u00e7\u00e3o\n\nGET https://api.iugu.com/v1/customers/ID_DO_CLIENTE\n\n\nPar\u00e2metros\n\n\n\n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/customers/77C2565F6F064A26ABED4255894224F0 \\\n   -u seuApiToken:\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\nIugu::Customer.fetch(\"77C2565F6F064A26ABED4255894224F0\")\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$customer = Iugu_Customer::fetch(\"77C2565F6F064A26ABED4255894224F0\");\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"77C2565F6F064A26ABED4255894224F0\",\n    \"email\": \"email@email.com\",\n    \"name\": \"Nome do Cliente\",\n    \"notes\": \"Anota\u00e7\u00f5es Gerais\",\n    \"created_at\": \"2013-11-18T14:58:30-02:00\",\n    \"updated_at\": \"2013-11-18T14:58:30-02:00\",\n    \"custom_variables\":[]\n}\nAlterar um Cliente\n\nAltera os dados de um Cliente. Quaisquer par\u00e2metros n\u00e3o informados n\u00e3o ser\u00e3o alterados.\n\n\nDefini\u00e7\u00e3o\n\nPUT https://api.iugu.com/v1/customers/ID_DO_CLIENTE\n\n\nPar\u00e2metros\n\n\n\n\n\nPar\u00e2metros: custom_variables\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl -X PUT https://api.iugu.com/v1/customers/77C2565F6F064A26ABED4255894224F0 \\\n   -u seuApiToken: \\\n   -d \"name=Novo Nome do Cliente\" \\\n   -d \"notes=Novas Anota\u00e7\u00f5es Gerais\"\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\ncustomer = Iugu::Customer.fetch(\"77C2565F6F064A26ABED4255894224F0\")\ncustomer.name = \"Novo Nome do Cliente\"\ncustomer.notes = \"Novas Anota\u00e7\u00f5es Gerais\"\ncustomer.save\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$customer = Iugu_Customer::fetch(\"77C2565F6F064A26ABED4255894224F0\");\n$customer->name = \"Teste\";\n$customer->save();\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"77C2565F6F064A26ABED4255894224F0\",\n    \"email\": \"email@email.com\",\n    \"name\": \"Novo Nome do Cliente\",\n    \"notes\": \"Novas Anota\u00e7\u00f5es Gerais\",\n    \"created_at\": \"2013-11-18T14:58:30-02:00\",\n    \"updated_at\": \"2013-11-18T14:58:30-02:00\",\n    \"custom_variables\":[]\n}\nRemover um Cliente\n\nRemove permanentemente um cliente. Por\u00e9m, n\u00e3o permite remover clientes com assinaturas.\n\n\nDefini\u00e7\u00e3o\n\nDELETE https://api.iugu.com/v1/customers/ID_DO_CLIENTE\n\n\nPar\u00e2metros\n\n\n\n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl -X DELETE https://api.iugu.com/v1/customers/77C2565F6F064A26ABED4255894224F0 \\\n   -u seuApiToken:\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\ncustomer = Iugu::Customer.fetch(\"77C2565F6F064A26ABED4255894224F0\")\ncustomer.delete\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$customer = Iugu_Customer::fetch(\"77C2565F6F064A26ABED4255894224F0\");\n$customer->delete();\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"77C2565F6F064A26ABED4255894224F0\",\n    \"email\": \"email@email.com\",\n    \"name\": \"Novo Nome do Cliente\",\n    \"notes\": \"Novas Anota\u00e7\u00f5es Gerais\",\n    \"created_at\": \"2013-11-18T14:58:30-02:00\",\n    \"updated_at\": \"2013-11-18T14:58:30-02:00\",\n    \"custom_variables\":[]\n}\nListar os Clientes\n\nRetorna uma lista com todos os clientes cadastrados em sua conta ordenados pela data de Cria\u00e7\u00e3o, sendo o primeiro o que foi criado mais recentemente. O campo totalItems cont\u00e9m sempre a quantidade de clientes cadastrados, independente dos par\u00e2metros de pesquisa utilizados e o resultado da pesquisa fica sempre dentro de items.\n\n\nDefini\u00e7\u00e3o\n\nGET https://api.iugu.com/v1/customers\n\n\nPar\u00e2metros\n\n\n\n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/customers \\\n   -u seuApiToken:\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\ncustomers = Iugu::Customer.search.results\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$customers = Iugu_Customer::search()->results()\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"totalItems\": 5,\n    \"items\": [\n        {\n            \"id\": \"FF3149CE52CB4A789925F154B489BFDD\",\n            \"email\": \"email@email.com\",\n            \"name\": \"Nome do Cliente\",\n            \"notes\": \"Anota\u00e7\u00f5es Gerais\",\n            \"created_at\": \"2013-11-18T14:58:30-02:00\",\n            \"updated_at\": \"2013-11-18T14:58:30-02:00\"\n        },\n        {\n            \"id\": \"912FD57927FA43DEB0223C819E18DDFE\",\n            \"email\": \"email@email.com\",\n            \"name\": \"Nome do Cliente\",\n            \"notes\": \"Anota\u00e7\u00f5es Gerais\",\n            \"created_at\": \"2013-11-18T14:58:30-02:00\",\n            \"updated_at\": \"2013-11-18T14:58:30-02:00\"\n        },\n        {\n            \"id\": \"32CE45D8B42B4AEEA3D1A1D9227E1790\",\n            \"email\": \"email@gmail.com\",\n            \"name\": null,\n            \"notes\": null,\n            \"created_at\": \"2013-11-18T14:58:30-02:00\",\n            \"updated_at\": \"2013-11-18T14:58:30-02:00\"\n        },\n        {\n            \"id\": \"1AF1B6EC280149708773FED03EB407AA\",\n            \"email\": \"teste@gmail.com\",\n            \"name\": null,\n            \"notes\": null,\n            \"created_at\": \"2013-11-18T14:58:30-02:00\",\n            \"updated_at\": \"2013-11-18T14:58:30-02:00\"\n        },\n        {\n            \"id\": \"D65B556E19ED4173976421E84EE7B251\",\n            \"email\": \"cliente@gmail.com\",\n            \"name\": null,\n            \"notes\": null,\n            \"created_at\": \"2013-11-18T14:58:30-02:00\",\n            \"updated_at\": \"2013-11-18T14:58:30-02:00\"\n        }\n    ]\n}\n\nFormas de Pagamento de Cliente\n\nUm cliente pode ter diversas formas de pagamento cadastradas, sendo uma a forma de pagamento padr\u00e3o. Dessa forma o pagamento recorrente poder\u00e1 ser feito automaticamente, sem necessitar de a\u00e7\u00e3o do cliente a cada ciclo de assinatura.\n\nCriar uma Forma de Pagamento\n\nCria uma Forma de Pagamento de Cliente.\n\n\nDefini\u00e7\u00e3o\n\nPOST https://api.iugu.com/v1/customers/ID_DO_CLIENTE/payment_methods\n\n\nPar\u00e2metros\n\n\n\n\n\nPar\u00e2metros: data\n\n\n\n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/customers/FF3149CE52CB4A789925F154B489BFDD/payment_methods \n    -u seuApiToken: \n    -d \"description=Meu Cart\u00e3o de Cr\u00e9dito\"\n    -d \"token=77C2565F6F064A26ABED4255894224F0\"\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\ncustomer = Iugu::Customer.fetch(\"77C2565F6F064A26ABED4255894224F0\")\n\ncustomer.payment_methods.create({\n    description: \"Primeiro Cart\u00e3o\",\n    token: \"77C2565F6F064A26ABED4255894224F0\"\n})\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$customer = Iugu_Customer::fetch(\"77C2565F6F064A26ABED4255894224F0\")\n\n$payment_method = $customer->payment_methods()->create(Array(\n    \"description\" => \"Primeiro Cart\u00e3o\",\n    \"token\" => \"77C2565F6F064A26ABED4255894224F0\"\n));\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"9B41FB19CBA44913B1EF990A10382E7E\",\n    \"description\": \"Meu Cart\u00e3o de Cr\u00e9dito\",\n    \"item_type\": \"credit_card\",\n    \"data\": {\n        \"holder_name\": \"Joao Silva\",\n        \"display_number\": \"XXXX-XXXX-XXXX-1111\",\n        \"brand\": \"visa\",\n        \"month\":12,\n        \"year\":2022\n    }\n}\nBuscar uma Forma de Pagamento\n\nRetorna os dados de uma Forma de Pagamento de um Cliente\n\n\nDefini\u00e7\u00e3o\n\nGET https://api.iugu.com/v1/customers/ID_DO_CLIENTE/payment_methods/ID_DA_FORMA_PAGAMENTO\n\n\nPar\u00e2metros\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/customers/FF3149CE52CB4A789925F154B489BFDD/payment_methods/9B41FB19CBA44913B1EF990A10382E7E \\\n    -u seuApiToken:\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\npayment_method = Iugu::PaymentMethod.fetch({\n    customer_id: \"C18DCC0AC8D742A9807C3B68F3503546\",\n    id: \"5DB4FF7FCD6042C09DF3954C37D1126A\"\n})\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$payment_method = Iugu_PaymentMethod::fetch(Array(\n    \"customer_id\" => \"C18DCC0AC8D742A9807C3B68F3503546\",\n    \"id\" => \"5DB4FF7FCD6042C09DF3954C37D1126A\"\n));\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"9B41FB19CBA44913B1EF990A10382E7E\",\n    \"description\": \"Meu Cart\u00e3o de Cr\u00e9dito\",\n    \"item_type\": \"credit_card\",\n    \"data\": {\n        \"holder_name\": \"Joao Silva\",\n        \"display_number\": \"XXXX-XXXX-XXXX-1111\",\n        \"brand\": \"visa\",\n        \"month\":10,\n        \"year\":2022\n    }\n}\nAlterar uma Forma de Pagamento\n\nAltera os dados de uma Forma de Pagamento, quaisquer par\u00e2metros n\u00e3o informados n\u00e3o ser\u00e3o alterados.\n\n\nDefini\u00e7\u00e3o\n\nPUT https://api.iugu.com/v1/customers/ID_DO_CLIENTE/payment_methods/ID_DA_FORMA_PAGAMENTO\n\n\nPar\u00e2metros\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/customers/FF3149CE52CB4A789925F154B489BFDD/payment_methods/9B41FB19CBA44913B1EF990A10382E7E \\\n    -u seuApiToken: \\\n    -d \"description=Novo Meu Cart\u00e3o de Cr\u00e9dito\"\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\npayment_method = Iugu::PaymentMethod.fetch({\n    customer_id: \"C18DCC0AC8D742A9807C3B68F3503546\",\n    id: \"5DB4FF7FCD6042C09DF3954C37D1126A\"\n})\n\npayment_method.description = \"Novo Pagamento\"\npayment_method.save\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$payment_method = Iugu_PaymentMethod::fetch(Array(\n    \"customer_id\" => \"C18DCC0AC8D742A9807C3B68F3503546\",\n    \"id\" => \"5DB4FF7FCD6042C09DF3954C37D1126A\"\n));\n\n$payment_method->description = \"Novo Pagamento\";\n$payment_method->save();\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"9B41FB19CBA44913B1EF990A10382E7E\",\n    \"description\": \"Novo Meu Cart\u00e3o de Cr\u00e9dito\",\n    \"item_type\": \"credit_card\",\n    \"data\": {\n        \"holder_name\": \"Joao Silva\",\n        \"display_number\": \"XXXX-XXXX-XXXX-1111\",\n        \"brand\": \"visa\",\n        \"month\":10,\n        \"year\":2022\n    }\n}\nRemover uma Forma de Pagamento\n\nRemove permanentemente uma Forma de Pagamento de um Cliente.\n\n\nDefini\u00e7\u00e3o\n\nDELETE https://api.iugu.com/v1/customers/ID_DO_CLIENTE/payment_methods/ID_DA_FORMA_PAGAMENTO\n\n\nPar\u00e2metros\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl -X DELETE https://api.iugu.com/v1/customers/77C2565F6F064A26ABED4255894224F0/payment_methods/9B41FB19CBA44913B1EF990A10382E7E \\\n   -u seuApiToken:\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\npayment_method = Iugu::PaymentMethod.fetch({\n    customer_id: \"C18DCC0AC8D742A9807C3B68F3503546\",\n    id: \"5DB4FF7FCD6042C09DF3954C37D1126A\"\n})\n\npayment_method.delete\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$payment_method = Iugu_PaymentMethod::fetch(Array(\n    \"customer_id\" => \"C18DCC0AC8D742A9807C3B68F3503546\",\n    \"id\" => \"5DB4FF7FCD6042C09DF3954C37D1126A\"\n));\n\n$payment_method->delete();\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"9B41FB19CBA44913B1EF990A10382E7E\",\n    \"description\": \"Novo Meu Cart\u00e3o de Cr\u00e9dito\",\n    \"item_type\": \"credit_card\",\n    \"data\": {\n        \"holder_name\": \"Joao Silva\",\n        \"display_number\": \"XXXX-XXXX-XXXX-1111\",\n        \"brand\": \"visa\",\n        \"month\":10,\n        \"year\":2022\n    }\n}\nListar as Formas de Pagamento\n\nRetorna uma lista com todas as Formas de Pagamento de determinado cliente.\n\n\nDefini\u00e7\u00e3o\n\nGET https://api.iugu.com/v1/customers/ID_DO_CLIENTE/payment_methods\n\n\nPar\u00e2metros\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/customers/77C2565F6F064A26ABED4255894224F0/payment_methods \\\n   -u seuApiToken:\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\npayment_methods = Iugu::PaymentMethod.search({\n    customer_id: \"C18DCC0AC8D742A9807C3B68F3503546\"\n}).results\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$payment_methods = Iugu_PaymentMethod::search(Array(\n    \"customer_id\" => \"77C2565F6F064A26ABED4255894224F0\"\n))->results();\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n[{\n    \"id\": \"48D603C05F634244A1D3FC2BFF35D10A\",\n    \"description\": \"Meu Cart\u00e3o de Cr\u00e9dito Um\",\n    \"item_type\": \"credit_card\",\n    \"data\": {\n        \"holder_name\": \"Joao Silva\",\n        \"display_number\": \"XXXX-XXXX-XXXX-1111\",\n        \"brand\": \"visa\",\n        \"month\":10,\n        \"year\":2022\n    }\n}, {\n    \"id\": \"9B41FB19CBA44913B1EF990A10382E7E\",\n    \"description\": \"Meu Cart\u00e3o de Cr\u00e9dito Dois\",\n    \"item_type\": \"credit_card\",\n    \"data\": {\n        \"holder_name\": \"Jose Santos\",\n        \"display_number\": \"XXXX-XXXX-XXXX-1111\",\n        \"brand\": \"visa\",\n        \"month\":7,\n        \"year\":2019\n    }\n}]\n\nFaturas\n\nOs clientes efetuam pagamentos atrav\u00e9s das faturas. As faturas cont\u00e9m itens que representam o que o cliente est\u00e1 pagando, o servi\u00e7o ou produto.\n\nAs faturas podem ter os seguintes status:\n\n\nDraft\nPending\nPartially_paid\nPaid\nCanceled\nRefunded\nExpired\n\n\nCriar uma Fatura\n\nCria uma Fatura para um Cliente (Podendo ser um objeto cliente ou apenas um e-mail).\n\n\nDefini\u00e7\u00e3o\n\nPOST https://api.iugu.com/v1/invoices\n\n\nPar\u00e2metros\n\n\n  \n\n\nPar\u00e2metros: items\n\n\n  \n\n\nPar\u00e2metros: payer\n\n\n  \n\n\nPar\u00e2metros: address\n\n\n  \n\n\nPar\u00e2metros: logs\n\n\n  \n\n\nPar\u00e2metros: custom_variables\n\n\n  \nOBS.: Para emitir boletos com a iugu, \u00e9 obrigat\u00f3rio o envio do CEP e do n\u00famero do endere\u00e7o do seu cliente para a iugu. N\u00f3s buscamos o endere\u00e7o completo dele na base dos Correios. O par\u00e2metro de complemento \u00e9 opcional.\n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/invoices \n  -u seuApiToken: \n  -d \"email=teste@teste.com\" \n  -d \"due_date=30/11/2013\" \n  -d \"items[][description]=Item Um\" \n  -d \"items[][quantity]=1\" \n  -d \"items[][price_cents]=1000\"\n  -d \"payer[cpf_cnpj]=12312312312\" \n  -d \"payer[name]=Nome do Cliente\" \n  -d \"payer[phone_prefix]=11\" \n  -d \"payer[phone]=12121212\" \n  -d \"payer[email]=teste@teste.com\" \n  -d \"payer[address][street]=Rua Tal\" \n  -d \"payer[address][number]=700\" \n  -d \"payer[address][city]=S\u00e3o Paulo\"  \n  -d \"payer[address][state]=SP\" \n  -d \"payer[address][country]=Brasil\" \n  -d \"payer[address][zip_code]=12122-000\"\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\nIugu::Invoice.create({\n    email: \"teste@teste.com\",\n    due_date: \"30/11/2014\",\n    items: [{\n        description: \"Item Um\",\n        quantity: \"1\",\n        price_cents: \"1000\"\n    }],\n    payer: {\n        name: \"Nome do Cliente\",\n        phone_prefix: \"11\",\n        phone: \"12121212\",\n        email: \"teste@teste.com\",\n        address: {\n            street: \"Rua Tal\",\n            number: \"700\",\n            city: \"S\u00e3o Paulo\",\n            state: \"SP\",\n            country: \"Brasil\",\n            zip_code: \"12122-00\"\n        }\n    }\n})\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\nIugu_Invoice::create(Array(\n    \"email\" => \"teste@teste.com\",\n    \"due_date\" => \"30/11/2014\",\n    \"items\" => Array(\n        Array(\n            \"description\" => \"Item Um\",\n            \"quantity\" => \"1\",\n            \"price_cents\" => \"1000\"\n        )\n    ),\n    \"payer\" = > Array(\n        \"name\" = > \"Item Um\",\n        \"phone_prefix\" = > \"1\",\n        \"phone\" = > \"1000\",\n        \"email\" => \"teste@teste.com\",\n        \"address\" => Array(\n            \"street\" => \"Rua Tal\",\n            \"number\" => \"700\",\n            \"city\" => \"S\u00e3o Paulo\",\n            \"state\" => \"SP\",\n            \"country\" => \"Brasil\",\n            \"zip_code\" => \"12122-00\"\n        )\n    )\n));\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"0958D2AAD34049AB889583E26DFA0BF1\",\n    \"due_date\": \"2013-11-30\",\n    \"currency\": \"BRL\",\n    \"discount_cents\": null,\n    \"email\": \"teste@teste.com\",\n    \"items_total_cents\": 1000,\n    \"notification_url\": null,\n    \"return_url\": null,\n    \"status\": \"pending\",\n    \"tax_cents\": null,\n    \"updated_at\": \"2014-06-17T09:58:05-03:00\",\n    \"total_cents\": 1000,\n    \"paid_at\": null,\n    \"commission_cents\": null,\n    \"secure_id\": \"0958d2aa-d340-49ab-8895-83e26dfa0bf1-2f4c\",\n    \"secure_url\": \"http://iugu.com/invoices/0958d2aa-d340-49ab-8895-83e26dfa0bf1-2f4c\",\n    \"customer_id\": null,\n    \"user_id\": null,\n    \"total\": \"R$ 10,00\",\n    \"taxes_paid\": \"R$ 0,00\",\n    \"commission\": \"R$ 0,00\",\n    \"interest\": null,\n    \"discount\": null,\n    \"created_at\": \"17/06, 09:58 h\",\n    \"refundable\": null,\n    \"installments\": null,\n    \"bank_slip\": {\n        \"digitable_line\": \"00000000000000000000000000000000000000000000000\",\n        \"barcode_data\": \"00000000000000000000000000000000000000000000\",\n        \"barcode\": \"http://iugu.com/invoices/barcode/0958d2aa-d340-49ab-8895-83e26dfa0bf1-2f4c\"\n    },\n    \"items\": [{\n        \"id\": \"11DA8B1662EC4C30BC4C78AEDC619145\",\n        \"description\": \"Item Um\",\n        \"price_cents\": 1000,\n        \"quantity\": 1,\n        \"created_at\": \"2014-06-17T09:58:05-03:00\",\n        \"updated_at\": \"2014-06-17T09:58:05-03:00\",\n        \"price\": \"R$ 10,00\"\n    }],\n    \"variables\": [{\n        \"id\": \"A897DD8BB6B54AE18CA4C48684E72FB9\",\n        \"variable\": \"payment_data.transaction_number\",\n        \"value\": \"1111\"\n    }],\n    \"custom_variables\": [],\n    \"logs\": []\n}\nBuscar uma Fatura\n\nRetorna os dados de uma Fatura.\n\n\nDefini\u00e7\u00e3o\n\nGET https://api.iugu.com/v1/invoices/ID_DA_FATURA\n\n\nPar\u00e2metros\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/invoices/0CCB984509034569A9A688F302B1FB35 \\\n  -u seuApiToken:\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\ninvoice = Iugu::Invoice.fetch(\"20E8843F7DC7478B944DB5FE908B9189\")\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$invoice = Iugu_Invoice::fetch(\"AE27126C4B8A4C79859B29CD210BA58F\");\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"0958D2AAD34049AB889583E26DFA0BF1\",\n    \"due_date\": \"2013-11-30\",\n    \"currency\": \"BRL\",\n    \"discount_cents\": null,\n    \"email\": \"teste@teste.com\",\n    \"items_total_cents\": 1000,\n    \"notification_url\": null,\n    \"return_url\": null,\n    \"status\": \"paid\",\n    \"tax_cents\": null,\n    \"updated_at\": \"2014-06-17T09:58:05-03:00\",\n    \"total_cents\": 1000,\n    \"paid_at\": null,\n    \"commission_cents\": null,\n    \"secure_id\": \"0958d2aa-d340-49ab-8895-83e26dfa0bf1-2f4c\",\n    \"secure_url\": \"http://iugu.com/invoices/0958d2aa-d340-49ab-8895-83e26dfa0bf1-2f4c\",\n    \"customer_id\": null,\n    \"user_id\": null,\n    \"total\": \"R$ 10,00\",\n    \"taxes_paid\": \"R$ 0,75\",\n    \"financial_return_date\": \"2013-12-30\",\n    \"commission\": \"R$ 0,00\",\n    \"interest\": null,\n    \"discount\": null,\n    \"created_at\": \"17/06, 09:58 h\",\n    \"refundable\": null,\n    \"installments\": null,\n    \"financial_return_dates\": [\n        {\n            \"id\": 7,\n            \"installment\": 1,\n            \"return_date\": \"2013-12-30\",\n             \"status\": \"pending\",\n             \"amount\": \"R$ 9,25\",\n             \"taxes\": \"R$ 0,75\"\n        }\n    ],\n    \"bank_slip\": {\n        \"digitable_line\": \"00000000000000000000000000000000000000000000000\",\n        \"barcode_data\": \"00000000000000000000000000000000000000000000\",\n        \"barcode\": \"http://iugu.com/invoices/barcode/0958d2aa-d340-49ab-8895-83e26dfa0bf1-2f4c\"\n    },\n    \"items\": [{\n        \"id\": \"11DA8B1662EC4C30BC4C78AEDC619145\",\n        \"description\": \"Item Um\",\n        \"price_cents\": 1000,\n        \"quantity\": 1,\n        \"created_at\": \"2014-06-17T09:58:05-03:00\",\n        \"updated_at\": \"2014-06-17T09:58:05-03:00\",\n        \"price\": \"R$ 10,00\"\n    }],\n    \"variables\": [{\n        \"id\": \"A897DD8BB6B54AE18CA4C48684E72FB9\",\n        \"variable\": \"payment_data.transaction_number\",\n        \"value\": \"1111\"\n    }],\n    \"custom_variables\": [],\n    \"logs\": []\n}\nAlterar uma Fatura\n\nAltera os dados de uma Fatura, quaisquer par\u00e2metros n\u00e3o informados n\u00e3o ser\u00e3o alterados. A Fatura pode ser alterada completamente se estiver com status de Rascunho. Caso esteja Pendente, somente logs podem ser alterados. Canceladas e Pagas n\u00e3o podem ser alteradas.\n\n\nDefini\u00e7\u00e3o\n\nPUT https://api.iugu.com/v1/invoices/ID_DA_FATURA\n\n\nPar\u00e2metros\n\n\n  \n\n\nPar\u00e2metros: items\n\n\n  \n\n\nPar\u00e2metros: logs\n\n\n  \n\n\nPar\u00e2metros: custom_variables\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl -X PUT https://api.iugu.com/v1/invoices/0CCB984509034569A9A688F302B1FB35 \\\n  -u seuApiToken: \\\n  -d \"due_date=30/12/2013\"\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\ninvoice = Iugu::Invoice.fetch(\"20E8843F7DC7478B944DB5FE908B9189\")\ninvoice.status = \"pending\"\ninvoice.save\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$invoice = Iugu_Invoice::fetch(\"AE27126C4B8A4C79859B29CD210BA58F\");\n$invoice->status = \"pending\";\n$invoice->save();\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"0958D2AAD34049AB889583E26DFA0BF1\",\n    \"due_date\": \"2013-11-30\",\n    \"currency\": \"BRL\",\n    \"discount_cents\": null,\n    \"email\": \"teste@teste.com\",\n    \"items_total_cents\": 1000,\n    \"notification_url\": null,\n    \"return_url\": null,\n    \"status\": \"draft\",\n    \"tax_cents\": null,\n    \"updated_at\": \"2014-06-17T09:58:05-03:00\",\n    \"total_cents\": 1000,\n    \"paid_at\": null,\n    \"commission_cents\": null,\n    \"secure_id\": \"0958d2aa-d340-49ab-8895-83e26dfa0bf1-2f4c\",\n    \"secure_url\": \"http://iugu.com/invoices/0958d2aa-d340-49ab-8895-83e26dfa0bf1-2f4c\",\n    \"customer_id\": null,\n    \"user_id\": null,\n    \"total\": \"R$ 10,00\",\n    \"taxes_paid\": \"R$ 0,00\",\n    \"commission\": \"R$ 0,00\",\n    \"interest\": null,\n    \"discount\": null,\n    \"created_at\": \"17/06, 09:58 h\",\n    \"refundable\": null,\n    \"installments\": null,\n    \"bank_slip\": {\n        \"digitable_line\": \"00000000000000000000000000000000000000000000000\",\n        \"barcode_data\": \"00000000000000000000000000000000000000000000\",\n        \"barcode\": \"http://iugu.com/invoices/barcode/0958d2aa-d340-49ab-8895-83e26dfa0bf1-2f4c\"\n    },\n    \"items\": [{\n        \"id\": \"11DA8B1662EC4C30BC4C78AEDC619145\",\n        \"description\": \"Item Um\",\n        \"price_cents\": 1000,\n        \"quantity\": 1,\n        \"created_at\": \"2014-06-17T09:58:05-03:00\",\n        \"updated_at\": \"2014-06-17T09:58:05-03:00\",\n        \"price\": \"R$ 10,00\"\n    }],\n    \"variables\": [{\n        \"id\": \"A897DD8BB6B54AE18CA4C48684E72FB9\",\n        \"variable\": \"payment_data.transaction_number\",\n        \"value\": \"1111\"\n    }],\n    \"custom_variables\": [],\n    \"logs\": []\n}\nCapturar uma Fatura\n\nCaptura uma fatura com estado 'Em An\u00e1lise'.\n\n\nDefini\u00e7\u00e3o\n\nPOST https://api.iugu.com/v1/invoices/ID_DA_FATURA/capture\n\n\nPar\u00e2metros\n\nN\u00e3o h\u00e1 par\u00e2metros\n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/invoices/5A4CBC68F7A647ECADD59D4E1B4B0DDF/capture \n   -u seuApiToken:\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"5A4CBC68F7A647ECADD59D4E1B4B0DDF\",\n    \"due_date\": \"2015-04-07\",\n    \"currency\": \"BRL\",\n    \"discount_cents\": null,\n    \"email\": \"email@email.com\",\n    \"items_total_cents\": 15000,\n    \"notification_url\": null,\n    \"return_url\": null,\n    \"status\": \"paid\",\n    \"tax_cents\": null,\n    \"updated_at\": \"2015-04-08T11:06:43-03:00\",\n    \"total_cents\": 15000,\n    \"paid_at\": \"2015-04-08T11:06:43-03:00\",\n    \"taxes_paid_cents\": 705,\n    \"paid_cents\": 15000,\n    \"cc_emails\": null,\n    \"financial_return_date\": \"2015-05-08\",\n    \"payable_with\": \"all\",\n    \"commission_cents\": 0,\n    \"secure_id\": \"5a4cbc68-f7a6-47ec-add5-9d4e1b4b0ddf-1342\",\n    \"secure_url\": \"http://iugu.com/invoices/5a4cbc68-f7a6-47ec-add5-9d4e1b4b0ddf-1342\",\n    \"commission\": \"R$ 0,00\",\n    \"customer_id\": \"8747577C7C044D38B837844C751D2DCA\",\n    \"customer_ref\": \"Nome do Cliente\",\n    \"customer_name\": \"Nome do Cliente\",\n    \"financial_return_dates\": [\n        {\n            \"installment\": 1,\n            \"return_date\": \"2015-05-08\",\n            \"status\": \"pending\"\n        }\n    ],\n    \"user_id\": \"B733FEEDF4774F3A8EA33BF3682D532F\",\n    \"total\": \"R$ 150,00\",\n    \"taxes_paid\": \"R$ 7,05\",\n    \"fines_on_occurrence_day\": \"R$ 0,00\",\n    \"total_on_occurrence_day\": \"R$ 150,00\",\n    \"fines_on_occurrence_day_cents\": 0,\n    \"total_on_occurrence_day_cents\": 15000,\n    \"advance_fee\": null,\n    \"paid\": \"R$ 150,00\",\n    \"interest\": null,\n    \"discount\": null,\n    \"created_at\": \"07/04, 15:09 h\",\n    \"refundable\": true,\n    \"installments\": \"1\",\n    \"transaction_number\": 50019,\n    \"created_at_iso\": \"2015-04-07T15:09:56-03:00\",\n    \"updated_at_iso\": \"2015-04-08T11:06:43-03:00\",\n    \"bank_slip\": null,\n    \"items\": [\n        {\n            \"id\": \"E0174FC31EB94E84A106F7A6F9AE2B6E\",\n            \"description\": \"Item 1\",\n            \"price_cents\": 15000,\n            \"quantity\": 1,\n            \"created_at\": \"2015-04-07T15:09:56-03:00\",\n            \"updated_at\": \"2015-04-07T15:09:56-03:00\",\n            \"price\": \"R$ 150,00\"\n        }\n    ],\n    \"variables\": [\n        {\n            \"id\": \"A8C555AF7A6C43EFAF16C8AF26E20FDE\",\n            \"variable\": \"payment_data.transaction_number\",\n            \"value\": \"50019\"\n        }\n    ],\n    \"custom_variables\": [],\n    \"logs\": []\n}\nRemover uma Fatura\n\nRemove uma Fatura permanentemente.\n\n\nDefini\u00e7\u00e3o\n\nDELETE https://api.iugu.com/v1/invoices/ID_DA_FATURA\n\n\nPar\u00e2metros\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl -X DELETE https://api.iugu.com/v1/invoices/0CCB984509034569A9A688F302B1FB35 \\\n  -u seuApiToken:\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\ninvoice = Iugu::Invoice.fetch(\"20E8843F7DC7478B944DB5FE908B9189\")\ninvoice.delete\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$invoice = Iugu_Invoice::fetch(\"AE27126C4B8A4C79859B29CD210BA58F\");\n$invoice->delete();\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"0958D2AAD34049AB889583E26DFA0BF1\",\n    \"due_date\": \"2013-11-30\",\n    \"currency\": \"BRL\",\n    \"discount_cents\": null,\n    \"email\": \"teste@teste.com\",\n    \"items_total_cents\": 1000,\n    \"notification_url\": null,\n    \"return_url\": null,\n    \"status\": \"pending\",\n    \"tax_cents\": null,\n    \"updated_at\": \"2014-06-17T09:58:05-03:00\",\n    \"total_cents\": 1000,\n    \"paid_at\": null,\n    \"commission_cents\": null,\n    \"secure_id\": \"0958d2aa-d340-49ab-8895-83e26dfa0bf1-2f4c\",\n    \"secure_url\": \"http://iugu.com/invoices/0958d2aa-d340-49ab-8895-83e26dfa0bf1-2f4c\",\n    \"customer_id\": null,\n    \"user_id\": null,\n    \"total\": \"R$ 10,00\",\n    \"taxes_paid\": \"R$ 0,00\",\n    \"commission\": \"R$ 0,00\",\n    \"interest\": null,\n    \"discount\": null,\n    \"created_at\": \"17/06, 09:58 h\",\n    \"refundable\": null,\n    \"installments\": null,\n    \"bank_slip\": {\n        \"digitable_line\": \"00000000000000000000000000000000000000000000000\",\n        \"barcode_data\": \"00000000000000000000000000000000000000000000\",\n        \"barcode\": \"http://iugu.com/invoices/barcode/0958d2aa-d340-49ab-8895-83e26dfa0bf1-2f4c\"\n    },\n    \"items\": [{\n        \"id\": \"11DA8B1662EC4C30BC4C78AEDC619145\",\n        \"description\": \"Item Um\",\n        \"price_cents\": 1000,\n        \"quantity\": 1,\n        \"created_at\": \"2014-06-17T09:58:05-03:00\",\n        \"updated_at\": \"2014-06-17T09:58:05-03:00\",\n        \"price\": \"R$ 10,00\"\n    }],\n    \"variables\": [{\n        \"id\": \"A897DD8BB6B54AE18CA4C48684E72FB9\",\n        \"variable\": \"payment_data.transaction_number\",\n        \"value\": \"1111\"\n    }],\n    \"custom_variables\": [],\n    \"logs\": []\n}\nCancelar uma Fatura\n\nCancela uma Fatura.\n\n\nDefini\u00e7\u00e3o\n\nPUT https://api.iugu.com/v1/invoices/ID_DA_FATURA/cancel\n\n\nPar\u00e2metros\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl -X PUT https://api.iugu.com/v1/invoices/0CCB984509034569A9A688F302B1FB35/cancel \\\n  -u seuApiToken:\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\ninvoice = Iugu::Invoice.fetch(\"20E8843F7DC7478B944DB5FE908B9189\")\ninvoice.cancel\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$invoice = Iugu_Invoice::fetch(\"AE27126C4B8A4C79859B29CD210BA58F\");\n$invoice->cancel();\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"0958D2AAD34049AB889583E26DFA0BF1\",\n    \"due_date\": \"2013-11-30\",\n    \"currency\": \"BRL\",\n    \"discount_cents\": null,\n    \"email\": \"teste@teste.com\",\n    \"items_total_cents\": 1000,\n    \"notification_url\": null,\n    \"return_url\": null,\n    \"status\": \"canceled\",\n    \"tax_cents\": null,\n    \"updated_at\": \"2014-06-17T09:58:05-03:00\",\n    \"total_cents\": 1000,\n    \"paid_at\": null,\n    \"commission_cents\": null,\n    \"secure_id\": \"0958d2aa-d340-49ab-8895-83e26dfa0bf1-2f4c\",\n    \"secure_url\": \"http://iugu.com/invoices/0958d2aa-d340-49ab-8895-83e26dfa0bf1-2f4c\",\n    \"customer_id\": null,\n    \"user_id\": null,\n    \"total\": \"R$ 10,00\",\n    \"taxes_paid\": \"R$ 0,00\",\n    \"commission\": \"R$ 0,00\",\n    \"interest\": null,\n    \"discount\": null,\n    \"created_at\": \"17/06, 09:58 h\",\n    \"refundable\": null,\n    \"installments\": null,\n    \"bank_slip\": {\n        \"digitable_line\": \"00000000000000000000000000000000000000000000000\",\n        \"barcode_data\": \"00000000000000000000000000000000000000000000\",\n        \"barcode\": \"http://iugu.com/invoices/barcode/0958d2aa-d340-49ab-8895-83e26dfa0bf1-2f4c\"\n    },\n    \"items\": [{\n        \"id\": \"11DA8B1662EC4C30BC4C78AEDC619145\",\n        \"description\": \"Item Um\",\n        \"price_cents\": 1000,\n        \"quantity\": 1,\n        \"created_at\": \"2014-06-17T09:58:05-03:00\",\n        \"updated_at\": \"2014-06-17T09:58:05-03:00\",\n        \"price\": \"R$ 10,00\"\n    }],\n    \"variables\": [{\n        \"id\": \"A897DD8BB6B54AE18CA4C48684E72FB9\",\n        \"variable\": \"payment_data.transaction_number\",\n        \"value\": \"1111\"\n    }],\n    \"custom_variables\": [],\n    \"logs\": []\n}\nReembolsar uma Fatura\n\nEfetua o reembolso de uma Fatura. Somente alguns meios de pagamento permitem o reembolso, como por exemplo o Cart\u00e3o de Cr\u00e9dito. Ap\u00f3s o reembolso, a Fatura fica com o status de refunded.\n\n\nDefini\u00e7\u00e3o\n\nPOST https://api.iugu.com/v1/invoices/ID_DA_FATURA/refund\n\n\nPar\u00e2metros\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl -X POST https://api.iugu.com/v1/invoices/0CCB984509034569A9A688F302B1FB35/refund \\\n  -u seuApiToken:\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\ninvoice = Iugu::Invoice.fetch(\"20E8843F7DC7478B944DB5FE908B9189\")\ninvoice.refund\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$invoice = Iugu_Invoice::fetch(\"AE27126C4B8A4C79859B29CD210BA58F\");\n$invoice->refund();\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"0958D2AAD34049AB889583E26DFA0BF1\",\n    \"due_date\": \"2013-11-30\",\n    \"currency\": \"BRL\",\n    \"discount_cents\": null,\n    \"email\": \"teste@teste.com\",\n    \"items_total_cents\": 1000,\n    \"notification_url\": null,\n    \"return_url\": null,\n    \"status\": \"refunded\",\n    \"tax_cents\": null,\n    \"updated_at\": \"2014-06-17T09:58:05-03:00\",\n    \"total_cents\": 1000,\n    \"paid_at\": null,\n    \"commission_cents\": 0,\n    \"secure_id\": \"0958d2aa-d340-49ab-8895-83e26dfa0bf1-2f4c\",\n    \"secure_url\": \"http://iugu.com/invoices/0958d2aa-d340-49ab-8895-83e26dfa0bf1-2f4c\",\n    \"customer_id\": null,\n    \"user_id\": null,\n    \"total\": \"R$ 10,00\",\n    \"taxes_paid\": \"R$ 0,00\",\n    \"commission\": \"R$ 0,00\",\n    \"interest\": null,\n    \"discount\": null,\n    \"created_at\": \"17/06, 09:58 h\",\n    \"refundable\": null,\n    \"installments\": null,\n    \"bank_slip\": {\n        \"digitable_line\": \"00000000000000000000000000000000000000000000000\",\n        \"barcode_data\": \"00000000000000000000000000000000000000000000\",\n        \"barcode\": \"http://iugu.com/invoices/barcode/0958d2aa-d340-49ab-8895-83e26dfa0bf1-2f4c\"\n    },\n    \"items\": [{\n        \"id\": \"11DA8B1662EC4C30BC4C78AEDC619145\",\n        \"description\": \"Item Um\",\n        \"price_cents\": 1000,\n        \"quantity\": 1,\n        \"created_at\": \"2014-06-17T09:58:05-03:00\",\n        \"updated_at\": \"2014-06-17T09:58:05-03:00\",\n        \"price\": \"R$ 10,00\"\n    }],\n    \"variables\": [{\n        \"id\": \"A897DD8BB6B54AE18CA4C48684E72FB9\",\n        \"variable\": \"payment_data.transaction_number\",\n        \"value\": \"1111\"\n    }],\n    \"custom_variables\": [],\n    \"logs\": []\n}\nSegunda via de Fatura\n\nGera segunda via de uma Fatura. Somente faturas pendentes podem ter segunda via gerada. A fatura atual \u00e9 cancelada e uma nova \u00e9 gerada com status \u2018pending\u2019.\n\n\nDefini\u00e7\u00e3o\n\nPOST https://api.iugu.com/v1/invoices/ID_DA_FATURA/duplicate\n\n\nPar\u00e2metros\n\n\n  \n\n\nPar\u00e2metros: items\n\n\n  \n\n\nExemplos para items[]\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/invoices/856856F5ADA144F68DA6E5DBEF870434/duplicate \n  -u seuApiToken: \n  -d \"due_date=30/12/2015\" \n  -d \"ignore_canceled_email=true\" \n  -d \"items[][description]=Item Novo\" \n  -d \"items[][quantity]=1\" \n  -d \"items[][price_cents]=1000\"\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"856856F5ADA144F68DA6E5DBEF870434\",\n    \"due_date\": \"2015-12-30\",\n    \"currency\": \"BRL\",\n    \"discount_cents\": null,\n    \"email\": \"email@email.com\",\n    \"items_total_cents\": 6000,\n    \"notification_url\": null,\n    \"return_url\": null,\n    \"status\": \"pending\",\n    \"tax_cents\": null,\n    \"updated_at\": \"2015-11-26T10:41:19-02:00\",\n    \"total_cents\": 6000,\n    \"total_paid_cents\": 0,\n    \"paid_at\": null,\n    \"commission_cents\": null,\n    \"taxes_paid_cents\": null,\n    \"paid_cents\": null,\n    \"cc_emails\": null,\n    \"financial_return_date\": null,\n    \"payable_with\": \"all\",\n    \"overpaid_cents\": null,\n    \"ignore_due_email\": false,\n    \"ignore_canceled_email\": null,\n    \"secure_id\": \"856856f5-ada1-44f6-8da6-e5dbef870434-fe5d\",\n    \"secure_url\": \"https://iugu.com/invoices/856856f5-ada1-44f6-8da6-e5dbef870434-fe5d\",\n    \"customer_id\": null,\n    \"customer_ref\": null,\n    \"customer_name\": null,\n    \"user_id\": null,\n    \"total\": \"R$ 60,00\",\n    \"taxes_paid\": \"R$ 0,00\",\n    \"total_paid\": \"R$ 0,00\",\n    \"total_overpaid\": \"R$ 0,00\",\n    \"fines_on_occurrence_day\": null,\n    \"total_on_occurrence_day\": null,\n    \"fines_on_occurrence_day_cents\": null,\n    \"total_on_occurrence_day_cents\": null,\n    \"advance_fee\": null,\n    \"paid\": \"R$ 0,00\",\n    \"commission\": \"R$ 0,00\",\n    \"interest\": null,\n    \"discount\": null,\n    \"created_at\": \"26/11, 10:41 h\",\n    \"refundable\": null,\n    \"installments\": null,\n    \"transaction_number\": 50053,\n    \"payment_method\": null,\n    \"created_at_iso\": \"2015-11-26T10:41:19-02:00\",\n    \"updated_at_iso\": \"2015-11-26T10:41:19-02:00\",\n    \"financial_return_dates\": null,\n    \"bank_slip\": {\n        \"digitable_line\": \"23793.38128 50000.005004 53000.050806 1 66580000006000\",\n        \"barcode_data\": \"23791665800000060003381250000005005300005080\",\n        \"barcode\": \"https://iugu.com/invoices/barcode/856856f5-ada1-44f6-8da6-e5dbef870434-fe5d\"\n    },\n    \"items\": [\n        {\n            \"id\": \"6FEE1E9B576D4D8DBB7A1CE5AFB5CFCC\",\n            \"description\": \"Item Novo\",\n            \"price_cents\": 1000,\n            \"quantity\": 1,\n            \"created_at\": \"2015-11-26T10:41:19-02:00\",\n            \"updated_at\": \"2015-11-26T10:41:19-02:00\",\n            \"price\": \"R$ 10,00\"\n        },\n        {\n            \"id\": \"F6AB80CCA459434E980F59846C948B2C\",\n            \"description\": \"Item 1\",\n            \"price_cents\": 5000,\n            \"quantity\": 1,\n            \"created_at\": \"2015-11-26T10:41:19-02:00\",\n            \"updated_at\": \"2015-11-26T10:41:19-02:00\",\n            \"price\": \"R$ 50,00\"\n        }\n    ],\n    \"variables\": [\n        {\n            \"id\": \"82139DD9E6704A369AEA0C7F50335EA9\",\n            \"variable\": \"payment_data.transaction_number\",\n            \"value\": \"1111\"\n        }\n    ],\n    \"custom_variables\": [],\n    \"logs\": [\n        {\n            \"id\": \"DF6A3748D2024E60A15189196264070A\",\n            \"description\": \"Segunda via gerada\",\n            \"notes\": \"Segunda via gerada da FATURA # 3062A45BC5C240C685C5D6A2B4C78668\",\n            \"created_at\": \"26/11, 10:41 h\"\n        }\n    ]\n}\n\nListar as Faturas\n\nRetorna uma lista com todas as faturas em sua conta ordenadas pela data de Cria\u00e7\u00e3o, sendo a primeira a que foi criada mais recentemente. O campo totalItems cont\u00e9m sempre a quantidade de faturas cadastradas, independente dos par\u00e2metros de pesquisa utilizados e o resultado da pesquisa fica sempre dentro de items.\n\nUtilizamos o elasticsearch para as pesquisas, por isso retornamos tamb\u00e9m a lista de facetas no n\u00f3 facets. Mais informa\u00e7\u00f5es sobre facets\n\n\nDefini\u00e7\u00e3o\n\nGET https://api.iugu.com/v1/invoices\n\n\nPar\u00e2metros\n\n\n\n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/invoices \n  -u seuApiToken:\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\ninvoices = Iugu::Invoice.search.results\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$invoices = Iugu_Invoice::search()->results();\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"facets\": {\n        \"status\": {\n            \"_type\": \"terms\",\n            \"missing\": 0,\n            \"total\": 2,\n            \"other\": 0,\n            \"terms\": [\n                {\n                    \"term\": \"paid\",\n                    \"count\": 1\n                },\n                {\n                    \"term\": \"pending\",\n                    \"count\": 1\n                }\n            ]\n        }\n    },\n    \"totalItems\": 2,\n    \"items\": [\n        {\n            \"id\": \"E607FCCD119E45C59336DB78B54CF771\",\n            \"due_date\": \"2013-11-30\",\n            \"currency\": \"BRL\",\n            \"customer_id\": null,\n            \"discount_cents\": null,\n            \"email\": \"teste@teste.com\",\n            \"expiration_url\": null,\n            \"notification_url\": null,\n            \"return_url\": null,\n            \"status\": \"pending\",\n            \"tax_cents\": null,\n            \"updated_at\": \"2013-11-18T14:58:23-02:00\",\n            \"total_cents\": 1000,\n            \"commission_cents\": null,\n            \"secure_id\": \"e607fccd-119e-45c5-9336-db78b54cf771-314d\",\n            \"secure_url\": \"https://iugu.com/invoices/e607fccd-119e-45c5-9336-db78b54cf771-314d\",\n            \"user_id\": null,\n            \"commission\": \"R$ 0,00\",\n            \"total\": \"R$ 10,00\",\n            \"created_at\": \"18 Nov 14:58\",\n            \"items\": [\n                {\n                    \"id\": \"0E9E83C2E8B14AF0ADB2F5F6E97265AA\",\n                    \"description\": \"Item Um\",\n                    \"price_cents\": 1000,\n                    \"quantity\": 1,\n                    \"created_at\": \"2013-11-18T14:58:23-02:00\",\n                    \"updated_at\": \"2013-11-18T14:58:23-02:00\",\n                    \"price\": \"R$ 10,00\"\n                }\n            ],\n            \"variables\": [],\n            \"logs\": []\n        },\n        {\n            \"id\": \"F47FE578806747FE8FF71C1521934E81\",\n            \"due_date\": \"2013-10-24\",\n            \"currency\": \"BRL\",\n            \"customer_id\": \"32ce45d8-b42b-4aee-a3d1-a1d9227e1790\",\n            \"discount_cents\": null,\n            \"email\": \"teste@gmail.com\",\n            \"expiration_url\": null,\n            \"notification_url\": null,\n            \"return_url\": null,\n            \"status\": \"paid\",\n            \"tax_cents\": null,\n            \"updated_at\": \"2013-10-24T14:21:26-02:00\",\n            \"total_cents\": 200,\n            \"commission_cents\": 0,\n            \"secure_id\": \"f47fe578-8067-47fe-8ff7-1c1521934e81-3280\",\n            \"secure_url\": \"https://iugu.com/invoices/f47fe578-8067-47fe-8ff7-1c1521934e81-3280\",\n            \"commission\": \"R$ 0,00\",\n            \"user_id\": null,\n            \"total\": \"R$ 2,00\",\n            \"created_at\": \"24 Oct 14:21\",\n            \"items\": [\n                {\n                    \"id\": \"FBDBAF5E259C492C98E6C2CB493777F7\",\n                    \"description\": \"Subscription Activation: plan1\",\n                    \"price_cents\": 200,\n                    \"quantity\": 1,\n                    \"created_at\": \"2013-10-24T14:21:26-02:00\",\n                    \"updated_at\": \"2013-10-24T14:21:26-02:00\",\n                    \"price\": \"R$ 2,00\"\n                }\n            ],\n            \"variables\": [],\n            \"logs\": []\n        }\n    ]\n}\n\nPlanos\n\nCriar um Plano\n\nCria um Plano.\n\n\nDefini\u00e7\u00e3o\n\nPOST https://api.iugu.com/v1/plans\n\n\nPar\u00e2metros\n\n\n  \n\n\nPar\u00e2metros: prices\n\n\n  \n\n\nPar\u00e2metros: features\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/plans \\\n  -u seuApiToken: \\\n  -d \"name=Plano B\u00e1sico\" \\\n  -d \"identifier=basic_plan\" \\\n  -d \"interval=1\" \\\n  -d \"interval_type=months\" \\\n  -d \"currency=BRL\" \\\n  -d \"value_cents=1000\" \\\n  -d \"features[][name]=N\u00famero de Usu\u00e1rios\" \\\n  -d \"features[][identifier]=users\" \\\n  -d \"features[][value]=10\"\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"593C92165AF44493B65DE17A216C76D6\",\n    \"name\": \"Plano B\u00e1sico\",\n    \"identifier\": \"basic_plan\",\n    \"interval\": 1,\n    \"interval_type\": \"months\",\n    \"created_at\": \"2014-04-23T17:14:15-03:00\",\n    \"updated_at\": \"2014-04-23T17:14:15-03:00\",\n    \"prices\": [{\n        \"created_at\": \"2014-04-23T17:14:15-03:00\",\n        \"currency\": \"BRL\",\n        \"id\": \"F465EE77AC424DA2B075133C96FF10CA\",\n        \"plan_id\": \"593C92165AF44493B65DE17A216C76D6\",\n        \"updated_at\": \"2014-04-23T17:14:15-03:00\",\n        \"value_cents\": 1000\n    }],\n    \"features\": [{\n        \"created_at\": \"2014-04-23T17:14:15-03:00\",\n        \"id\": \"6101C66D06564E3DB834BCE235A587A6\",\n        \"identifier\": \"users\",\n        \"important\": null,\n        \"name\": \"N\u00famero de Usu\u00e1rios\",\n        \"plan_id\": \"593C92165AF44493B65DE17A216C76D6\",\n        \"position\": 1,\n        \"updated_at\": \"2014-04-23T17:14:15-03:00\",\n        \"value\": 10\n    }]\n}\nBuscar um Plano\n\nRetorna os dados de um Plano.\n\n\nDefini\u00e7\u00e3o\n\nGET https://api.iugu.com/v1/plans/ID_DO_PLANO\n\n\nPar\u00e2metros\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/plans/593C92165AF44493B65DE17A216C76D6 \\\n  -u seuApiToken:\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"593C92165AF44493B65DE17A216C76D6\",\n    \"name\": \"Plano B\u00e1sico\",\n    \"identifier\": \"basic_plan\",\n    \"interval\": 1,\n    \"interval_type\": \"months\",\n    \"created_at\": \"2014-04-23T17:14:15-03:00\",\n    \"updated_at\": \"2014-04-23T17:14:15-03:00\",\n    \"prices\": [{\n        \"created_at\": \"2014-04-23T17:14:15-03:00\",\n        \"currency\": \"BRL\",\n        \"id\": \"F465EE77AC424DA2B075133C96FF10CA\",\n        \"plan_id\": \"593C92165AF44493B65DE17A216C76D6\",\n        \"updated_at\": \"2014-04-23T17:14:15-03:00\",\n        \"value_cents\": 1000\n    }],\n    \"features\": [{\n        \"created_at\": \"2014-04-23T17:14:15-03:00\",\n        \"id\": \"6101C66D06564E3DB834BCE235A587A6\",\n        \"identifier\": \"users\",\n        \"important\": null,\n        \"name\": \"N\u00famero de Usu\u00e1rios\",\n        \"plan_id\": \"593C92165AF44493B65DE17A216C76D6\",\n        \"position\": 1,\n        \"updated_at\": \"2014-04-23T17:14:15-03:00\",\n        \"value\": 10\n    }]\n}\nBuscar um Plano pelo Identificador\n\nRetorna os dados de um Plano utilizando um Identificador.\n\n\nDefini\u00e7\u00e3o\n\nGET https://api.iugu.com/v1/plans/identifier/IDENTIFICADOR_DO_PLANO\n\n\nPar\u00e2metros\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/plans/identifier/basic_plan \\\n  -u seuApiToken:\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"593C92165AF44493B65DE17A216C76D6\",\n    \"name\": \"Plano B\u00e1sico\",\n    \"identifier\": \"basic_plan\",\n    \"interval\": 1,\n    \"interval_type\": \"months\",\n    \"created_at\": \"2014-04-23T17:14:15-03:00\",\n    \"updated_at\": \"2014-04-23T17:14:15-03:00\",\n    \"prices\": [{\n        \"created_at\": \"2014-04-23T17:14:15-03:00\",\n        \"currency\": \"BRL\",\n        \"id\": \"F465EE77AC424DA2B075133C96FF10CA\",\n        \"plan_id\": \"593C92165AF44493B65DE17A216C76D6\",\n        \"updated_at\": \"2014-04-23T17:14:15-03:00\",\n        \"value_cents\": 1000\n    }],\n    \"features\": [{\n        \"created_at\": \"2014-04-23T17:14:15-03:00\",\n        \"id\": \"6101C66D06564E3DB834BCE235A587A6\",\n        \"identifier\": \"users\",\n        \"important\": null,\n        \"name\": \"N\u00famero de Usu\u00e1rios\",\n        \"plan_id\": \"593C92165AF44493B65DE17A216C76D6\",\n        \"position\": 1,\n        \"updated_at\": \"2014-04-23T17:14:15-03:00\",\n        \"value\": 10\n    }]\n}\nAlterar um Plano\n\nAltera os dados de um Plano, quaisquer par\u00e2metros n\u00e3o informados n\u00e3o ser\u00e3o alterados. As altera\u00e7\u00f5es n\u00e3o ir\u00e3o mudar as Assinaturas que j\u00e1 utilizam o Plano, mas s\u00f3 as novas.\n\n\nDefini\u00e7\u00e3o\n\nPUT https://api.iugu.com/v1/plans/ID_DO_PLANO\n\n\nPar\u00e2metros\n\n\n  \n\n\nPar\u00e2metros: prices\n\n\n  \n\n\nPar\u00e2metros: features\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl -X PUT https://api.iugu.com/v1/plans/593C92165AF44493B65DE17A216C76D6 \n  -u seuApiToken: \n  -d \"name=Novo Plano B\u00e1sico\"\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"593C92165AF44493B65DE17A216C76D6\",\n    \"name\": \"Plano B\u00e1sico\",\n    \"identifier\": \"basic_plan_new\",\n    \"interval\": 1,\n    \"interval_type\": \"months\",\n    \"created_at\": \"2014-04-23T17:14:15-03:00\",\n    \"updated_at\": \"2014-04-23T17:14:15-03:00\",\n    \"prices\": [{\n        \"created_at\": \"2014-04-23T17:14:15-03:00\",\n        \"currency\": \"BRL\",\n        \"id\": \"F465EE77AC424DA2B075133C96FF10CA\",\n        \"plan_id\": \"593C92165AF44493B65DE17A216C76D6\",\n        \"updated_at\": \"2014-04-23T17:14:15-03:00\",\n        \"value_cents\": 1000\n    }],\n    \"features\": [{\n        \"created_at\": \"2014-04-23T17:14:15-03:00\",\n        \"id\": \"6101C66D06564E3DB834BCE235A587A6\",\n        \"identifier\": \"users\",\n        \"important\": null,\n        \"name\": \"N\u00famero de Usu\u00e1rios\",\n        \"plan_id\": \"593C92165AF44493B65DE17A216C76D6\",\n        \"position\": 1,\n        \"updated_at\": \"2014-04-23T17:14:15-03:00\",\n        \"value\": 10\n    }]\n}\nRemover um Plano\n\nRemove um Plano permanentemente.\n\n\nDefini\u00e7\u00e3o\n\nDELETE https://api.iugu.com/v1/plans/ID_DO_PLANO\n\n\nPar\u00e2metros\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl -X DELETE https://api.iugu.com/v1/plans/593C92165AF44493B65DE17A216C76D6 \\\n  -u seuApiToken:\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"593C92165AF44493B65DE17A216C76D6\",\n    \"name\": \"Plano B\u00e1sico\",\n    \"identifier\": \"basic_plan\",\n    \"interval\": 1,\n    \"interval_type\": \"months\",\n    \"created_at\": \"2014-04-23T17:14:15-03:00\",\n    \"updated_at\": \"2014-04-23T17:14:15-03:00\",\n    \"prices\": [{\n        \"created_at\": \"2014-04-23T17:14:15-03:00\",\n        \"currency\": \"BRL\",\n        \"id\": \"F465EE77AC424DA2B075133C96FF10CA\",\n        \"plan_id\": \"593C92165AF44493B65DE17A216C76D6\",\n        \"updated_at\": \"2014-04-23T17:14:15-03:00\",\n        \"value_cents\": 1000\n    }],\n    \"features\": [{\n        \"created_at\": \"2014-04-23T17:14:15-03:00\",\n        \"id\": \"6101C66D06564E3DB834BCE235A587A6\",\n        \"identifier\": \"users\",\n        \"important\": null,\n        \"name\": \"N\u00famero de Usu\u00e1rios\",\n        \"plan_id\": \"593C92165AF44493B65DE17A216C76D6\",\n        \"position\": 1,\n        \"updated_at\": \"2014-04-23T17:14:15-03:00\",\n        \"value\": 10\n    }]\n}\nListar os Planos\n\nRetorna uma lista com todos os planos em sua conta ordenadas pela data de Cria\u00e7\u00e3o, sendo o primeiro o criado mais recentemente. O campo totalItems cont\u00e9m sempre a quantidade de planos cadastrados, independente dos par\u00e2metros de pesquisa utilizados e o resultado da pesquisa fica sempre dentro de items.\n\n\nDefini\u00e7\u00e3o\n\nGET https://api.iugu.com/v1/plans\n\n\nPar\u00e2metros\n\n\n\n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/plans \\\n  -u seuApiToken:\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"totalItems\": 1,\n    \"items\": [{\n        \"id\": \"593C92165AF44493B65DE17A216C76D6\",\n        \"name\": \"Plano B\u00e1sico\",\n        \"identifier\": \"basic_plan\",\n        \"interval\": 1,\n        \"interval_type\": \"months\",\n        \"created_at\": \"2014-04-23T17:14:15-03:00\",\n        \"updated_at\": \"2014-04-23T17:19:46-03:00\",\n        \"prices\": [{\n            \"created_at\": \"2014-04-23T17:14:15-03:00\",\n            \"currency\": \"BRL\",\n            \"id\": \"F465EE77AC424DA2B075133C96FF10CA\",\n            \"updated_at\": \"2014-04-23T17:14:15-03:00\",\n            \"value_cents\": 1000\n        }]\n    }]\n}\n\nAssinaturas\n\nAs assinaturas s\u00e3o utilizadas para pagamentos recorrentes de um mesmo cliente. Estas utilizam os planos para formar o pre\u00e7o ou ent\u00e3o baseiam-se em cr\u00e9ditos.\n\nCriar uma Assinatura\n\nCria uma Assinatura.\n\n\nDefini\u00e7\u00e3o\n\nPOST https://api.iugu.com/v1/subscriptions\n\n\nPar\u00e2metros\n\n\n  \n\n\nPar\u00e2metros: subitems\n\n\n  \n\n\nPar\u00e2metros: custom_variables\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/subscriptions \\\n    -u seuApiToken: \\\n    -d \"plan_identifier=plano_basico\" \\\n    -d \"customer_id=FF3149CE52CB4A789925F154B489BFDD\" \\\n    -d \"subitems[][description]=Item um\" \\\n    -d \"subitems[][price_cents]=1000\" \\\n    -d \"subitems[][quantity]=1\"\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\nIugu::Subscription.create({\n    plan_identifier: \"plano_basico\",\n    customer_id: \"FF3149CE52CB4A789925F154B489BFDD\",\n    subitems: [{\n        description: \"Item um\",\n        price_cents: \"1000\",\n        quantity: 1\n    }]\n})\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\nIugu_Subscription::create(Array(\n    \"plan_identifier\" => \"plano_basico\",\n    \"customer_id\" => \"FF3149CE52CB4A789925F154B489BFDD\",\n    \"subitems\" => Array(\n        Array(\n            \"description\" => \"Item Um\",\n            \"quantity\" => \"1\",\n            \"price_cents\" => \"1000\"\n        )\n    )\n));\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"ECF36F9AAF374D76A48646EDE8FE806D\",\n    \"suspended\": false,\n    \"plan_identifier\": \"id1\",\n    \"price_cents\": 200,\n    \"currency\": \"BRL\",\n    \"features\": {\n        \"feat\": {\n            \"name\": \"Feature\",\n            \"value\": 0\n        }\n    },\n    \"expires_at\": null,\n    \"created_at\": \"2013-11-19T11:24:29-02:00\",\n    \"updated_at\": \"2013-11-19T11:24:43-02:00\",\n    \"customer_name\": \"Nome do Cliente\",\n    \"customer_email\": \"email@email.com\",\n    \"cycled_at\": null,\n    \"credits_min\": 0,\n    \"credits_cycle\": null,\n    \"customer_id\": \"FF3149CE52CB4A789925F154B489BFDD\",\n    \"plan_name\": \"plan1\",\n    \"customer_ref\": \"Nome do Cliente\",\n    \"plan_ref\": \"plan1\",\n    \"active\": true,\n    \"in_trial\": null,\n    \"credits\": 0,\n    \"credits_based\": false,\n    \"recent_invoices\": null,\n    \"subitems\": [{\n        \"id\": \"6D518D88B33F48FEA8964D5573E220D3\",\n        \"description\": \"Item um\",\n        \"quantity\": 1,\n        \"price_cents\": 1000,\n        \"price\": \"R$ 10,00\",\n        \"total\": \"R$ 10,00\"\n    }],\n    \"logs\": [{\n        \"id\": \"477388CC4C024520B552641724A62970\",\n        \"description\": \"Fatura criada\",\n        \"notes\": \"Fatura criada 1x Ativa\u00e7\u00e3o de Assinatura: plan1 = R$ 2,00;1x Item um = R$ 10,00;\",\n        \"created_at\": \"2013-11-19T11:24:43-02:00\"\n    }, {\n        \"id\": \"706436F169CE465B806163964A25400A\",\n        \"description\": \"Assinatura Criada\",\n        \"notes\": \"Assinatura Criada\",\n        \"created_at\": \"2013-11-19T11:24:29-02:00\"\n    }],\n    \"custom_variables\":[]\n}only_on_charge_success true, cliente com forma de pagamento cadastrada e falha no pagamento\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/subscriptions \\\n    -u seuApiToken: \\\n    -d \"plan_identifier=plano_basico\" \\\n    -d \"customer_id=FF3149CE52CB4A789925F154B489BFDD\" \\\n    -d \"only_on_charge_success=true\" \\\n    -d \"subitems[][description]=Servi\u00e7o de Teste\" \\\n    -d \"subitems[][price_cents]=2000\" \\\n    -d \"subitems[][quantity]=1\"\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\nIugu::Subscription.create({\n    plan_identifier: \"plano_basico\",\n    customer_id: \"FF3149CE52CB4A789925F154B489BFDD\",\n    only_on_charge_success: true,\n    subitems: [{\n        description: \"Item um\",\n        price_cents: \"1000\",\n        quantity: 1\n    }]\n})\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\nIugu_Subscription::create(Array(\n    \"plan_identifier\" => \"plano_basico\",\n    \"customer_id\" => \"FF3149CE52CB4A789925F154B489BFDD\",\n    \"only_on_charge_success\" => true,\n    \"subitems\" => Array(\n        Array(\n            \"description\" => \"Servi\u00e7o de Teste\",\n            \"quantity\" => \"1\",\n            \"price_cents\" => \"2000\"\n        )\n    )\n));\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n        \"errors\": \"Falha na cobran\u00e7a\"\n}\nBuscar uma Assinatura\n\nRetorna os dados de uma Assinatura.\n\n\nDefini\u00e7\u00e3o\n\nGET https://api.iugu.com/v1/subscriptions/ID_DA_ASSINATURA\n\n\nPar\u00e2metros\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/subscriptions/ECF36F9AAF374D76A48646EDE8FE806D \\\n    -u seuApiToken:\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\nsubscription = Iugu::Subscription.fetch(\"ECF36F9AAF374D76A48646EDE8FE806D\")\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$subscription = Iugu_Subscription::fetch(\"ECF36F9AAF374D76A48646EDE8FE806D\");\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"ECF36F9AAF374D76A48646EDE8FE806D\",\n    \"suspended\": false,\n    \"plan_identifier\": \"id1\",\n    \"price_cents\": 200,\n    \"currency\": \"BRL\",\n    \"features\": {\n        \"feat\": {\n            \"name\": \"Feature\",\n            \"value\": 0\n        }\n    },\n    \"expires_at\": null,\n    \"created_at\": \"2013-11-19T11:24:29-02:00\",\n    \"updated_at\": \"2013-11-19T11:24:43-02:00\",\n    \"customer_name\": \"Nome do Cliente\",\n    \"customer_email\": \"email@email.com\",\n    \"cycled_at\": null,\n    \"credits_min\": 0,\n    \"credits_cycle\": null,\n    \"customer_id\": \"FF3149CE52CB4A789925F154B489BFDD\",\n    \"plan_name\": \"plan1\",\n    \"customer_ref\": \"Nome do Cliente\",\n    \"plan_ref\": \"plan1\",\n    \"active\": true,\n    \"in_trial\": null,\n    \"credits\": 0,\n    \"credits_based\": false,\n    \"recent_invoices\": null,\n    \"subitems\": [{\n        \"id\": \"6D518D88B33F48FEA8964D5573E220D3\",\n        \"description\": \"Item um\",\n        \"quantity\": 1,\n        \"price_cents\": 1000,\n        \"price\": \"R$ 10,00\",\n        \"total\": \"R$ 10,00\"\n    }],\n    \"logs\": [{\n        \"id\": \"477388CC4C024520B552641724A62970\",\n        \"description\": \"Fatura criada\",\n        \"notes\": \"Fatura criada 1x Ativa\u00e7\u00e3o de Assinatura: plan1 = R$ 2,00;1x Item um = R$ 10,00;\",\n        \"created_at\": \"2013-11-19T11:24:43-02:00\"\n    }, {\n        \"id\": \"706436F169CE465B806163964A25400A\",\n        \"description\": \"Assinatura Criada\",\n        \"notes\": \"Assinatura Criada\",\n        \"created_at\": \"2013-11-19T11:24:29-02:00\"\n    }],\n    \"custom_variables\":[]\n}\nAlterar uma Assinatura\n\nAltera os dados de uma Assinatura, quaisquer par\u00e2metros n\u00e3o informados n\u00e3o ser\u00e3o alterados.\n\n\nDefini\u00e7\u00e3o\n\nPUT https://api.iugu.com/v1/subscriptions/ID_DA_ASSINATURA\n\n\nPar\u00e2metros\n\n\n  \n\n\nPar\u00e2metros: subitems\n\n\n  \n\n\nPar\u00e2metros: custom_variables\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl -X PUT https://api.iugu.com/v1/subscriptions/ECF36F9AAF374D76A48646EDE8FE806D \\\n    -u seuApiToken: \\\n    -d \"suspended=true\"\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\nsubscription = Iugu::Subscription.fetch(\"ECF36F9AAF374D76A48646EDE8FE806D\")\nsubscription.customer_id = \"77C2565F6F064A26ABED4255894224F0\"\nsubscription.save\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$subscription = Iugu_Subscription::fetch(\"ECF36F9AAF374D76A48646EDE8FE806D\");\n$subscription->customer_id = \"77C2565F6F064A26ABED4255894224F0\";\n$subscription->save();\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"ECF36F9AAF374D76A48646EDE8FE806D\",\n    \"suspended\": true,\n    \"plan_identifier\": \"id1\",\n    \"price_cents\": 200,\n    \"currency\": \"BRL\",\n    \"features\": {\n        \"feat\": {\n            \"name\": \"Feature\",\n            \"value\": 0\n        }\n    },\n    \"expires_at\": null,\n    \"created_at\": \"2013-11-19T11:24:29-02:00\",\n    \"updated_at\": \"2013-11-19T11:24:43-02:00\",\n    \"customer_name\": \"Nome do Cliente\",\n    \"customer_email\": \"email@email.com\",\n    \"cycled_at\": null,\n    \"credits_min\": 0,\n    \"credits_cycle\": null,\n    \"customer_id\": \"FF3149CE52CB4A789925F154B489BFDD\",\n    \"plan_name\": \"plan1\",\n    \"customer_ref\": \"Nome do Cliente\",\n    \"plan_ref\": \"plan1\",\n    \"active\": true,\n    \"in_trial\": null,\n    \"credits\": 0,\n    \"credits_based\": false,\n    \"recent_invoices\": null,\n    \"subitems\": [{\n        \"id\": \"6D518D88B33F48FEA8964D5573E220D3\",\n        \"description\": \"Item um\",\n        \"quantity\": 1,\n        \"price_cents\": 1000,\n        \"price\": \"R$ 10,00\",\n        \"total\": \"R$ 10,00\"\n    }],\n    \"logs\": [{\n        \"id\": \"477388CC4C024520B552641724A62970\",\n        \"description\": \"Fatura criada\",\n        \"notes\": \"Fatura criada 1x Ativa\u00e7\u00e3o de Assinatura: plan1 = R$ 2,00;1x Item um = R$ 10,00;\",\n        \"created_at\": \"2013-11-19T11:24:43-02:00\"\n    }, {\n        \"id\": \"706436F169CE465B806163964A25400A\",\n        \"description\": \"Assinatura Criada\",\n        \"notes\": \"Assinatura Criada\",\n        \"created_at\": \"2013-11-19T11:24:29-02:00\"\n    }],\n    \"custom_variables\":[]\n}\nRemover uma Assinatura\n\nRemove uma Assinatura permanentemente.\n\n\nDefini\u00e7\u00e3o\n\nDELETE https://api.iugu.com/v1/subscriptions/ID_DA_ASSINATURA\n\n\nPar\u00e2metros\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl -X DELETE https://api.iugu.com/v1/subscriptions/ECF36F9AAF374D76A48646EDE8FE806D \\\n    -u seuApiToken:\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\nsubscription = Iugu::Subscription.fetch(\"ECF36F9AAF374D76A48646EDE8FE806D\")\n\nsubscription.delete\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$subscription = Iugu_Subscription::fetch(\"ECF36F9AAF374D76A48646EDE8FE806D\");\n$subscription->delete();\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"ECF36F9AAF374D76A48646EDE8FE806D\",\n    \"suspended\": true,\n    \"plan_identifier\": \"id1\",\n    \"price_cents\": 200,\n    \"currency\": \"BRL\",\n    \"features\": {\n        \"feat\": {\n            \"name\": \"Feature\",\n            \"value\": 0\n        }\n    },\n    \"expires_at\": null,\n    \"created_at\": \"2013-11-19T11:24:29-02:00\",\n    \"updated_at\": \"2013-11-19T11:24:43-02:00\",\n    \"customer_name\": \"Nome do Cliente\",\n    \"customer_email\": \"email@email.com\",\n    \"cycled_at\": null,\n    \"credits_min\": 0,\n    \"credits_cycle\": null,\n    \"customer_id\": \"FF3149CE52CB4A789925F154B489BFDD\",\n    \"plan_name\": \"plan1\",\n    \"customer_ref\": \"Nome do Cliente\",\n    \"plan_ref\": \"plan1\",\n    \"active\": true,\n    \"in_trial\": null,\n    \"credits\": 0,\n    \"credits_based\": false,\n    \"recent_invoices\": null,\n    \"subitems\": [{\n        \"id\": \"6D518D88B33F48FEA8964D5573E220D3\",\n        \"description\": \"Item um\",\n        \"quantity\": 1,\n        \"price_cents\": 1000,\n        \"price\": \"R$ 10,00\",\n        \"total\": \"R$ 10,00\"\n    }],\n    \"logs\": [{\n        \"id\": \"477388CC4C024520B552641724A62970\",\n        \"description\": \"Fatura criada\",\n        \"notes\": \"Fatura criada 1x Ativa\u00e7\u00e3o de Assinatura: plan1 = R$ 2,00;1x Item um = R$ 10,00;\",\n        \"created_at\": \"2013-11-19T11:24:43-02:00\"\n    }, {\n        \"id\": \"706436F169CE465B806163964A25400A\",\n        \"description\": \"Assinatura Criada\",\n        \"notes\": \"Assinatura Criada\",\n        \"created_at\": \"2013-11-19T11:24:29-02:00\"\n    }],\n    \"custom_variables\":[]\n}\nSuspender uma Assinatura\n\nSuspende uma Assinatura.\n\n\nDefini\u00e7\u00e3o\n\nPOST https://api.iugu.com/v1/subscriptions/ID_DA_ASSINATURA/suspend\n\n\nPar\u00e2metros\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl -X POST https://api.iugu.com/v1/subscriptions/ECF36F9AAF374D76A48646EDE8FE806D/suspend \n    -u seuApiToken:\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\nsubscription = Iugu::Subscription.fetch(\"ECF36F9AAF374D76A48646EDE8FE806D\")\nsubscription.suspend\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$subscription = Iugu_Subscription::fetch(\"ECF36F9AAF374D76A48646EDE8FE806D\");\n$subscription->suspend();\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"ECF36F9AAF374D76A48646EDE8FE806D\",\n    \"suspended\": true,\n    \"plan_identifier\": \"id1\",\n    \"price_cents\": 200,\n    \"currency\": \"BRL\",\n    \"features\": {\n        \"feat\": {\n            \"name\": \"Feature\",\n            \"value\": 0\n        }\n    },\n    \"expires_at\": null,\n    \"created_at\": \"2013-11-19T11:24:29-02:00\",\n    \"updated_at\": \"2013-11-19T11:24:43-02:00\",\n    \"customer_name\": \"Nome do Cliente\",\n    \"customer_email\": \"email@email.com\",\n    \"cycled_at\": null,\n    \"credits_min\": 0,\n    \"credits_cycle\": null,\n    \"customer_id\": \"FF3149CE52CB4A789925F154B489BFDD\",\n    \"plan_name\": \"plan1\",\n    \"customer_ref\": \"Nome do Cliente\",\n    \"plan_ref\": \"plan1\",\n    \"active\": true,\n    \"in_trial\": null,\n    \"credits\": 0,\n    \"credits_based\": false,\n    \"recent_invoices\": null,\n    \"subitems\": [{\n        \"id\": \"6D518D88B33F48FEA8964D5573E220D3\",\n        \"description\": \"Item um\",\n        \"quantity\": 1,\n        \"price_cents\": 1000,\n        \"price\": \"R$ 10,00\",\n        \"total\": \"R$ 10,00\"\n    }],\n    \"logs\": [{\n        \"id\": \"477388CC4C024520B552641724A62970\",\n        \"description\": \"Fatura criada\",\n        \"notes\": \"Fatura criada 1x Ativa\u00e7\u00e3o de Assinatura: plan1 = R$ 2,00;1x Item um = R$ 10,00;\",\n        \"created_at\": \"2013-11-19T11:24:43-02:00\"\n    }, {\n        \"id\": \"706436F169CE465B806163964A25400A\",\n        \"description\": \"Assinatura Criada\",\n        \"notes\": \"Assinatura Criada\",\n        \"created_at\": \"2013-11-19T11:24:29-02:00\"\n    }],\n    \"custom_variables\":[]\n}\nAtivar uma Assinatura\n\nAtiva uma Assinatura. Uma Fatura poder\u00e1 ser gerada para o cliente.\n\n\nDefini\u00e7\u00e3o\n\nPOST https://api.iugu.com/v1/subscriptions/ID_DA_ASSINATURA/activate\n\n\nPar\u00e2metros\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl -X POST https://api.iugu.com/v1/subscriptions/ECF36F9AAF374D76A48646EDE8FE806D/activate \n    -u seuApiToken:\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\nsubscription = Iugu::Subscription.fetch(\"ECF36F9AAF374D76A48646EDE8FE806D\")\nsubscription.activate\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$subscription = Iugu_Subscription::fetch(\"ECF36F9AAF374D76A48646EDE8FE806D\");\n$subscription->activate();\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"ECF36F9AAF374D76A48646EDE8FE806D\",\n    \"suspended\": false,\n    \"plan_identifier\": \"id1\",\n    \"price_cents\": 200,\n    \"currency\": \"BRL\",\n    \"features\": {\n        \"feat\": {\n            \"name\": \"Feature\",\n            \"value\": 0\n        }\n    },\n    \"expires_at\": null,\n    \"created_at\": \"2013-11-19T11:24:29-02:00\",\n    \"updated_at\": \"2013-11-19T11:24:43-02:00\",\n    \"customer_name\": \"Nome do Cliente\",\n    \"customer_email\": \"email@email.com\",\n    \"cycled_at\": null,\n    \"credits_min\": 0,\n    \"credits_cycle\": null,\n    \"customer_id\": \"FF3149CE52CB4A789925F154B489BFDD\",\n    \"plan_name\": \"plan1\",\n    \"customer_ref\": \"Nome do Cliente\",\n    \"plan_ref\": \"plan1\",\n    \"active\": true,\n    \"in_trial\": null,\n    \"credits\": 0,\n    \"credits_based\": false,\n    \"recent_invoices\": null,\n    \"subitems\": [{\n        \"id\": \"6D518D88B33F48FEA8964D5573E220D3\",\n        \"description\": \"Item um\",\n        \"quantity\": 1,\n        \"price_cents\": 1000,\n        \"price\": \"R$ 10,00\",\n        \"total\": \"R$ 10,00\"\n    }],\n    \"logs\": [{\n        \"id\": \"477388CC4C024520B552641724A62970\",\n        \"description\": \"Fatura criada\",\n        \"notes\": \"Fatura criada 1x Ativa\u00e7\u00e3o de Assinatura: plan1 = R$ 2,00;1x Item um = R$ 10,00;\",\n        \"created_at\": \"2013-11-19T11:24:43-02:00\"\n    }, {\n        \"id\": \"706436F169CE465B806163964A25400A\",\n        \"description\": \"Assinatura Criada\",\n        \"notes\": \"Assinatura Criada\",\n        \"created_at\": \"2013-11-19T11:24:29-02:00\"\n    }],\n    \"custom_variables\":[]\n}\nAlterar o Plano de uma Assinatura\n\nAltera o Plano de uma Assinatura. Uma Fatura cobrando a mudan\u00e7a de plano poder\u00e1 ser gerada para o cliente.\n\n\nDefini\u00e7\u00e3o\n\nPOST https://api.iugu.com/v1/subscriptions/ID_DA_ASSINATURA/change_plan/PLAN_IDENTIFIER\n\n\nPar\u00e2metros\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl -X POST https://api.iugu.com/v1/subscriptions/ECF36F9AAF374D76A48646EDE8FE806D/change_plan/id2 \\\n    -u seuApiToken:\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\nsubscription = Iugu::Subscription.fetch(\"ECF36F9AAF374D76A48646EDE8FE806D\")\nsubscription.change_plan \"id2\"\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$subscription = Iugu_Subscription::fetch(\"ECF36F9AAF374D76A48646EDE8FE806D\");\n$subscription->change_plan(\"id2\");\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"ECF36F9AAF374D76A48646EDE8FE806D\",\n    \"suspended\": false,\n    \"plan_identifier\": \"id2\",\n    \"price_cents\": 200,\n    \"currency\": \"BRL\",\n    \"features\": {\n        \"feat\": {\n            \"name\": \"Feature\",\n            \"value\": 10\n        }\n    },\n    \"expires_at\": null,\n    \"created_at\": \"2013-11-19T11:24:29-02:00\",\n    \"updated_at\": \"2013-11-19T11:24:43-02:00\",\n    \"customer_name\": \"Nome do Cliente\",\n    \"customer_email\": \"email@email.com\",\n    \"cycled_at\": null,\n    \"credits_min\": 0,\n    \"credits_cycle\": null,\n    \"customer_id\": \"FF3149CE52CB4A789925F154B489BFDD\",\n    \"plan_name\": \"plan1\",\n    \"customer_ref\": \"Nome do Cliente\",\n    \"plan_ref\": \"plan1\",\n    \"active\": true,\n    \"in_trial\": null,\n    \"credits\": 0,\n    \"credits_based\": false,\n    \"recent_invoices\": null,\n    \"subitems\": [{\n        \"id\": \"6D518D88B33F48FEA8964D5573E220D3\",\n        \"description\": \"Item um\",\n        \"quantity\": 1,\n        \"price_cents\": 1000,\n        \"price\": \"R$ 10,00\",\n        \"total\": \"R$ 10,00\"\n    }],\n    \"logs\": [{\n        \"id\": \"477388CC4C024520B552641724A62970\",\n        \"description\": \"Fatura criada\",\n        \"notes\": \"Fatura criada 1x Ativa\u00e7\u00e3o de Assinatura: plan1 = R$ 2,00;1x Item um = R$ 10,00;\",\n        \"created_at\": \"2013-11-19T11:24:43-02:00\"\n    }, {\n        \"id\": \"706436F169CE465B806163964A25400A\",\n        \"description\": \"Assinatura Criada\",\n        \"notes\": \"Assinatura Criada\",\n        \"created_at\": \"2013-11-19T11:24:29-02:00\"\n    }],\n    \"custom_variables\":[]\n}\nSimular Altera\u00e7\u00e3o de Plano de uma Assinatura\n\nSimula a altera\u00e7\u00e3o de plano de uma assinatura.\n\n\nDefini\u00e7\u00e3o\n\nGET https://api.iugu.com/v1/subscriptions/ID_DA_ASSINATURA/change_plan_simulation/PLAN_IDENTIFIER\n\n\nPar\u00e2metros\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl -X POST https://api.iugu.com/v1/subscriptions/ECF36F9AAF374D76A48646EDE8FE806D/change_plan/id2 \n    -u seuApiToken:\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n  \"cost\": 19990,\n  \"discount\": 0,\n  \"cycles\": 1,\n  \"expires_at\": \"2016-08-25\",\n  \"new_plan\": \"id2\",\n  \"old_plan\": \"id1\"\n}\nAdicionar Cr\u00e9ditos a Assinatura\n\nAdiciona cr\u00e9ditos a uma assinatura.\n\n\nDefini\u00e7\u00e3o\n\nPUT https://api.iugu.com/v1/subscriptions/ID_DA_ASSINATURA/add_credits\n\n\nPar\u00e2metros\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl -X PUT https://api.iugu.com/v1/subscriptions/ECF36F9AAF374D76A48646EDE8FE806D/add_credits \\\n    -u seuApiToken: \\\n    -d \"quantity=10\"\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\nsubscription = Iugu::Subscription.fetch(\"ECF36F9AAF374D76A48646EDE8FE806D\")\nsubscription.add_credits 1\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$subscription = Iugu_Subscription::fetch(\"ECF36F9AAF374D76A48646EDE8FE806D\");\n$subscription->add_credits(1);\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"ECF36F9AAF374D76A48646EDE8FE806D\",\n    \"suspended\": false,\n    \"plan_identifier\": \"id2\",\n    \"price_cents\": 200,\n    \"currency\": \"BRL\",\n    \"features\": {\n        \"feat\": {\n            \"name\": \"Feature\",\n            \"value\": 10\n        }\n    },\n    \"expires_at\": null,\n    \"created_at\": \"2013-11-19T11:24:29-02:00\",\n    \"updated_at\": \"2013-11-19T11:24:43-02:00\",\n    \"customer_name\": \"Nome do Cliente\",\n    \"customer_email\": \"email@email.com\",\n    \"cycled_at\": null,\n    \"credits_min\": 0,\n    \"credits_cycle\": null,\n    \"customer_id\": \"FF3149CE52CB4A789925F154B489BFDD\",\n    \"plan_name\": \"plan1\",\n    \"customer_ref\": \"Nome do Cliente\",\n    \"plan_ref\": \"plan1\",\n    \"active\": true,\n    \"in_trial\": null,\n    \"credits\": 10,\n    \"credits_based\": false,\n    \"recent_invoices\": null,\n    \"subitems\": [{\n        \"id\": \"6D518D88B33F48FEA8964D5573E220D3\",\n        \"description\": \"Item um\",\n        \"quantity\": 1,\n        \"price_cents\": 1000,\n        \"price\": \"R$ 10,00\",\n        \"total\": \"R$ 10,00\"\n    }],\n    \"logs\": [{\n        \"id\": \"477388CC4C024520B552641724A62970\",\n        \"description\": \"Fatura criada\",\n        \"notes\": \"Fatura criada 1x Ativa\u00e7\u00e3o de Assinatura: plan1 = R$ 2,00;1x Item um = R$ 10,00;\", \n        \"created_at\": \"2013-11-19T11:24:43-02:00\"\n    }, {\n        \"id\": \"706436F169CE465B806163964A25400A\",\n        \"description\": \"Assinatura Criada\",\n        \"notes\": \"Assinatura Criada\",\n        \"created_at\": \"2013-11-19T11:24:29-02:00\"\n    }],\n    \"custom_variables\":[]\n}\nRemover Cr\u00e9ditos da Assinatura\n\nRemove cr\u00e9ditos de uma assinatura.\n\n\nDefini\u00e7\u00e3o\n\nPUT https://api.iugu.com/v1/subscriptions/ID_DA_ASSINATURA/remove_credits\n\n\nPar\u00e2metros\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl -X PUT https://api.iugu.com/v1/subscriptions/ECF36F9AAF374D76A48646EDE8FE806D/remove_credits \\\n    -u seuApiToken: \\\n    -d \"quantity=5\"\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\nsubscription = Iugu::Subscription.fetch(\"ECF36F9AAF374D76A48646EDE8FE806D\")\nsubscription.remove_credits 1\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$subscription = Iugu_Subscription::fetch(\"ECF36F9AAF374D76A48646EDE8FE806D\");\n$subscription->remove_credits(1);\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"ECF36F9AAF374D76A48646EDE8FE806D\",\n    \"suspended\": false,\n    \"plan_identifier\": \"id2\",\n    \"price_cents\": 200,\n    \"currency\": \"BRL\",\n    \"features\": {\n        \"feat\": {\n            \"name\": \"Feature\",\n            \"value\": 10\n        }\n    },\n    \"expires_at\": null,\n    \"created_at\": \"2013-11-19T11:24:29-02:00\",\n    \"updated_at\": \"2013-11-19T11:24:43-02:00\",\n    \"customer_name\": \"Nome do Cliente\",\n    \"customer_email\": \"email@email.com\",\n    \"cycled_at\": null,\n    \"credits_min\": 0,\n    \"credits_cycle\": null,\n    \"customer_id\": \"FF3149CE52CB4A789925F154B489BFDD\",\n    \"plan_name\": \"plan1\",\n    \"customer_ref\": \"Nome do Cliente\",\n    \"plan_ref\": \"plan1\",\n    \"active\": true,\n    \"in_trial\": null,\n    \"credits\": 5,\n    \"credits_based\": false,\n    \"recent_invoices\": null,\n    \"subitems\": [{\n        \"id\": \"6D518D88B33F48FEA8964D5573E220D3\",\n        \"description\": \"Item um\",\n        \"quantity\": 1,\n        \"price_cents\": 1000,\n        \"price\": \"R$ 10,00\",\n        \"total\": \"R$ 10,00\"\n    }],\n    \"logs\": [{\n        \"id\": \"477388CC4C024520B552641724A62970\",\n        \"description\": \"Fatura criada\",\n        \"notes\": \"Fatura criada 1x Ativa\u00e7\u00e3o de Assinatura: plan1 = R$ 2,00;1x Item um = R$ 10,00;\",\n        \"created_at\": \"2013-11-19T11:24:43-02:00\"\n    }, {\n        \"id\": \"706436F169CE465B806163964A25400A\",\n        \"description\": \"Assinatura Criada\",\n        \"notes\": \"Assinatura Criada\",\n        \"created_at\": \"2013-11-19T11:24:29-02:00\"\n    }],\n    \"custom_variables\":[]\n}\nListar as Assinaturas\n\nRetorna uma lista com todas as assinaturas em sua conta ordenadas pela data de Cria\u00e7\u00e3o, sendo a primeira a que foi criada mais recentemente. O campo totalItems cont\u00e9m sempre a quantidade de assinaturas cadastradas, independente dos par\u00e2metros de pesquisa utilizados e o resultado da pesquisa fica sempre dentro de items.\n\nUtilizamos o elasticsearch para as pesquisas, por isso retornamos tamb\u00e9m a lista de facetas no n\u00f3 facets. Mais informa\u00e7\u00f5es sobre facets\n\n\nDefini\u00e7\u00e3o\n\nGET https://api.iugu.com/v1/subscriptions\n\n\nPar\u00e2metros\n\n\n\n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n    Ruby\n  \n\n    \n    PHP\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/subscriptions \\\n    -u seuApiToken:\n  \n  \n  \n  Iugu.api_key = \"seuApiToken\"\n\nsubscriptions = Iugu::Subscription.search.results\n  \n  \n  \n  Iugu::setApiKey(\"seuApiToken\");\n\n$subscriptions = Iugu_Subscription::search()->results();\n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"facets\": {\n        \"suspended\": {\n            \"_type\": \"filter\",\n            \"count\": 1\n        },\n        \"active\": {\n            \"_type\": \"filter\",\n            \"count\": 1\n        },\n        \"due\": {\n            \"_type\": \"filter\",\n            \"count\": 1\n        }\n    },\n    \"totalItems\": 3,\n    \"items\": [{\n        \"id\": \"ECF36F9AAF374D76A48646EDE8FE806D\",\n        \"suspended\": false,\n        \"plan_identifier\": \"id2\",\n        \"price_cents\": 200,\n        \"currency\": \"BRL\",\n        \"features\": {\n            \"feat\": {\n                \"name\": \"Feature\",\n                \"value\": 10\n            }\n        },\n        \"expires_at\": null,\n        \"created_at\": \"2013-11-19T11:24:29-02:00\",\n        \"updated_at\": \"2013-11-19T11:24:43-02:00\",\n        \"customer_name\": \"Nome do Cliente\",\n        \"customer_email\": \"email@email.com\",\n        \"cycled_at\": null,\n        \"customer_id\": \"FF3149CE52CB4A789925F154B489BFDD\",\n        \"plan_name\": \"plan1\",\n        \"customer_ref\": \"Nome do Cliente\",\n        \"plan_ref\": \"plan1\",\n        \"active\": true,\n        \"in_trial\": null,\n        \"recent_invoices\": null,\n        \"subitems\": [{\n            \"id\": \"6D518D88B33F48FEA8964D5573E220D3\",\n            \"description\": \"Item um\",\n            \"quantity\": 1,\n            \"price_cents\": 1000,\n            \"price\": \"R$ 10,00\",\n            \"total\": \"R$ 10,00\"\n        }],\n        \"logs\": [{\n            \"id\": \"477388CC4C024520B552641724A62970\",\n            \"description\": \"Fatura criada\",\n            \"notes\": \"Fatura criada 1x Ativa\u00e7\u00e3o de Assinatura: plan1 = R$ 2,00;1x Item um = R$ 10,00;\",\n            \"created_at\": \"2013-11-19T11:24:43-02:00\"\n        }, {\n            \"id\": \"706436F169CE465B806163964A25400A\",\n            \"description\": \"Assinatura Criada\",\n            \"notes\": \"Assinatura Criada\",\n            \"created_at\": \"2013-11-19T11:24:29-02:00\"\n        }]\n    }, {\n        \"id\": \"ECF36F9AAF374D76A48646EDE8FE806D\",\n        \"suspended\": false,\n        \"plan_identifier\": \"id2\",\n        \"price_cents\": 200,\n        \"currency\": \"BRL\",\n        \"features\": {\n            \"feat\": {\n                \"name\": \"Feature\",\n                \"value\": 10\n            }\n        },\n        \"expires_at\": null,\n        \"created_at\": \"2013-11-19T11:24:29-02:00\",\n        \"updated_at\": \"2013-11-19T11:24:43-02:00\",\n        \"customer_name\": \"Nome do Cliente\",\n        \"customer_email\": \"email@email.com\",\n        \"cycled_at\": null,\n        \"customer_id\": \"FF3149CE52CB4A789925F154B489BFDD\",\n        \"plan_name\": \"plan1\",\n        \"customer_ref\": \"Nome do Cliente\",\n        \"plan_ref\": \"plan1\",\n        \"active\": true,\n        \"in_trial\": null,\n        \"recent_invoices\": null,\n        \"subitems\": [{\n            \"id\": \"6D518D88B33F48FEA8964D5573E220D3\",\n            \"description\": \"Item um\",\n            \"quantity\": 1,\n            \"price_cents\": 1000,\n            \"price\": \"R$ 10,00\",\n            \"total\": \"R$ 10,00\"\n        }],\n        \"logs\": [{\n            \"id\": \"477388CC4C024520B552641724A62970\",\n            \"description\": \"Fatura criada\",\n            \"notes\": \"Fatura criada 1x Ativa\u00e7\u00e3o de Assinatura: plan1 = R$ 2,00;1x Item um = R$ 10,00;\",\n            \"created_at\": \"2013-11-19T11:24:43-02:00\"\n        }, {\n            \"id\": \"706436F169CE465B806163964A25400A\",\n            \"description\": \"Assinatura Criada\",\n            \"notes\": \"Assinatura Criada\",\n            \"created_at\": \"2013-11-19T11:24:29-02:00\"\n        }]\n    }, {\n        \"id\": \"ECF36F9AAF374D76A48646EDE8FE806D\",\n        \"suspended\": false,\n        \"plan_identifier\": \"id2\",\n        \"price_cents\": 200,\n        \"currency\": \"BRL\",\n        \"features\": {\n            \"feat\": {\n                \"name\": \"Feature\",\n                \"value\": 10\n            }\n        },\n        \"expires_at\": null,\n        \"created_at\": \"2013-11-19T11:24:29-02:00\",\n        \"updated_at\": \"2013-11-19T11:24:43-02:00\",\n        \"customer_name\": \"Nome do Cliente\",\n        \"customer_email\": \"email@email.com\",\n        \"cycled_at\": null,\n        \"customer_id\": \"FF3149CE52CB4A789925F154B489BFDD\",\n        \"plan_name\": \"plan1\",\n        \"customer_ref\": \"Nome do Cliente\",\n        \"plan_ref\": \"plan1\",\n        \"active\": true,\n        \"in_trial\": null,\n        \"recent_invoices\": null,\n        \"subitems\": [{\n            \"id\": \"6D518D88B33F48FEA8964D5573E220D3\",\n            \"description\": \"Item um\",\n            \"quantity\": 1,\n            \"price_cents\": 1000,\n            \"price\": \"R$ 10,00\",\n            \"total\": \"R$ 10,00\"\n        }],\n        \"logs\": [{\n            \"id\": \"477388CC4C024520B552641724A62970\",\n            \"description\": \"Fatura criada\",\n            \"notes\": \"Fatura criada 1x Ativa\u00e7\u00e3o de Assinatura: plan1 = R$ 2,00;1x Item um = R$ 10,00;\",\n            \"created_at\": \"2013-11-19T11:24:43-02:00\"\n        }, {\n            \"id\": \"706436F169CE465B806163964A25400A\",\n            \"description\": \"Assinatura Criada\",\n            \"notes\": \"Assinatura Criada\",\n            \"created_at\": \"2013-11-19T11:24:29-02:00\"\n        }]\n    }]\n}\n\nTransfer\u00eancias de Valores\n\nPermitimos a transfer\u00eancia de valores entre contas da Iugu atrav\u00e9s de nossa API.\n\nTransferir Valor\n\nTransfere um determinado valor de sua conta para a conta destino.\n\n\nDefini\u00e7\u00e3o\n\nPOST https://api.iugu.com/v1/transfers\n\n\nPar\u00e2metros\n\n\n\n\n\nPar\u00e2metros: custom_variables\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/transfers \n    -u seuApiToken: \n    -d \"receiver_id=77C2565F6F064A26ABED4255894224F0\" \n    -d \"amount_cents=1000\" \n    -d \"custom_variables[][name]=nome_da_variavel\" \n    -d \"custom_variables[][value]=valor_da_variavel\"\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"1234565F6F06412345ED425581234567\",\n    \"created_at\": \"2013-11-19T11:24:29-02:00\",\n    \"amount_cents\": \"1000\",\n    \"amount_localized\": \"R$ 10,00\",\n    \"receiver\": {\n      \"id\": \"77C2565F6F064A26ABED4255894224F0\",\n      \"name\": \"Nome da Conta\" \n    },\n    \"custom_variables\": [{\n        \"name\": \"nome_da_variavel\",\n        \"value\": \"valor_da_variavel\"\n    }]\n}\nBuscar Transfer\u00eancia\n\nRetorna as informa\u00e7\u00f5es de uma transfer\u00eancia de valores.\n\n\nDefini\u00e7\u00e3o\n\nGET https://api.iugu.com/v1/transfers/ID_DA_TRANSFER\u00caNCIA\n\nPar\u00e2metros\n\n\n\n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/transfers/530706A3862D4BB49C8AC9637B850CDE \n    -u seuApiToken:\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"1234565F6F06412345ED425581234567\",\n    \"created_at\": \"2013-11-19T11:24:29-02:00\",\n    \"amount_cents\": \"1000\",\n    \"amount_localized\": \"R$ 10,00\",\n    \"receiver\": {\n      \"id\": \"77C2565F6F064A26ABED4255894224F0\",\n      \"name\": \"Nome da Conta\" \n    },\n    \"custom_variables\": [{\n        \"name\": \"nome_da_variavel\",\n        \"value\": \"valor_da_variavel\"\n    }]\n}\nListar as Transfer\u00eancias\n\nRetorna uma lista com todas as transfer\u00eancias efetuadas.\n\n\nDefini\u00e7\u00e3o\n\nGET https://api.iugu.com/v1/transfers\n\n\nPar\u00e2metros\n\nSem par\u00e2metros.\n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/transfers \\\n    -u seuApiToken:\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"sent\": [\n    {\n      \"id\": \"1234565F6F06412345ED425581234567\",\n      \"created_at\": \"2013-11-19T11:24:29-02:00\",\n      \"amount_cents\": \"1000\",\n      \"amount_localized\": \"R$ 10,00\",\n      \"receiver\": {\n        \"id\": \"77C2565F6F064A26ABED4255894224F0\",\n        \"name\": \"Nome da Conta\"\n      }\n    }\n  ],\n  \"received\": [\n    {\n      \"id\": \"1234565F6F06132345ED425581234567\",\n      \"created_at\": \"2013-12-19T11:24:29-02:00\",\n      \"amount_cents\": \"2000\",\n      \"amount_localized\": \"R$ 20,00\",\n      \"sender\": {\n        \"id\": \"77C2565F6F0611111BED4255894224F0\",\n        \"name\": \"Conta Teste\"\n      }\n    }\n  ]\n}\n\nMarket Place\n\nTemos algumas APIs que possibilitam a cria\u00e7\u00e3o de servi\u00e7os de marketplace.\n\nCriar Sub-Conta\n\nPermite a cria\u00e7\u00e3o das sub-contas gerenciadas pela conta que gerencia o marketplace.\n\nObserva\u00e7\u00f5es:\n\n\nSalve os dados de retorno em seu banco de dados, pois os dados de API_TOKEN da subconta n\u00e3o podem ser consultados via API ap\u00f3s sua cria\u00e7\u00e3o.\nSubcontas N\u00c3O podem ser deletadas.\n\n\n\nDefini\u00e7\u00e3o\n\nPOST https://api.iugu.com/v1/marketplace/create_account\n\n\nPar\u00e2metros\n\n\n  \n\n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/marketplace/create_account \\\n    -u seuApiToken: \\\n    -d \"name=Subconta\" \\\n    -d \"commission_percent=10\"\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"account_id\": \"49196DF60BC64B6EB42DEC9C5D81C2CC\",\n    \"name\": \"Subconta\",\n    \"live_api_token\": \"8c018fa32cbae33a47f0ec27f2e84d8c\",\n    \"test_api_token\": \"aef793f12f6c67b93a4d39a4f42b7e98\",\n    \"user_token\": \"1015cd6f9ddc96a357403f994f907cfd\"\n}\nEnviar Verifica\u00e7\u00e3o de Sub-Conta\n\nTodas as contas devem ter sua documenta\u00e7\u00e3o verificada antes de poder emitir faturas reais (por\u00e9m permite cria\u00e7\u00e3o de dados de teste). Essa API permite o envio da documenta\u00e7\u00e3o da sub-conta criada.\n\nObs: Essa API obriga a utiliza\u00e7\u00e3o do User API Token em vez do API Token de conta.\n\n\nDefini\u00e7\u00e3o\n\nPOST https://api.iugu.com/v1/accounts/ID_DA_CONTA/request_verification\n\n\nPar\u00e2metros\n\n\n  \n\n\nPar\u00e2metros: data\n\n\n  \n\n\nPar\u00e2metros: files (opcional)\n\n\n  \n\n\nFormata\u00e7\u00e3o dos campos com automatic_validation\n\n\n\n\n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/accounts/49196DF60BC64B6EB42DEC9C5D81C2CC/request_verification \n    -u userTokenDaSubConta: \n    -F \"data[price_range]=At\u00e9 R$ 100,00\" \n    -F \"data[physical_products]=false\" \n    -F \"data[business_type]=Servi\u00e7os de Limpeza\" \n    -F \"data[person_type]=Pessoa F\u00edsica\" \n    -F \"data[automatic_transfer]=true\" \n    -F \"data[cpf]=123.123.123-12\" \n    -F \"data[name]=Nome da Pessoa\" \n    -F \"data[address]=Av. Paulista 320 cj 10\" \n    -F \"data[cep]=01419-000\" \n    -F \"data[city]=S\u00e3o Paulo\" \n    -F \"data[state]=S\u00e3o Paulo\" \n    -F \"data[telephone]=11-91231-1234\" \n    -F \"data[bank]=Ita\u00fa\" \n    -F \"data[bank_ag]=1234\" \n    -F \"data[account_type]=Corrente\" \n    -F \"data[bank_cc]=11231-2\" \n    -F \"files[id]=@/home/user1/Desktop/rg.png\" \n    -F \"files[cpf]=@/home/user1/Desktop/cpf.png\" \n    -F \"files[activity]=@/home/user1/Desktop/contrato.png\"\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\nExemplo de Retorno\n\n{\n    \"id\": \"EC696038CCCE456893568C886AEBFD4F\",\n    \"data\": {\n        \"price_range\": \"Subconta\",\n        \"physical_products\": \"false\",\n        \"business_type\": \"Servi\u00e7os de Limpeza\",\n        \"person_type\": \"Pessoa F\u00edsica\",\n        \"automatic_transfer\": \"true\",\n        \"cpf\": \"123.123.123-12\",\n        \"name\": \"Nome da Pessoa\",\n        \"address\": \"Av. Paulista 320 cj 10\",\n        \"cep\": \"01419-000\",\n        \"city\": \"S\u00e3o Paulo\",\n        \"state\": \"S\u00e3o Paulo\",\n        \"telephone\": \"11-91231-1234\",\n        \"bank\": \"Ita\u00fa\",\n        \"bank_ag\": \"1234\",\n        \"account_type\": \"Corrente\",\n        \"bank_cc\": \"11231-2\",\n        \"document_id\": 1,\n        \"document_cpf\": 2,\n        \"document_activity\": 3\n    },\n    \"account_id\": \"49196DF60BC64B6EB42DEC9C5D81C2CC\",\n    \"created_at\": \"2014-03-14T11:12:18-03:00\"\n}\nBuscar Informa\u00e7\u00f5es de Sub-Conta\n\nRetorna as informa\u00e7\u00f5es de uma conta.\n\n\nDefini\u00e7\u00e3o\n\nGET https://api.iugu.com/v1/accounts/ID_DA_SUBCONTA\n\nPar\u00e2metros\n\n\n\n\n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/accounts/49196DF60BC64B6EB42DEC9C5D81C2CC \n    -u userTokenDaSubConta:\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"49196DF60BC64B6EB42DEC9C5D81C2CC\",\n    \"name\": \"Subconta\",\n    \"created_at\": \"2014-03-14T07:57:24-03:00\",\n    \"updated_at\": \"2014-03-14T07:57:25-03:00\",\n    \"can_receive?\": false,\n    \"is_verified?\": false,\n    \"last_verification_request_status\": \"pending\",\n    \"last_verification_request_data\": {\n        \"price_range\": \"Subconta\",\n        \"physical_products\": \"false\",\n        \"business_type\": \"Servi\u00e7os de Limpeza\",\n        \"person_type\": \"Pessoa F\u00edsica\",\n        \"automatic_transfer\": \"true\",\n        \"cpf\": \"123.123.123-12\",\n        \"name\": \"Nome da Pessoa\",\n        \"address\": \"Av. Paulista 320 cj 10\",\n        \"cep\": \"01419-000\",\n        \"city\": \"S\u00e3o Paulo\",\n        \"state\": \"S\u00e3o Paulo\",\n        \"telephone\": \"11-91231-1234\",\n        \"bank\": \"Ita\u00fa\",\n        \"bank_ag\": \"1234\",\n        \"account_type\": \"Corrente\",\n        \"bank_cc\": \"11231-2\",\n        \"document_id\": \"1:ledermantel_art.png\",\n        \"document_cpf\": \"2:ledermantel_art.png\",\n        \"document_activity\": \"3:ledermantel_art.png\"\n    },\n    \"last_verification_request_feedback\": null,\n    \"change_plan_type\": 1,\n    \"subscriptions_trial_period\": 0,\n    \"disable_emails\": false,\n    \"last_withdraw\": null,\n    \"total_subscriptions\": 0,\n    \"reply_to\": null,\n    \"webapp_on_test_mode\": false,\n    \"marketplace\": false,\n    \"auto_withdraw\": false,\n    \"balance\": \"R$ 0,00\",\n    \"balance_available_for_withdraw\":\"R$ 0,00\",\n    \"balance_in_protest\":\"R$ 0,00\",\n    \"protected_balance\": \"R$ 0,00\",\n    \"payable_balance\": \"R$ 0,00\",\n    \"receivable_balance\": \"R$ 0,00\",\n    \"commission_balance\": \"R$ 0,00\",\n    \"volume_last_month\": \"R$ 0,00\",\n    \"volume_this_month\": \"R$ 0,00\",\n    \"taxes_paid_last_month\": \"R$ 0,00\",\n    \"taxes_paid_this_month\": \"R$ 0,00\",\n    \"custom_logo_url\": null,\n    \"custom_logo_small_url\": null,\n    \"informations\": [{\n        \"key\": \"commission_percent\",\n        \"value\": \"10.0\"\n    }]\n}\nConfigurar Sub-Conta\n\nConfigura par\u00e2metros de uma sub-conta.\n\n\nDefini\u00e7\u00e3o\n\nPOST https://api.iugu.com/v1/accounts/configuration\n\nPar\u00e2metros\n\n\n\n\n\nPar\u00e2metros: bank_slip\n\n\n\n\n\nPar\u00e2metros: credit_card\n\n\n\n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/accounts/configuration \n    -u seuApiToken: \n    -d \"commission_percent=1\" \n    -d \"auto_withdraw=false\" \n    -d \"fines=true\" \n    -d \"per_day_interest=true\" \n    -d \"late_payment_fine=2\" \n    -d \"bank_slip[active]=true\" \n    -d \"bank_slip[extra_due]=1\" \n    -d \"bank_slip[reprint_extra_due]=1\" \n    -d \"credit_card[active]=true\" \n    -d \"credit_card[soft_descriptor]=TESTE\" \n    -d \"credit_card[installments]=true\" \n    -d \"credit_card[installments_pass_interest]=true\" \n    -d \"credit_card[max_installments]=12\" \n    -d \"credit_card[max_installments_without_interest]=2\" \n    -d \"credit_card[two_step_transaction]=true\"\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"63C332E29A1B44B386991BF2A6B96D43\",\n    \"name\": \"Conta Demo\",\n    \"created_at\": \"2013-02-15T12:20:28-02:00\",\n    \"updated_at\": \"2014-06-26T10:48:46-03:00\",\n    \"can_receive?\": true,\n    \"is_verified?\": true,\n    \"last_verification_request_status\": \"accepted\",\n    \"last_verification_request_data\": null,\n    \"last_verification_request_feedback\": null,\n    \"change_plan_type\": 1,\n    \"subscriptions_trial_period\": 0,\n    \"disable_emails\": false,\n    \"last_withdraw\": null,\n    \"total_subscriptions\": 79,\n    \"reply_to\": null,\n    \"webapp_on_test_mode\": false,\n    \"marketplace\": false,\n    \"default_return_url\": \"\",\n    \"auto_withdraw\": true,\n    \"balance\": \"R$ 0,00\",\n    \"protected_balance\": \"R$ 0,00\",\n    \"payable_balance\": \"R$ 0,00\",\n    \"receivable_balance\": \"R$ 0,00\",\n    \"commission_balance\": \"R$ 0,00\",\n    \"volume_last_month\": \"R$ 804,20\",\n    \"volume_this_month\": \"R$ 0,00\",\n    \"taxes_paid_last_month\": \"R$ 46,57\",\n    \"taxes_paid_this_month\": \"R$ 0,00\",\n    \"custom_logo_url\": null,\n    \"custom_logo_small_url\": null,\n    \"informations\": [{\n        \"key\": \"charge_limit\",\n        \"value\": \"50000\"\n    }, {\n        \"key\": \"return_days\",\n        \"value\": \"1\"\n    }, {\n        \"key\": \"account_type\",\n        \"value\": \"Tipo da Conta\"\n    }, {\n        \"key\": \"bank\",\n        \"value\": \"Banco\"\n    }, {\n        \"key\": \"commission_percent\",\n        \"value\": \"1\"\n    }, {\n        \"key\": \"iugu_credit_card_percent_1\",\n        \"value\": \"0.04\"\n    }, {\n        \"key\": \"automatic_transfer\",\n        \"value\": \"true\"\n    }],\n    \"configuration\": {\n        \"commission_percent\": 1,\n        \"bank_slip\": {\n            \"active\": true,\n            \"extra_due\": \"1\",\n            \"reprint_extra_due\": \"1\"\n        },\n        \"credit_card\": {\n            \"active\": true,\n            \"soft_descriptor\": \"TESTE\",\n            \"installments\": true,\n            \"installments_pass_interest\": true,\n            \"max_installments\": \"12\",\n            \"max_installments_without_interest\": \"2\",\n            \"two_step_transaction\": true\n        }\n    }\n}\nListar as Sub-Contas\n\nLista as sub-contas\n\n\nDefini\u00e7\u00e3o\n\nGET https://api.iugu.com/v1/marketplace/\n\nPar\u00e2metros\n\n\n\n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/marketplace \n    -u seuApiToken:\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n  \"totalItems\": 2,\n  \"items\": [\n    {\n      \"id\": \"63EC0B8F0FA74B6589AA8B005FEF20FA\",\n      \"name\": \"Nome da Subconta\",\n      \"verified\": true\n    },\n    {\n      \"id\": \"883F3B8F0FA749D3B1AA8B00093FF32F\",\n      \"name\": \"Nome da Segunda Subconta\",\n      \"verified\": true\n    }\n  ]\n}\nPedido de Saque\n\nFaz um pedido de Saque de um valor.\n\n\nDefini\u00e7\u00e3o\n\nPOST https://api.iugu.com/v1/accounts/ID_DA_SUBCONTA/request_withdraw\n\nPar\u00e2metros\n\n\n\n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/accounts/ID_DA_SUBCONTA/request_withdraw \n    -u seuApiToken: \n    -d \"amount=500.0\"\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"2B925E434B324F46827580F6BC0638AB\",\n    \"amount\": \"500.0\"\n}\nAtualiza\u00e7\u00e3o de Dados Banc\u00e1rios\n\nEnvia dados para altera\u00e7\u00e3o de dados banc\u00e1rios.\n\n\nDefini\u00e7\u00e3o\n\nPOST https://api.iugu.com/v1/bank_verification\n\nPar\u00e2metros\n\n\n\n\nFormata\u00e7\u00e3o dos campos com automatic_validation\n\n\n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl  https://api.iugu.com/v1/bank_verification \\\n    -u apiTokenDaSubConta: \\\n    -F \"agency=1234\" \\\n    -F \"account=1234-5\" \\\n    -F \"account_type=cc\" \\\n    -F \"bank=341\" \\\n    -F \"document=@/home/user1/Desktop/comprovante.png\"\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"success\": true\n}\n\nTransfer\u00eancia Banc\u00e1ria\n\nTemos algumas APIs que retornam detalhes sobre transfer\u00eancias banc\u00e1rias.\n\nListar Transfer\u00eancias\n\nRetorna a lista de todas as transfer\u00eancias banc\u00e1rias.\n\n\nDefini\u00e7\u00e3o\n\nGET https://api.iugu.com/v1/withdraw_requests/\n\nPar\u00e2metros\n\nSem par\u00e2metros.\n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/withdraw_requests \n    -u seuApiToken:\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"totalItems\": 2,\n    \"items\": [\n        {\n            \"id\": \"530706A3862D4BB49C8AC9637B850CDE\",\n            \"status\": \"pending\",\n            \"created_at\": \"2015-11-26T10:02:23-02:00\",\n            \"updated_at\": \"2015-11-26T10:02:23-02:00\",\n            \"reference\": null,\n            \"amount\": \"R$ 10,00\",\n            \"account_name\":  \"Conta\",\n            \"account_id\": \"A682CECA59D74527B984CA529D7C2ED4\",\n            \"feedback\": null,\n            \"bank_address\": \"{\"bank\":\"Bradesco\",\"bank_cc\":\"11231-2\",\"bank_ag\":\"1234\",\"account_type\":\"Corrente\"}\"\n        },\n        {\n            \"id\": \"35FC23B99C4643569943B7C70DC05014\",\n            \"status\": \"pending\",\n            \"created_at\": \"2015-11-25T17:33:53-02:00\",\n            \"updated_at\": \"2015-11-25T17:33:53-02:00\",\n            \"reference\": null,\n            \"amount\": \"R$ 10,00\",\n            \"account_name\": \"Conta\",\n            \"account_id\": \"A682CECA59D74527B984CA529D7C2ED4\",\n            \"feedback\": null,\n            \"bank_address\": \"{\"bank\":\"Bradesco\",\"bank_cc\":\"11231-2\",\"bank_ag\":\"1234\",\"account_type\":\"Corrente\"}\"\n        }\n    ]\n}\nBuscar uma Transfer\u00eancia\n\nRetorna as informa\u00e7\u00f5es de uma transfer\u00eancia banc\u00e1ria.\n\n\nDefini\u00e7\u00e3o\n\nGET https://api.iugu.com/v1/withdraw_requests/ID_DA_TRANSFER\u00caNCIA\n\nPar\u00e2metros\n\n\n  \n\n\nExemplo de Chamada \n  \n    \n  \n\n\n\n\n  \n    CURL\n  \n  \n  \n\n    \n\n\n\n\n  \n  $ curl https://api.iugu.com/v1/withdraw_requests/530706A3862D4BB49C8AC9637B850CDE \n    -u seuApiToken:\n  \n  \n  \n  \n  \n\n\nExemplo de Retorno \n  \n    \n  \n\n\n{\n    \"id\": \"530706A3862D4BB49C8AC9637B850CDE\",\n    \"status\": \"pending\",\n    \"created_at\": \"2015-11-26T10:02:23-02:00\",\n    \"updated_at\": \"2015-11-26T10:02:23-02:00\",\n    \"reference\": null,\n    \"amount\": \"R$ 10,00\",\n    \"account_name\": \"Conta\",\n    \"account_id\": \"A682CECA59D74527B984CA529D7C2ED4\",\n    \"feedback\": null,\n    \"bank_address\": {\n        \"bank\": \"Bradesco\",\n        \"bank_cc\": \"11231-2\",\n        \"bank_ag\": \"1234\",\n        \"account_type\": \"Corrente\"\n    }\n}\n      \n      \n    \n    \n      \n      \n        \n        \n        \n        \n        Passo a Passo\n        \n          \n          \n            Personaliza\u00e7\u00e3o de sua conta iugu\n            \n            \n              \n            \n          \n          \n        \n        \n        \n        Documenta\u00e7\u00e3o\n        \n          \n          \n            In\u00edcio r\u00e1pido\n            \n            \n              \n            \n          \n          \n          \n            Como iniciar iugu\n            \n            \n              \n            \n          \n          \n          \n            Realizando testes\n            \n            \n              \n            \n          \n          \n          \n            Conceitos t\u00e9cnicos\n            \n            \n              \n            \n          \n          \n          \n            Como funciona\n            \n            \n              \n            \n          \n          \n          \n            Lista de funcionalidades\n            \n            \n              \n            \n          \n          \n        \n        \n        \n        Informa\u00e7\u00f5es\n        \n          \n          \n            Pre\u00e7os e tarifas\n            \n            \n              \n            \n          \n          \n          \n            Expediente\n            \n            \n              \n            \n          \n          \n          \n            iuguBI\n            \n            \n              \n            \n          \n          \n          \n            Programa Igni\u00e7\u00e3o\n            \n            \n              \n            \n          \n          \n          \n            Seguran\u00e7a\n            \n            \n              \n            \n          \n          \n          \n            Marca e m\u00eddia\n            \n            \n              \n            \n          \n          \n          \n            Imprensa\n            \n            \n              \n            \n          \n          \n          \n            Pagamentos por iugu\n            \n            \n              \n            \n          \n          \n          \n            Perguntas frequentes\n            \n            \n              \n            \n          \n          \n        \n        \n        \n        Refer\u00eancias\n        \n          \n          \n            iugu.js\n            \n            \n              \n            \n          \n          \n          \n            Bibliotecas de API\n            \n            \n              \n            \n          \n          \n          \n            API\n            \n            \n            \n              \nApresenta\u00e7\u00e3o \nAutentica\u00e7\u00e3o \nErros \nVersionamento \nTokens e Cobran\u00e7a Direta \n    \n        Criar um Token\n        Cobran\u00e7a Direta\n    \n\nClientes e Formas de Pagamento \n    \n        Clientes\n    \n        Criar um Cliente\n        Buscar um Cliente\n        Alterar um Cliente\n        Remover um Cliente\n        Listar os Clientes\n    \n        \n        Formas de Pagamento de Cliente\n    \n        Criar uma Forma de Pagamento\n        Buscar uma Forma de Pagamento\n        Alterar uma Forma de Pagamento\n        Remover uma Forma de Pagamento\n        Listar as Formas de Pagamento\n    \n        \n    \n\nFaturas \n    \n        Criar uma Fatura\n        Buscar uma Fatura\n        Alterar uma Fatura\n        Capturar uma Fatura\n        Remover uma Fatura\n        Cancelar uma Fatura\n        Reembolsar uma Fatura\n        Segunda via de Fatura\n        Listar as Faturas\n    \n\nPlanos \n    \n        Criar um Plano\n        Buscar um Plano\n        Buscar um Plano pelo Identificador\n        Alterar um Plano\n        Remover um Plano\n        Listar os Planos\n    \n\nAssinaturas \n    \n        Criar uma Assinatura\n        Buscar uma Assinatura\n        Alterar uma Assinatura\n        Remover uma Assinatura\n        Suspender uma Assinatura\n        Ativar uma Assinatura\n        Alterar o Plano de uma Assinatura\n        Simular Altera\u00e7\u00e3o de Plano de uma Assinatura\n        Adicionar cr\u00e9ditos a Assinatura\n        Remover cr\u00e9ditos de Assinatura\n        Listar as Assinaturas\n    \n\nTransfer\u00eancias de Valores \n    \n        Transferir Valor\n        Buscar Transfer\u00eancia\n        Listar as Transfer\u00eancias\n    \n\nMarket Place \n    \n        Criar Sub-Conta\n        Enviar Verifica\u00e7\u00e3o de Sub-Conta\n        Buscar Informa\u00e7\u00f5es de Sub-Conta\nConfigurar Sub-Conta\nListar as Sub-Contas\nPedido de Saque\nAtualiza\u00e7\u00e3o de Dados Banc\u00e1rios\n    \n\nTransfer\u00eancia Banc\u00e1ria \n    \n        Listar Transfer\u00eancias\n        Buscar uma Transfer\u00eancia\n    \n\n\n            \n            \n            \n            \n              \n            \n          \n          \n          \n            Gatilhos\n            \n            \n              \n            \n          \n          \n          \n            Personaliza\u00e7\u00e3o de emails\n            \n            \n              \n            \n          \n          \n          \n            M\u00f3dulos de e-commerce\n            \n            \n              \n            \n          \n          \n          \n            Integra\u00e7\u00f5es\n            \n            \n              \n            \n          \n          \n          \n            Exemplo de checkout\n            \n            \n              \n            \n          \n          \n        \n        \n        \n        Jur\u00eddico\n        \n          \n          \n            Requisitos para abertura de conta iugu\n            \n            \n              \n            \n          \n          \n          \n            Contrato do consumidor\n            \n            \n              \n            \n          \n          \n          \n            Contrato do comerciante\n            \n            \n              \n            \n          \n          \n          \n            Termos de servi\u00e7o\n            \n            \n              \n            \n          \n          \n          \n            Pol\u00edtica de privacidade\n            \n            \n              \n            \n          \n          \n          \n            Produtos e servi\u00e7os proibidos\n            \n            \n              \n            \n          \n          \n        \n        \n        \n        Coisas bacanas\n        \n          \n          \n            C\u00f3digo aberto\n            \n            \n              \n            \n          \n          \n          \n            Cartazes motivacionais\n            \n            \n              \n            \n          \n          \n          \n            Academia iugu\n            \n            \n              \n            \n          \n          \n          \n            Projeto Astronauta\n            \n            \n              \n            \n          \n          \n        \n        \n        \n        Blog\n        \n          \n          \n            Desenvolvedores\n            \n            \n              \n            \n          \n          \n          \n            Empreendedores\n            \n            \n              \n            \n          \n          \n          \n            iugu\n            \n            \n              \n            \n          \n          \n          \n            Atualiza\u00e7\u00f5es", "time": "2017-05-24T23:39:14.511046"}
{"url": "https://developer.visa.com/reference", "site": "visa.com", "descr": "Menu\n  \n    \n      \n  Square\n  Accept Credit Cards From An iPhone, Android or iPad - Square\n  \n  \n  \n  \n\n\n  \n  \n    Apps\n  \n\n\n\n  \n    \n  \n  Manage Apps\n\n\n\n      \n        \n          \n  \n    \n    \n  \n\n\n\n  \n    \n      \n  Square\n  Accept Credit Cards From An iPhone, Android or iPad - Square\n  \n  \n  \n  \n\n\n    \n    Developer\n\n\n  \n    The Basics\n    \n      Getting started\n      The structure of a Square business\n      Code samples\n      Client libraries\n      Troubleshooting errors\n      Catalog Overview\n      FAQ\n  \n  \n    Online Payments\n    \n      Square Checkout Overview\n      Checkout: Get Started\n      Payment API: Get Started\n      Embedding the Square Payment Form\n      Processing a payment (REST)\n      Processing a payment (PHP)\n      Processing a payment (Ruby)\n      Processing a payment (Other languages)\n      Testing using the API sandbox\n      Processing recurring payments\n      Delayed capture transactions\n  \n  \n    In-Person Payments\n    \n      Register API Overview\n      Using the Register API (iOS)\n      Using the Register API (Android)\n      Using the Web API (Android)\n  \n  \n    Full API Reference\n    \n      \n        Connect v2 (REST)\n      \n      \n        Connect v2 (.NET)\n      \n      \n        Connect v2 (Python)\n      \n      \n        Connect v1 (REST)\n      \n      \n        Register SDK (iOS)\n      \n      \n        Register SDK (Android)\n      \n      \n        OAuth\n      \n    \n  \n  \n    Release Notes\n    \n      Catalog API (2017-05)\n      Web API for Android released (2016-11)\n      Register API for iOS v1.2 released (2016-11)\n      Register API for iOS v1.1 released (2016-10)\n      Register API for Android sample application released (2016-10)\n      Register API for Android v1.1 released (2016-09)\n      Register API for Android released (2016-05)\n      Connect API v2 released (2016-03)\n      API changes (2016-02-16)\n  \n  \n    Other Reference\n    \n      \n        Terms of service\n      \n    \n  \n\n\n        \n        \n          \n  \n    Processing a card payment (REST)\n    \n      After the  generates a card nonce and you submit\n      it to your server, you finish processing the payment by sending a request\n      to the Charge endpoint with\n      the details of the transaction.\n    \n    \n      This article demonstrates using the Unirest\n      HTTP library to send an HTTP request to the\n      Charge endpoint. Versions of\n      Unirest are available for many popular server\n      programming languages. This article uses the Python\n      version.\n    \n    \n      You are of course free to use any HTTP library that you're comfortable\n      with. If you aren't familiar with HTTP libraries, Unirest is a good place\n      to start, because it's very easy to use with Connect API endpoints.\n    \n  \n\n  \n    Installing Unirest\n    \n      Installation instructions for each version of Unirest are available on the\n      Unirest site.\n    \n  \n\n  \n    Retrieving your location IDs\n    \n      Every Square merchant's business consists of one or more\n      locations. Every payment a merchant processes is\n      associated with one of these locations (even online payments). In order to\n      process a payment with Connect v2, you need to know which location you want\n      to associate the payment with.\n    \n    \n      To obtain a business' loation IDs, you send a request to\n      the ListLocations\n      endpoint.\n    \n    \n      After installing the Python version of Unirest, paste the\n      following into a  file and run it\n      with . Be sure to specify\n      your personal access token where indicated. The details of your\n      business' locations will appear in the console.\n    \n\n      \n\n  \n    Charging the card nonce\n    \n      Now that you've generated a card nonce with the\n       and you have a way to retrieve a\n      business' location IDs, you can charge a buyer's card, like\n      so:\n    \n\n    \n    \n      In Python,  is a  that contains\n      all of the details of the processed payment.\n    \n    \n      \n        Card nonces expire after 24 hours. The Charge endpoint\n        returns an error if you attempt to charge an expired nonce.\n      \n    \n  \n\n  \n    Learn about OAuth\n    \n      So far in this tutorial, you've used your personal access token, which\n      gives you full access to your own business' data.  If you are developing\n      an application for other businesses to use as well, you use the OAuth API\n      to generate access tokens for those businesses.\n    \n    \n      The OAuth flow in Connect v2 is identical to the flow in v1.\n      Learn more about the\n      \n      OAuth flow. Code samples for the OAuth flow are available on\n      \n      Github.\n    \n    \n      Important: In order for your app to process payments on\n      behalf of another merchant, the merchant must authorize your application\n      with the  OAuth permission.\n    \n  \n\n\n          \n  Was this page helpful?\n\n  \n    \n  \n  \n  \n  \n\n\n  \n\n  \n    \n  \n  \n  \n  \n\n\n  \n\n\n\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n\n  Still haven't found what you are looking for?\n  \n    Ask for help on\n    \n      Stack Overflow\n    \n    or on our\n    \n      community board.", "time": "2017-05-24T23:39:14.616974"}
{"url": "https://developer.visa.com/reference", "site": "visa.com", "descr": "BlueSnap Developer Hub{\"id\":\"57336fd5a6a9c40e00e13a0b\",\"name\":\"BlueSnap Developer Hub\",\"subdomain\":\"bluesnap-developers\",\"versions\":[{\"_id\":\"57336fd5a6a9c40e00e13a0e\",\"releaseDate\":\"2016-04-21T12:38:21.772Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Reporting\",\"version_clean\":\"4.0.1\",\"version\":\"4.0.1\"},{\"_id\":\"57336fd5a6a9c40e00e13a12\",\"releaseDate\":\"2016-04-13T15:39:35.430Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Payment API\",\"version_clean\":\"2.0.1\",\"version\":\"2.0.1\"},{\"_id\":\"57345e531f1b32170018de9d\",\"releaseDate\":\"2016-05-12T10:43:31.248Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Quickstart\",\"version_clean\":\"1.0.1\",\"version\":\"1.0.1\"},{\"_id\":\"57345e82a24c162000670314\",\"releaseDate\":\"2016-05-12T10:44:18.526Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Extended Payment API\",\"version_clean\":\"3.0.1\",\"version\":\"3.0.1\"},{\"_id\":\"57345f1bf0dc3a0e007748b8\",\"releaseDate\":\"2016-05-12T10:46:51.470Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Backup of v1 Dev Hub\",\"version_clean\":\"0.0.0\",\"version\":\"0\"},{\"_id\":\"57b1cf234c0c6f0e000078be\",\"releaseDate\":\"2016-08-15T14:18:11.085Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Reporting - 3.17.1 Aug 2016\",\"version_clean\":\"4.0.3\",\"version\":\"4.0.3\"},{\"_id\":\"57b1dae94c0c6f0e000078f7\",\"releaseDate\":\"2016-08-15T15:08:25.009Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Quickstart - 3.17.1 Aug 2016\",\"version_clean\":\"1.0.3\",\"version\":\"1.0.3\"},{\"_id\":\"57b32c65c9a4551700b968df\",\"releaseDate\":\"2016-08-16T15:08:21.265Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Extended API - 3.17.1 Aug 2016\",\"version_clean\":\"3.0.3\",\"version\":\"3.0.3\"},{\"_id\":\"57b6e797aabccd0e00f24890\",\"releaseDate\":\"2016-08-19T11:03:51.708Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Payment API - XML - 3.17.1 (Aug 2016)\",\"version_clean\":\"2.0.3\",\"version\":\"2.0.3\"},{\"_id\":\"57d7f58cf6bfa00e00680b34\",\"releaseDate\":\"2016-09-13T12:48:12.723Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Payment API - testing JSON support per page\",\"version_clean\":\"2.0.2\",\"version\":\"2.0.2\"},{\"_id\":\"57d96350ed63190e0022d2c8\",\"releaseDate\":\"2016-09-14T14:48:48.141Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Payment API - JSON - 3.18 Oct 2016\",\"version_clean\":\"2.1.2\",\"version\":\"2.1.2\"},{\"_id\":\"57e03831031bca0e00460d70\",\"releaseDate\":\"2016-09-19T19:10:41.642Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Reporting and Tools - 3.18 Oct 2016\",\"version_clean\":\"4.0.4\",\"version\":\"4.0.4\"},{\"_id\":\"57e28f07daba90170011753c\",\"releaseDate\":\"2016-09-21T13:45:43.345Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Payment API - XML - 3.18 Oct 2016\",\"version_clean\":\"2.0.4\",\"version\":\"2.0.4\"},{\"_id\":\"57e28fb71e7b7220000d7f3d\",\"releaseDate\":\"2016-09-21T13:48:39.181Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Basics - 3.18 Oct 2016\",\"version_clean\":\"1.0.4\",\"version\":\"1.0.4\"},{\"_id\":\"57e2900630b3901700643823\",\"releaseDate\":\"2016-09-21T13:49:58.628Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"Extended API - 3.18 Oct 2016\",\"version_clean\":\"3.0.4\",\"version\":\"3.0.4\"},{\"_id\":\"5819f4cc06e08a370027f298\",\"releaseDate\":\"2016-11-02T14:14:36.124Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.18.1 Release\",\"version_clean\":\"4.0.5\",\"version\":\"4.0.5\"},{\"_id\":\"58345c3bad81fc25005a7abb\",\"releaseDate\":\"2016-11-22T14:54:51.290Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19 Release\",\"version_clean\":\"4.0.6\",\"version\":\"4.0.6\"},{\"_id\":\"58345c5e92b42a230018f2f1\",\"releaseDate\":\"2016-11-22T14:55:26.877Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19 Release\",\"version_clean\":\"2.0.5\",\"version\":\"2.0.5\"},{\"_id\":\"58345c7cf1f6b41b007f2254\",\"releaseDate\":\"2016-11-22T14:55:56.351Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19 Release\",\"version_clean\":\"2.1.3\",\"version\":\"2.1.3\"},{\"_id\":\"5834a8acb970792700f09d38\",\"releaseDate\":\"2016-11-22T20:21:00.222Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19 Release\",\"version_clean\":\"3.0.5\",\"version\":\"3.0.5\"},{\"_id\":\"5835d3f5b67de41b00d7b4cb\",\"releaseDate\":\"2016-11-23T17:37:57.348Z\",\"is_deprecated\":false,\"is_hidden\":true,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19 Release\",\"version_clean\":\"1.0.5\",\"version\":\"1.0.5\"},{\"_id\":\"587d05d253a1d13100269630\",\"releaseDate\":\"2017-01-16T17:41:38.767Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19.2 Release\",\"version_clean\":\"2.0.6\",\"version\":\"2.0.6\"},{\"_id\":\"587d05f458434025008973cf\",\"releaseDate\":\"2017-01-16T17:42:12.934Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19.2 Release\",\"version_clean\":\"2.1.4\",\"version\":\"2.1.4\"},{\"_id\":\"587e5ce618c2e22f00fe7fde\",\"releaseDate\":\"2017-01-17T18:05:26.145Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19.2 Release\",\"version_clean\":\"3.0.6\",\"version\":\"3.0.6\"},{\"_id\":\"587e5edf18c2e22f00fe80a1\",\"releaseDate\":\"2017-01-17T18:13:51.330Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19.2 Release\",\"version_clean\":\"1.0.6\",\"version\":\"1.0.6\"},{\"_id\":\"5888bf55e7c13a2d0075208c\",\"releaseDate\":\"2017-01-25T15:08:05.359Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.19.3 nano\",\"version_clean\":\"4.0.7\",\"version\":\"4.0.7\"},{\"_id\":\"58ade8044b3e0b0f00e1bd4f\",\"releaseDate\":\"2017-02-22T19:35:32.491Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"v 3.20 Release\",\"version_clean\":\"8976.0.0-JSON\",\"version\":\"8976-JSON\"},{\"_id\":\"58ade83e75df0f1b001ed70a\",\"releaseDate\":\"2017-02-22T19:36:30.067Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.20 Release\",\"version_clean\":\"8976.0.0-XML\",\"version\":\"8976-XML\"},{\"_id\":\"58b0795eca312823003c681c\",\"releaseDate\":\"2017-02-24T18:20:14.087Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":true,\"codename\":\"3.20 Release\",\"version_clean\":\"8976.0.0-Basics\",\"version\":\"8976-Basics\"},{\"_id\":\"58b57d9d4714a81900118c62\",\"releaseDate\":\"2017-02-28T13:39:41.432Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.20 Release\",\"version_clean\":\"8976.0.0-Tools\",\"version\":\"8976-Tools\"},{\"_id\":\"58b58050c0da3223002f13ad\",\"releaseDate\":\"2017-02-28T13:51:12.260Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.20 Release\",\"version_clean\":\"8976.0.0-Extended\",\"version\":\"8976-Extended\"},{\"_id\":\"590b31db030acd0f00f0607c\",\"releaseDate\":\"2017-05-04T13:51:23.450Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.21.0 Release\",\"version_clean\":\"8976.0.0-Basics-Draft\",\"version\":\"8976-Basics-Draft\"},{\"_id\":\"590b3203c0161e19009537bd\",\"releaseDate\":\"2017-05-04T13:52:03.955Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.21.0 Release\",\"version_clean\":\"8976.0.0-Tools-Draft\",\"version\":\"8976-Tools-Draft\"},{\"_id\":\"590b3232b5f9ab23009dc4bf\",\"releaseDate\":\"2017-05-04T13:52:50.478Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.21.0 Release\",\"version_clean\":\"8976.0.0-JSON-Draft\",\"version\":\"8976-JSON-Draft\"},{\"_id\":\"590b325726f50e0f00dd6c0d\",\"releaseDate\":\"2017-05-04T13:53:27.274Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.21.0 Release\",\"version_clean\":\"8976.0.0-XML-Draft\",\"version\":\"8976-XML-Draft\"},{\"_id\":\"590b3280030acd0f00f060b7\",\"releaseDate\":\"2017-05-04T13:54:08.391Z\",\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":false,\"codename\":\"3.21.0 Release\",\"version_clean\":\"8976.0.0-Extended-Draft\",\"version\":\"8976-Extended-Draft\"}],\"doc_slug\":\"\",\"current_version\":{\"version_clean\":\"8976.0.0-Basics\",\"version\":\"8976-Basics\"},\"oauth\":{\"enabled\":false},\"api\":{\"name\":\"\",\"url\":\"https://sandbox.bluesnap.com/services/2\",\"contenttype\":\"body\",\"auth\":\"basic\",\"explorer\":true,\"proxyEnabled\":true,\"jwt\":false,\"authextra\":[{\"_id\":\"561b9fceab412a0d004d8631\",\"type\":\"header\",\"default\":\"Basic QVBJXzE0NDQ2NTAyMDMxNDQ5NDA0MjIzNjU6QkxVRTEyMw==\",\"key\":\"Authorization\"}],\"headers\":[{\"_id\":\"561c03a2eaf4852b00a46771\",\"value\":\"Application/XML\",\"key\":\"content-type\"},{\"_id\":\"56f12a866d8030220001ef98\",\"value\":\"2.0\",\"key\":\"bluesnap-version\"}],\"object_definitions\":[]},\"apiAlt\":[{\"_id\":\"57ee593a21ceb20e0061959e\",\"object_definitions\":[],\"headers\":[{\"_id\":\"57ee59b33b369f0e00469e40\",\"value\":\"application/json\",\"key\":\"content-type\"},{\"_id\":\"57ee59b33b369f0e00469e3f\",\"value\":\"application/json\",\"key\":\"accept\"},{\"_id\":\"57ee672b21ceb20e006195a4\",\"value\":\"2.0\",\"key\":\"bluesnap-version\"}],\"authextra\":[{\"_id\":\"57ee59b33b369f0e00469e3e\",\"type\":\"header\",\"default\":\"Basic QVBJXzE0NDQ2NTAyMDMxNDQ5NDA0MjIzNjU6QkxVRTEyMw==\",\"key\":\"Authorization\"}],\"jwt\":false,\"proxyEnabled\":true,\"explorer\":true,\"auth\":\"basic\",\"contenttype\":\"body\",\"url\":\"https://sandbox.bluesnap.com/services/2\",\"name\":\"JSON\"}],\"plan_details\":{\"name\":\"Business\",\"is_active\":true,\"cost\":199,\"versions\":10000,\"custom_domain\":true,\"custom_pages\":true,\"whitelabel\":true,\"errors\":true,\"password\":true,\"landing_page\":true,\"themebuilder\":true,\"stylesheet\":true,\"javascript\":true,\"html\":true,\"extra_html\":true,\"admins\":true,\"apps\":true},\"apps\":{\"enabled\":false},\"intercom\":\"\",\"intercom_secure_emailonly\":false,\"flags\":{\"allow_hub2\":false,\"hub2\":false,\"migrationRun\":true,\"oauth\":false,\"swagger\":false,\"correctnewlines\":false,\"speedyRender\":true,\"allowXFrame\":false,\"jwt\":false,\"hideGoogleAnalytics\":false,\"stripe\":false,\"autoSslGeneration\":false},\"asset_base_url\":\"\"}API BasicsPayment API JSONPayment API XMLExtended Payment APIReporting & ToolsSign Up{\"__v\":0,\"_id\":\"58b0795eca312823003c6826\",\"category\":{\"version\":\"58b0795eca312823003c681c\",\"project\":\"57336fd5a6a9c40e00e13a0b\",\"_id\":\"58b0795eca312823003c681d\",\"__v\":0,\"sync\":{\"url\":\"\",\"isSync\":false},\"reference\":false,\"createdAt\":\"2015-10-01T16:04:11.135Z\",\"from_sync\":false,\"order\":0,\"slug\":\"welcome\",\"title\":\"Quickstart\"},\"parentDoc\":null,\"project\":\"57336fd5a6a9c40e00e13a0b\",\"user\":\"560d5913af97231900938124\",\"version\":{\"__v\":4,\"_id\":\"58b0795eca312823003c681c\",\"project\":\"57336fd5a6a9c40e00e13a0b\",\"createdAt\":\"2017-02-24T18:20:14.087Z\",\"releaseDate\":\"2017-02-24T18:20:14.087Z\",\"categories\":[\"58b0795eca312823003c681d\",\"58b0795eca312823003c681e\",\"58b0795eca312823003c681f\",\"58b0795eca312823003c6820\",\"58b0795eca312823003c6821\",\"58b0795eca312823003c6822\",\"58b08df1dee0e50f00b672a8\",\"58b842112816282d003972fd\",\"58cc05e89405993b00be6d0b\"],\"is_deprecated\":false,\"is_hidden\":false,\"is_beta\":false,\"is_stable\":true,\"codename\":\"3.20 Release\",\"version_clean\":\"8976.0.0-Basics\",\"version\":\"8976-Basics\"},\"updates\":[],\"next\":{\"pages\":[],\"description\":\"\"},\"createdAt\":\"2016-01-18T19:33:49.270Z\",\"link_external\":false,\"link_url\":\"\",\"githubsync\":\"\",\"sync_unique\":\"\",\"hidden\":false,\"api\":{\"results\":{\"codes\":[]},\"settings\":\"\",\"auth\":\"required\",\"params\":[],\"url\":\"\"},\"isReference\":false,\"order\":2,\"body\":\"This tutorial will walk you through the essentials of using the Payment API to process payments, including:\\n  * Making your first credit card charge, using the Auth Capture API call\\n  * Reviewing the API response and possible errors\\n  * Additional powerful features you may want to use, like vaulted shoppers, metadata, and PayPal support\\n  * Tips for testing\\n\\nThis tutorial assumes that you are using BlueSnap's Hosted Payment Fields to collect shopper credit card information. If you don't yet have an app or form where you collect shopper payment details, [go to this tutorial](doc:build-a-form), where we'll walk you through setting up a checkout form.\\n[block:callout]\\n{\\n  \\\"type\\\": \\\"info\\\",\\n  \\\"title\\\": \\\"Need a BlueSnap account?\\\",\\n  \\\"body\\\": \\\"You will need a BlueSnap account in order to get your API credentials and start sending requests from your server. If you don't have an account yet, you can [sign up for one here](http://home.bluesnap.com/get-started/).\\\\n\\\\nIf you just want to try out API requests and see responses without setting up your server or getting an account, you can do that right here in the documentation, using our API Explorer tool. Jump into any of the API endpoints and go to the **Try it here!** section. You can try out different parameters and test credit card numbers to see exactly how your test scenario would work.\\\"\\n}\\n[/block]\\n##Step 1: Send an Auth Capture request\\nIn order to process payments, you will send requests to the API from your server, using your own server-side language like Java, Ruby, Python, or another. The example in this tutorial provides just the JSON content of the request, which you will need to send as specified by your server-side language.\\n[block:callout]\\n{\\n  \\\"type\\\": \\\"info\\\",\\n  \\\"title\\\": \\\"JSON and XML supported\\\",\\n  \\\"body\\\": \\\"This tutorial shows JSON examples. The API also supports XML - for more info, see [Payment API (XML)](/v2.0/docs).\\\"\\n}\\n[/block]\\n###Auth Capture request overview\\nIn this example, you'll create an [Auth Capture](/v2.1/docs/auth-capture) request containing the payment information you collected from the shopper.\\n\\nAn Auth Capture performs two actions via a single request:\\n  * **authorize**: checks whether a credit card is valid and has the funds to complete a specific transaction (i.e. purchase)\\n  * **capture**: submits the authorized transaction for settlement (i.e. payment by the shopper)\\n\\nThe request includes the [cardTransaction](/v2.1/docs/card-transaction) resource, which contains information about the transaction, such as the transaction type, amount, and currency.\\n\\nThis tutorial assumes that you are using BlueSnap's [Hosted Payment Fields](/v4.0/docs/hosted-payment-fields) to collect shopper credit card information, so the request must also include your Hosted Payment Fields token.\\n\\n###Example Auth Capture request\\nBelow is an example of a simple Auth Capture request with a Hosted Payment Fields token. This request contains the basic information required to process a one-time payment using a credit card. For more details and additional examples of this request, see [Auth Capture](/v2.1/docs/auth-capture).\\n[block:code]\\n{\\n  \\\"codes\\\": [\\n    {\\n      \\\"code\\\": \\\"{\\\\n    \\\\\\\"amount\\\\\\\": 50,\\\\n    \\\\\\\"recurringTransaction\\\\\\\": \\\\\\\"ECOMMERCE\\\\\\\",\\\\n    \\\\\\\"cardHolderInfo\\\\\\\": {\\\\n        \\\\\\\"firstName\\\\\\\": \\\\\\\"Jane\\\\\\\",\\\\n        \\\\\\\"lastName\\\\\\\": \\\\\\\"Shopper\\\\\\\"\\\\n    },\\\\n    \\\\\\\"currency\\\\\\\": \\\\\\\"USD\\\\\\\",\\\\n    \\\\\\\"cardTransactionType\\\\\\\": \\\\\\\"AUTH_CAPTURE\\\\\\\",\\\\n    \\\\\\\"hostedFieldToken\\\\\\\": \\\\\\\"abcde12345**********\\\\\\\"\\\\n}\\\",\\n      \\\"language\\\": \\\"json\\\",\\n      \\\"name\\\": \\\"Auth Capture Request\\\"\\n    }\\n  ]\\n}\\n[/block]\\n###Sending the request\\nOnce you have built the request, send it to the transactions endpoint in the Payment API. In the BlueSnap sandbox environment, this is the URL for the transactions endpoint:\\n`https://sandbox.bluesnap.com/services/2/transactions`\\n\\n<br>\\n<a class=\\\"btn btn-primary\\\" href=\\\"#\\\" role=\\\"button\\\">Back to Top</a>\\n\\n##Step 2: Response and error handling\\nAfter you send the request, if all goes well, you will receive a 200 OK response with content similar to the following:\\n[block:code]\\n{\\n  \\\"codes\\\": [\\n    {\\n      \\\"code\\\": \\\"{\\\\n    \\\\\\\"amount\\\\\\\": 50,\\\\n    \\\\\\\"recurringTransaction\\\\\\\": \\\\\\\"ECOMMERCE\\\\\\\",\\\\n    \\\\\\\"processingInfo\\\\\\\": {\\\\n        \\\\\\\"avsResponseCodeAddress\\\\\\\": \\\\\\\"M\\\\\\\",\\\\n        \\\\\\\"processingStatus\\\\\\\": \\\\\\\"success\\\\\\\",\\\\n        \\\\\\\"cvvResponseCode\\\\\\\": \\\\\\\"MA\\\\\\\",\\\\n        \\\\\\\"avsResponseCodeName\\\\\\\": \\\\\\\"U\\\\\\\",\\\\n        \\\\\\\"avsResponseCodeZip\\\\\\\": \\\\\\\"M\\\\\\\"\\\\n    },\\\\n    \\\\\\\"cardHolderInfo\\\\\\\": {\\\\n        \\\\\\\"firstName\\\\\\\": \\\\\\\"Jane\\\\\\\",\\\\n        \\\\\\\"lastName\\\\\\\": \\\\\\\"Shopper\\\\\\\"\\\\n    },\\\\n    \\\\\\\"currency\\\\\\\": \\\\\\\"USD\\\\\\\",\\\\n    \\\\\\\"creditCard\\\\\\\": {\\\\n        \\\\\\\"cardLastFourDigits\\\\\\\": 1111,\\\\n        \\\\\\\"cardSubType\\\\\\\": \\\\\\\"CREDIT\\\\\\\",\\\\n        \\\\\\\"cardType\\\\\\\": \\\\\\\"VISA\\\\\\\"\\\\n    },\\\\n    \\\\\\\"cardTransactionType\\\\\\\": \\\\\\\"AUTH_CAPTURE\\\\\\\",\\\\n    \\\\\\\"transactionId\\\\\\\": 38486450\\\\n}\\\",\\n      \\\"language\\\": \\\"json\\\",\\n      \\\"name\\\": \\\"Auth Capture Response - 200 OK\\\"\\n    }\\n  ]\\n}\\n[/block]\\nThe response includes:\\n  * `processingInfo` = details about the processing status and results of CVV/AVS checks\\n  * `transactionId` = a unique ID that BlueSnap assigns to this transaction\\nIf an issue occurs, whether a validation error with the information you sent, an error from the processor, or another type of issue, you will instead receive an HTTP 400 or 500 response with a BlueSnap error code and description. For more information, see [Error handling overview](/v2.1/docs/error-handling-overview).\\n\\n<br>\\n<a class=\\\"btn btn-primary\\\" href=\\\"#\\\" role=\\\"button\\\">Back to Top</a>\\n\\n##Step 3: Power tools: vaulted shoppers, metadata, PayPal, digital wallets, and more\\nNow that you know how to send a basic transaction, there are some more options you'll want to take advantage of in order to optimize payment processing according to your business needs. Here are a few key ones:\\n\\n###Vaulted shoppers\\nMake the checkout process smoother and payment processing easier by saving shopper details in BlueSnap and getting an ID that represents that shopper's profile. You can then use that ID to retrieve the shopper's details or process transactions. See [Create Vaulted Shopper](/v2.1/docs/create-vaulted-shopper).\\n\\n###Metadata\\nPass any data you wish along with the transaction. This can be useful if you want to send tax or shipping information, or details about the product such as size or color. See [Metadata](/v2.1/docs/metadata).\\n\\n###PayPal\\nMany merchants wish to offer shoppers the ability to pay seamlessly via PayPal, one of the most common payment methods. BlueSnap makes it easy to accept PayPal by simply connecting your PayPal and BlueSnap accounts and then using our dedicated API calls for PayPal transactions. See [PayPal](doc:paypal).\\n\\n###Digital wallets\\nBlueSnap supports digital wallets, like MasterPass and Visa Checkout, that enable your shoppers to make fast and easy payments across all their devices. These wallets securely store the shopper's payment and shipping details and support all major credit and debit card types, including MasterCard, Visa, American Express, Discover, and more.\\nFor more information, see:\\n  * [MasterPass Guide](/v1.0/docs/masterpass)\\n  * [Visa Checkout Guide](/v1.0/docs/visa-checkout)\\n\\n###More tutorials\\nSee these tutorials for more tips about getting the most out of the Payment API:\\n  * [Subscriptions guide](/v2.1/docs/subscription-management)\\n  * [Returning shopper tutorial](/v2.1/docs/returning-shopper-tutorial) \\n  * [Enabling and Disabling Cards](https://support.bluesnap.com/docs/payment-method-setup#section-enable-disable-specific-cards)\\n\\n<br>\\n<a class=\\\"btn btn-primary\\\" href=\\\"#\\\" role=\\\"button\\\">Back to Top</a>\\n\\n##Step 4: Testing\\n\\n###Test credit card numbers\\nWhen you are creating test requests, it is recommended to the use the test credit card numbers we provide, which are designed to generate specific success or failure responses. See [Test credit card numbers](doc:test-credit-cards).\\n\\n###Locating transactions in the Merchant Console\\nOnce you have sent a transaction and received a response, you can also go into the Merchant Console to verify that the order has appeared there.\\n[block:callout]\\n{\\n  \\\"type\\\": \\\"info\\\",\\n  \\\"body\\\": \\\"The order record will be found only if you sent the transaction request from the same account that you used in order to log in to the Merchant Console. It will not appear if you sent the request through the API Explorer in this documentation.\\\"\\n}\\n[/block]\\n1. In the Merchant Console, go to **Transactions > Find a Transaction**.\\n2. In the field next to **Reference Number**, enter the value from the `transactionId` field in the response you received from the API. \\n[block:image]\\n{\\n  \\\"images\\\": [\\n    {\\n      \\\"image\\\": [\\n        \\\"https://files.readme.io/48b97da-FindTransaction.png\\\",\\n        \\\"FindTransaction.png\\\",\\n        838,\\n        302,\\n        \\\"#f1f1f1\\\"\\n      ],\\n      \\\"sizing\\\": \\\"full\\\"\\n    }\\n  ]\\n}\\n[/block]\\n3. Click **Locate**, and then the order record will appear. It includes details such as the price, quantity, shopper information, options to resend the receipt or Instant Payment Notification, and more.\\n\\n<br>\\n<a class=\\\"btn btn-primary\\\" href=\\\"/docs/prepare-for-launch\\\" role=\\\"button\\\">You're ready to Launch & Get Paid!</a>\",\"excerpt\":\"Once you have securely collected your shopper's payment information, you can use BlueSnap's Payment API and your server-side code to start processing payments.\",\"slug\":\"make-a-payment-payment-api\",\"type\":\"basic\",\"title\":\"Charge a Card (Payment API)\"}QuickstartWelcomeBuild a Checkout FormCharge a Card (Payment API)Charge a Card (Extended Payment API)FX ConversionLaunch & Get PaidAPI UsageAbout the BlueSnap APIsSandbox & Production EnvironmentsAPI CredentialsAuthentication & HeadersPCI ComplianceMobileMobile Checkout DesignMobile Payment MethodsMobile ReportingAndroid SDKMarketplaceMarketplace OverviewVendor OnboardingVendor Verification RequirementsUpdating Vendor AccountsProcessing TransactionsReportingPayoutTest Card DataTest Credit Card NumbersReferenceCredit Card CodesCountry CodesCurrency CodesState and Province CodesLanguage CodesAVS Response CodesCVV Response CodesPayment API ReferenceExtended Payment API ReferenceGuidesStatement DescriptorHosted Payment FieldsClient-Side EncryptionFraud PreventionSubscriptionsAccount UpdaterIPNs (Webhooks)MasterPassVisa CheckoutPayPalACH/ECPReporting APILatAm Local ProcessingEnable Card TypesEdit this PageSuggest EditsCharge a Card (Payment API)Once you have securely collected your shopper's payment information, you can use BlueSnap's Payment API and your server-side code to start processing payments.\n\n\t\n\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\tThis tutorial will walk you through the essentials of using the Payment API to process payments, including:\n\nMaking your first credit card charge, using the Auth Capture API callReviewing the API response and possible errorsAdditional powerful features you may want to use, like vaulted shoppers, metadata, and PayPal supportTips for testing\nThis tutorial assumes that you are using BlueSnap's Hosted Payment Fields to collect shopper credit card information. If you don't yet have an app or form where you collect shopper payment details, go to this tutorial, where we'll walk you through setting up a checkout form.\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\tNeed a BlueSnap account?\n\t\t\t\t\tYou will need a BlueSnap account in order to get your API credentials and start sending requests from your server. If you don't have an account yet, you can sign up for one here.\nIf you just want to try out API requests and see responses without setting up your server or getting an account, you can do that right here in the documentation, using our API Explorer tool. Jump into any of the API endpoints and go to the Try it here! section. You can try out different parameters and test credit card numbers to see exactly how your test scenario would work.\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\tStep 1: Send an Auth Capture request\nIn order to process payments, you will send requests to the API from your server, using your own server-side language like Java, Ruby, Python, or another. The example in this tutorial provides just the JSON content of the request, which you will need to send as specified by your server-side language.\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\tJSON and XML supported\n\t\t\t\t\tThis tutorial shows JSON examples. The API also supports XML - for more info, see Payment API (XML).\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\tAuth Capture request overview\nIn this example, you'll create an Auth Capture request containing the payment information you collected from the shopper.\nAn Auth Capture performs two actions via a single request:\n\nauthorize: checks whether a credit card is valid and has the funds to complete a specific transaction (i.e. purchase)capture: submits the authorized transaction for settlement (i.e. payment by the shopper)\nThe request includes the cardTransaction resource, which contains information about the transaction, such as the transaction type, amount, and currency.\nThis tutorial assumes that you are using BlueSnap's Hosted Payment Fields to collect shopper credit card information, so the request must also include your Hosted Payment Fields token.\nExample Auth Capture request\nBelow is an example of a simple Auth Capture request with a Hosted Payment Fields token. This request contains the basic information required to process a one-time payment using a credit card. For more details and additional examples of this request, see Auth Capture.\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\tAuth Capture Request\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\tSending the request\nOnce you have built the request, send it to the transactions endpoint in the Payment API. In the BlueSnap sandbox environment, this is the URL for the transactions endpoint:\nBack to Top\nStep 2: Response and error handling\nAfter you send the request, if all goes well, you will receive a 200 OK response with content similar to the following:\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\tAuth Capture Response - 200 OK\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\tThe response includes:\n\n = details about the processing status and results of CVV/AVS checks = a unique ID that BlueSnap assigns to this transactionIf an issue occurs, whether a validation error with the information you sent, an error from the processor, or another type of issue, you will instead receive an HTTP 400 or 500 response with a BlueSnap error code and description. For more information, see Error handling overview.\nBack to Top\nStep 3: Power tools: vaulted shoppers, metadata, PayPal, digital wallets, and more\nNow that you know how to send a basic transaction, there are some more options you'll want to take advantage of in order to optimize payment processing according to your business needs. Here are a few key ones:\nVaulted shoppers\nMake the checkout process smoother and payment processing easier by saving shopper details in BlueSnap and getting an ID that represents that shopper's profile. You can then use that ID to retrieve the shopper's details or process transactions. See Create Vaulted Shopper.\nMetadata\nPass any data you wish along with the transaction. This can be useful if you want to send tax or shipping information, or details about the product such as size or color. See Metadata.\nPayPal\nMany merchants wish to offer shoppers the ability to pay seamlessly via PayPal, one of the most common payment methods. BlueSnap makes it easy to accept PayPal by simply connecting your PayPal and BlueSnap accounts and then using our dedicated API calls for PayPal transactions. See PayPal.\nDigital wallets\nBlueSnap supports digital wallets, like MasterPass and Visa Checkout, that enable your shoppers to make fast and easy payments across all their devices. These wallets securely store the shopper's payment and shipping details and support all major credit and debit card types, including MasterCard, Visa, American Express, Discover, and more.For more information, see:\n\nMasterPass GuideVisa Checkout Guide\nMore tutorials\nSee these tutorials for more tips about getting the most out of the Payment API:\n\nSubscriptions guideReturning shopper tutorial Enabling and Disabling Cards\nBack to Top\nStep 4: Testing\nTest credit card numbers\nWhen you are creating test requests, it is recommended to the use the test credit card numbers we provide, which are designed to generate specific success or failure responses. See Test credit card numbers.\nLocating transactions in the Merchant Console\nOnce you have sent a transaction and received a response, you can also go into the Merchant Console to verify that the order has appeared there.\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tThe order record will be found only if you sent the transaction request from the same account that you used in order to log in to the Merchant Console. It will not appear if you sent the request through the API Explorer in this documentation.\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\nIn the Merchant Console, go to Transactions > Find a Transaction.In the field next to Reference Number, enter the value from the  field in the response you received from the API. \n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\nClick Locate, and then the order record will appear. It includes details such as the price, quantity, shopper information, options to resend the receipt or Instant Payment Notification, and more.\nYou're ready to Launch & Get Paid!\n\n\t\t\t\t\n\t\t\t\n\t\t\n\t\n\n  \n  \n    \n\t  \n    \n    \n    \n    \n    Legal  |  Privacy Policy |  BlueSnap Terms & Conditions  |  \u00a9 2016  BlueSnap Inc. All rights reserved.", "time": "2017-05-24T23:39:15.182808"}
{"url": "https://developer.visa.com/reference", "site": "visa.com", "descr": "Contact Sales: 1 866-374-0948\nPRODUCTS\n\n\tAPIs\n\t\n\t\tAggregation API\n\t\tAccount Verification API\n\t\tOpen Banking API\n\t\teBills API\n\t\tRisk Insights\n\t\tMoney Movement API\n\t\n\n\tFeatured FinApps\n\t\n\t\tAccount Summary\n\t\tBudgets\n\t\tCash Flow Analysis\n\t\tExpense & Income Analysis\n\t\tInvestment Holding\n\t\tNet Worth Summary\n\t\n\n\tData Analytics\n\t\n\t\tTransaction Data Enrichment\n\t\tFor Financial Institutions\n\t\tCredit Risk Modeling\n\t\tConsumer Spending Data\n\t\tRetail Competitive Insights\n\t\n\n\n\nSOLUTIONS\n\n\tIndustry Solutions\n\t\n\t\tWealth Management\n\t\tPersonal Financial Management\n\t\tRisk Insight Suite\n\t\tRetail Banking\n\t\tPayments\n\t\tData Clarity\n\t\n\n\tDeveloper Solutions\n\t\n\t\tBuild Financial Apps\n\t\tCustomer Activation\n\t\tFraud Reduction\n\t\n\n\n\nSERVICES\n\n\tProfessional Services\n\tClient Services\n\tDeveloper Support\n\tSecurity Dashboard\n\n\nRESOURCES\nCOMPANY\n\n\tWhy Yodlee\n\tCareers\n\tIndia Office\n\tLaunchpad\n\tIncubator\n\tInvestor Relations\n\tNewsroom\n\tContact Us\n\n\nTransactions\nFastLink\nMore\u2026\nPremium Features\nTandem\nSense\n\n\n\t\t\n\t\t\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t          \n\n          \n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\t\n\nCONTACT SALES: 1 866-374-0948DEVELOPER PORTALBlogContact UsAustralia and New ZealandEMEAGlobal\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPRODUCTS\n\n\tAPIs\n\t\n\t\tAggregation API\n\t\tAccount Verification API\n\t\tOpen Banking API\n\t\teBills API\n\t\tRisk Insights\n\t\tMoney Movement API\n\t\n\n\tFeatured FinApps\n\t\n\t\tAccount Summary\n\t\tBudgets\n\t\tCash Flow Analysis\n\t\tExpense & Income Analysis\n\t\tInvestment Holding\n\t\tNet Worth Summary\n\t\n\n\t\u00a0\n\t\n\t\tSave for a Goal\n\t\tTransactions\n\t\tFastLink\n\t\tMore\u2026\n\t\tPremium Features\n\t\tTandem\n\t\tSense\n\t\n\n\tData Analytics\n\t\n\t\tTransaction Data Enrichment\n\t\tFor Financial Institutions\n\t\tCredit Risk Modeling\n\t\tConsumer Spending Data\n\t\tRetail Competitive Insights\n\t\n\n\n\nSOLUTIONS\n\n\tIndustry Solutions\n\t\n\t\tWealth Management\n\t\tPersonal Financial Management\n\t\tRisk Insight Suite\n\t\tRetail Banking\n\t\tPayments\n\t\tData Clarity\n\t\n\n\tDeveloper Solutions\n\t\n\t\tBuild Financial Apps\n\t\tCustomer Activation\n\t\tFraud Reduction\n\t\n\n\n\nSERVICES\n\n\tProfessional Services\n\tClient Services\n\tDeveloper Support\n\tSecurity Dashboard\n\n\nRESOURCES\nCOMPANY\n\n\tWhy Yodlee\n\tCareers\n\tIndia Office\n\tLaunchpad\n\tIncubator\n\tNewsroom\n\tInvestor Relations\n\tNewsroom\n\tContact Us\n\n\n\n\n\n \n \n\n\n\t\t\t\t\n\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t            \n            \t\t\t\n\t\t\t                \n                    \n\n                        \n                            Money Movement API\n\n                                                \n                        \n                    \n\n\t\t\t\t\t\n                \n            \n        \t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\r\n\r\n\r\n\t\t\r\n\t\r\n\t\r\n\t\t\r\n\t\t\r\n\t\t\t\t\r\n\t\t\r\n\r\n\t\t\t\r\n\n\t\n\t\t\n\t\t\tEnable Instant Access to Funds Digitally\nBypass the major hurdles involved with online banking and give consumers instant access to their funds with the Envestnet\u00ae | Yodlee\u00ae Money Movement APIs. With an open, API-driven platform, consumers can connect to their accounts, transfer funds from accounts, pay bills, and more, all from a single, secure payments environment.\nInstead of forcing consumer to look up account information or verify micro deposits to their bank accounts over a period of days, Yodlee Money Movement APIs enable consumers to make online payments using their online banking credentials. The access to the account can be established and the account balance verified in seconds.\nTake control of money movement and offer consumers a flexible, fast, and secure money movement experience that integrates easily into your online banking platform or mobile app. It\u2019s a simple and gratifying consumer experience that will keep consumers engaged for the long-term.\n\n\t\t\n\t\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\t\n\t\t\n\t\t\tKey Benefits\n\n\t\t\n\t\n\n\t\n\t\t\n\t\t\t\nAccount-to-account funds transfer\nEnable users to make payments online or via a mobile app\nEnables immediate account access for expedited payments while reducing risk\nSimple and intuitive user interface\nIntelligent payments routing (for least cost or most profit)\n\n\n\t\t\n\t\n\n\t\n\t\t\n\t\t\t\nQuick transaction authorization\nCompatible with all major open and proprietary US remittance networks\nReal-time risk management capabilities\nComplete regulatory and reporting compliance\n\n\n\t\t\n\t\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\t\n\t\t\n\t\t\tMore APIs\n\n\t\t\n\t\n\r\n\r\n        \r\n\r\n       \r\n   \r\n   AGGREGATION API \r\n            \r\n        \r\n\r\n\r\n\r\n\r\n        \r\n\r\n       \r\n   \r\n   ACCOUNT VERIFICATION API \r\n            \r\n        \r\n\r\n\r\n\r\n\r\n        \r\n\r\n       \r\n   \r\n   OPEN BANKING API \r\n            \r\n        \r\n\r\n\r\n\r\n\r\n        \r\n\r\n       \r\n   \r\n   eBILLS API \r\n            \r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\t\n\t\t\n\t\t\tRelated Resources\n\n\t\t\n\t\nAggregation API eBook: 7 Reasons to Bank on Financial APIsIAV API Data Sheet: Reduce Risk for Bank Payments Using the Envestnet | Yodlee Account Verification APIIAV API eBook: 7 Ways to Optimize Your Mobile Payments AppMore Resources\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\t\n\t\t\n\t\t\tGo Under the Hood\n\n\t\t\n\t\n\n\t\n\t\t\n\t\t\tIncubator\nGot a vision or a prototype in need of financial data? It\u2019s time to apply for the incubator program!\n\n\t\t\n\t\nLearn More\n\t\n\t\t\n\t\t\tDeveloper Portal\nGet access to the latest documentation, sample code, testing tools, and more on our Developer Portal.\n\n\t\t\n\t\nLog In\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\t\n\t\t\n\t\t\tClients Working With Us\n\n\t\t\n\t\n\r\n\r\n\n\t\t\t\r\n\t\t\r\n\t\t\r\n\t\t\t\r\n\t\r\n\t\r\n\t\r\n\r\n\t\t\r\n\t\r\n\r\n\r\n\r\n\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\r\n\r\n       \t\t\t\r\n        \r\n         \r\n          \r\n             \r\n              \r\n                Ready To Talk?Contact Us\r\n                          \r\n            \r\n          \r\n         \r\n               \r\n               \r\n       \r\n       \r\n         \r\n          \r\n             \r\n              \r\n                \r\n                                Newsletter Sign-up:\r\n                                  \r\n                  \r\n                  \r\n                      \r\n                  \r\n                   \r\n                                      \r\n                          \r\n            \r\n          \r\n         \r\n                \r\n      \r\n      \r\n\t\t\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\t\t\t\t\t\t                  \r\n          \r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tCompany InfoCompany\nContact Us\nOur Team\nEvents\nCareers\nIndia Office\nInvestor Relations\nNewsroom\nTrending\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tOfferingsData Platform\nDeveloper APIs\nData Analytics\nProducts\nSolutions\nServices\nResources\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tLegalPrivacy Notice\nYodlee Security\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tYodlee Portals\t\t\t\r\n\r\n\r\nYodlee Blog\r\nDeveloper Portal\r\nLaunchpad\r\nIncubator\r\nMoney by Envestnet|Yodlee\r\nYodlee Labs \r\nNEW Yodlee MoneyCenter\r\nYodlee SmallBusiness\r\n\r\n\r\n\r\n\r\nEnvestnet\r\nPMC\u00ae\r\nTamarac\u2122\r\nERS\r\nWheelhouse Analytics\r\n\r\n\r\n\r\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\r\n\r\n        \t\r\n\t\t\t\t\t\r\n            \r\n            \r\n            \r\n                                    \r\n          \r\n\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\r\n     \r\n      \r\n      \t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t\u00a9 2017 Envestnet | Yodlee.\u2122", "time": "2017-05-24T23:39:19.662028"}
{"url": "https://developer.visa.com/reference", "site": "visa.com", "descr": "SquareAccept Credit Cards From An iPhone, Android or iPad - Square\n  MANAGE APPS\n\n  Connect API v2 Reference\n  \n    \n  \n  \n\n    \n      \n        Connect API v2 Conventions\n      \n      \n          \n            Client libraries\n          \n          \n          \n          \n            Swagger specification\n          \n          \n          \n          \n            Running Postman\n          \n          \n          \n          \n            Endpoint paths\n          \n          \n          \n          \n            API versions\n          \n          \n          \n          \n            Endpoint names and return values\n          \n          \n          \n          \n            Request and response headers\n          \n          \n          \n          \n            Providing parameters\n          \n          \n              GET and DELETE requests\n              POST and PUT requests\n          \n          \n            Working with monetary amounts\n          \n          \n          \n          \n            Working with dates\n          \n          \n              Date ranges\n          \n          \n            Idempotency keys\n          \n          \n          \n          \n            Paginating results\n          \n          \n          \n          \n            Handling duplicate results\n          \n          \n          \n          \n            Handling the enum value OTHER\n          \n          \n          \n          \n            Replacing application credentials\n          \n          \n          \n          \n            Rate limiting\n          \n          \n          \n          \n            Handling errors\n          \n          \n          \n          \n            Using OAuth\n          \n          \n          \n      \n\n  \n    \n      Endpoints\n    \n    \n        \n          Transactions\n        \n        \n            Charge\n            ListTransactions\n            CreateRefund\n            ListRefunds\n            CaptureTransaction\n            VoidTransaction\n            RetrieveTransaction\n        \n        \n          Locations\n        \n        \n            ListLocations\n        \n        \n          Customers\n        \n        \n            CreateCustomer\n            ListCustomers\n            UpdateCustomer\n            RetrieveCustomer\n            DeleteCustomer\n            CreateCustomerCard\n            DeleteCustomerCard\n        \n        \n          Checkout\n        \n        \n            CreateCheckout\n        \n        \n          Catalog\n        \n        \n            RetrieveCatalogObject\n            DeleteCatalogObject\n            UpsertCatalogObject\n            ListCatalog\n            BatchUpsertCatalogObjects\n            BatchRetrieveCatalogObjects\n            SearchCatalogObjects\n            BatchDeleteCatalogObjects\n            UpdateItemTaxes\n            UpdateItemModifierLists\n            CatalogInfo\n        \n    \n  \n  \n    \n      Data Types\n    \n    \n        \n          Address\n        \n        \n          Card\n        \n        \n          CatalogCategory\n        \n        \n          CatalogDiscount\n        \n        \n          CatalogIdMapping\n        \n        \n          CatalogInfoResponseLimits\n        \n        \n          CatalogItem\n        \n        \n          CatalogItemModifierListInfo\n        \n        \n          CatalogItemVariation\n        \n        \n          CatalogModifier\n        \n        \n          CatalogModifierList\n        \n        \n          CatalogModifierOverride\n        \n        \n          CatalogObject\n        \n        \n          CatalogObjectBatch\n        \n        \n          CatalogQuery\n        \n        \n          CatalogQueryExact\n        \n        \n          CatalogQueryItemsForModifierList\n        \n        \n          CatalogQueryItemsForTax\n        \n        \n          CatalogQueryPrefix\n        \n        \n          CatalogQueryRange\n        \n        \n          CatalogQuerySortedAttribute\n        \n        \n          CatalogQueryText\n        \n        \n          CatalogTax\n        \n        \n          CatalogV1Id\n        \n        \n          Checkout\n        \n        \n          CreateOrderRequestLineItem\n        \n        \n          CreateOrderRequestOrder\n        \n        \n          Customer\n        \n        \n          CustomerGroupInfo\n        \n        \n          CustomerPreferences\n        \n        \n          Device\n        \n        \n          Error\n        \n        \n          ItemVariationLocationOverrides\n        \n        \n          Location\n        \n        \n          Money\n        \n        \n          Order\n        \n        \n          OrderLineItem\n        \n        \n          Refund\n        \n        \n          Tender\n        \n        \n          TenderCardDetails\n        \n        \n          TenderCashDetails\n        \n        \n          Transaction\n        \n    \n  \n  \n    \n      Enums\n    \n    \n        \n          CardBrand\n        \n        \n          CatalogDiscountType\n        \n        \n          CatalogItemProductType\n        \n        \n          CatalogModifierListSelectionType\n        \n        \n          CatalogObjectType\n        \n        \n          CatalogPricingType\n        \n        \n          Country\n        \n        \n          Currency\n        \n        \n          ErrorCategory\n        \n        \n          ErrorCode\n        \n        \n          InventoryAlertType\n        \n        \n          LocationCapability\n        \n        \n          RefundStatus\n        \n        \n          SortOrder\n        \n        \n          TaxCalculationPhase\n        \n        \n          TaxInclusionType\n        \n        \n          TenderCardDetailsEntryMethod\n        \n        \n          TenderCardDetailsStatus\n        \n        \n          TenderType\n        \n        \n          TransactionProduct\n        \n    \n  \n  \n    \n      API Changelog\n    \n  \n\n\n\n  \n\n\n  \n    \n      \n  HTTP\n    PHP\n    Ruby\n\n\n    \n\n    \n      \n        Connect API v2 Conventions\nClient libraries\nSquare provides client libraries for Connect V2 in a variety of programming languages.\nSee Client libraries for a full list.\nSwagger specification\nVersion 2 of the Connect API is defined with the\nSwagger specification. The definition is\navailable on Github. You\ncan use this definition to simplify certain development tasks, such as by\ngenerating custom client libraries.\nSee Generating client libraries and other tools with Swagger\nfor more information.\nRunning Postman\nPostman is a cross platform app and Chrome extension to make it easy to explore Restful APIs. The Run in Postman button below opens a collection of API endpoints directly in the user's Postman app.\nClick Run in Postman below to explore our V1 and V2 API collection.\n\nEndpoint paths\nConnect API endpoints are hosted from the base URL .\nFor example, the ListTransactions endpoint's full\npath is:\nMost endpoint paths include a  parameter that indicates which of a\nbusiness's locations your application is acting on behalf of. You can get a\nbusiness's location IDs with the ListLocations endpoint.\nAPI versions\nAn endpoint's API version is included in its path. Bug fixes and minor feature\nadditions might be made to an endpoint's behavior without advancing its version\nnumber. This can include adding optional parameters or response fields. To\nprevent future compatibility issues, your application should be prepared to\nreceive response fields beyond those currently returned by a given endpoint.\nFunctionality is never removed from a particular version of an endpoint, nor\ndo field names or types change.\nThe most recent version of the the Connect API is . Connect API applications\ncan communicate with endpoints from all available versions.\nEndpoint names and return values\nAn endpoint's name indicates the type of data it handles and the action it\nperforms on that data. The most common actions are:\n\nFor example, the ListTransactions endpoint returns\nan array of processed payments, and the CreateCustomer\nendpoint creates and persists a customer.\nRequest and response headers\nRequests to Connect API endpoints must include the following HTTP headers:\nIn the place of , provide either your application's personal access token (available from the application dashboard) or an access token you generated with the OAuth API.\n and  requests must include one additional header:\nBy default, all endpoint responses provide data as JSON in the response body and include a  header.\nProviding parameters\nThe way you provide parameters to a Connect API request depends on the HTTP method of the request.\n and  requests\nFor  and  requests, you provide parameters in a query string you\nappend to your request's URL. For example, you provide the  parameter\nto the ListTransactions endpoint like so:\nValues for query parameters must be URL-escaped. For example, to provide the value  as the  parameter of the\nListTransactions endpoint, you specify the following:\n and  requests\nFor  and  requests, you instead provide parameters as JSON in the body of your request.\nFor example, the body of a request to the CreateCustomer\nendpoint looks like this:\nWorking with monetary amounts\nAll monetary amounts in the Connect API are represented by the  object, which has the following structure:\nImportant: Unlike version 1 of the Connect API, all monetary amounts returned by v2 endpoints are positive. (In v1, monetary amounts are negative if they represent money being paid by a merchant, instead of money being paid to a merchant.)\nThe  field is always in the smallest denomination of the currency indicated by . When  is  (US dollars),  is in cents. The object shown above represents $4.00.\nThe  field is in ISO 4217 format.\nWorking with dates\nAll representations of dates are strings in RFC 3339 format.\nYou can provide date strings that are either UTC (for example, ) or offset from UTC to indicate time zone (for example,  for eight hours behind UTC). If you provide offset dates, be sure to account for daylight saving time correctly, if applicable.\nDate strings returned by the Connect API are always UTC.\nDate ranges\nList endpoints such as ListTransactions often\naccept an optional date range with the  and  parameters.\nThey also accept an optional  parameter, which indicates whether results are returned in chronological order (oldest first) or reverse-chronological order (newest first).\nRegardless of ,  is the earlier date and  is the later date.\n\nWhen  is  (newest-first),  is exclusive and\n is inclusive.\nWhen  is  (oldest-first),  is inclusive and\n is exclusive.\n\nThe described date range must cover at least one millisecond.\nIdempotency keys\nCertain Connect API endpoints (currently Charge and\nCreateRefund) require an  string\nparameter. Any time you want to initiate a new card transaction or refund,\nyou should provide a new, unique value for this parameter.\nVirtually all popular programming languages provide a function for generating\nunique strings. For example:\n\nIdempotency keys must be unique per business, not per application. They cannot\nexceed 128 characters.\nIf you're unsure whether a particular transaction succeeded (for example, if you\ndon't receive a response from an endpoint for some reason), you can reattempt it\nwith the same idempotency key without worrying about creating a duplicate transaction.\nPaginating results\nList endpoints such as ListTransactions might\npaginate the results they return. This means that instead of returning all results\nin a single response, these endpoints might return some of the results, along\nwith a  in the response body that links to the next set of results.\nSend a followup request to the same endpoint, providing the  value\nreturned in the previous response as a query parameter, to fetch the next set of\nresults. Repeat this process until you receive a response without a .\nHandling duplicate results\nList endpoints might return duplicate results. Use the  attribute of the returned objects to identify\nany such duplicates.\nHandling the enum value \nSome Connect API enums include the value . If you retrieve an object that currently has the value \nfor one of its fields, that field might have a different value if you retrieve the object again at a later\ndate, when an appropriate value has been added to the enum.\nEnum values besides  never change retroactively.\nReplacing application credentials\nYou can replace your application's personal access token or application secret from the application dashboard.\n\nClick Replace Token next to the Personal Access Token field to generate a new token for your application.\nClick Replace Secret next to the Application Secret field to generate a new secret for your application.\n\nReplacing an application credential immediately invalidates the previous credential. Make sure you update your\napplication accordingly.\nRate limiting\nIf Connect API endpoints receive too many requests associated with the same application or access token in a short time window, they might respond with a 429 Too Many Requests error. If this occurs, try your request again at a later time.\nHandling errors\nConnect API endpoints use HTTP protocol status codes to indicate errors. Error code values range from 400 to 599.\nAll Connect v2 endpoints include an  array in their response body if any errors occurred during a request. The response body has the following structure:\nEach error in the array has the following fields:\n\n indicates which high-level category the error falls into.\nThis value never changes for a particular error. See ErrorCategory\nfor possible values.\n indicates the exact type of error that occurred. This value never\nchanges for a particular error. See ErrorCode for possible values.\n is a human-readable string that will help you diagnose the error. This value can change for a particular error.\n\nUsing OAuth\nIf you are developing a Connect v2 application for multiple merchants to use,\nyou must request specific permissions from those merchants with the OAuth API.\nSee the OAuth API Reference for more information.\n\n      \n      \n  API Sandbox Credentials\n  \n  Connect API v2 provides a sandbox that lets you test out API endpoints in a non-production\n  environment. Transactions created in the sandbox are not sent through to card networks, and\n  cards are never charged. Below are API credentials you can use to play with Square's APIs.\n  \n\n  \n    \n      Access Token\n      \n      \n    \n    \n      Application ID\n      \n      \n    \n    \n      Location ID\n      \n      \n    \n  \n\n  Read the\n    HTTP\n    PHP\n    Ruby\n    documentation:\n  \n  \n    Testing using the API sandbox\n    Accept a payment (REST)\n\n    Testing using the API sandbox\n    Accept a payment (PHP)\n\n    Testing using the API sandbox\n    Accept a payment (Ruby)\n  \n\n      \n  Setup your SDK environment\n  \n    To set up your\n    PHP\n    Ruby\n    SDK, follow the example below:\n  \n\n  \n    \n    \n  \n\n  \n    For more information about the\n    PHP\n    Ruby\n    SDK:\n  \n  \n    Read how to setup your SDK environment:\n  \n\n  \n    SDK setup guides\n    PHP SDK setup guide\n    Ruby SDK setup guide\n  \n\n    \n\n    \n    \n      \n      API Endpoints\n    \n    \n\n      \n      \n        \n        Transactions\n      \n      \n        \n\n\n\nCharge\n\n\nCharges a card represented by a card nonce or a customer's card on file.\n\nYour request to this endpoint must include either:\n\nA value for the  parameter (to charge a card nonce generated\nwith the )Values for the  and  parameters (to charge\na customer's card on file)\n\nIn order for an e-commerce payment to potentially qualify for\nSquare chargeback protection, you\nmust provide values for the following parameters in your request:\n\nAt least one of  or \n\nWhen this response is returned, the amount of Square's processing fee might not yet be\ncalculated. To obtain the processing fee, wait about ten seconds and call\nRetrieveTransaction. See the \nfield of each Tender included in the transaction.\n\nRequired permissions:\n\nPath Parameters\n\n\n\nBody Parameters\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nListTransactions\n\n\nLists transactions for a particular location.\n\nMax results per page: 50\n\nRequired permissions:\n\nPath Parameters\n\n\nQuery Parameters\n\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nCreateRefund\n\n\nInitiates a refund for a previously charged tender.\n\nRequired permissions:\n\nPath Parameters\n\n\n\nBody Parameters\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nListRefunds\n\n\nLists refunds for one of a business's locations.\n\nRefunds with a  of  are not currently included in this\nendpoint's response.\n\nMax results per page: 50\n\nRequired permissions:\n\nPath Parameters\n\n\nQuery Parameters\n\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nCaptureTransaction\n\n\nCaptures a transaction that was created with the Charge\nendpoint with a  value of .\n\nSee Delayed capture transactions\nfor more information.\n\nRequired permissions:\n\nPath Parameters\n\n\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nVoidTransaction\n\n\nCancels a transaction that was created with the Charge\nendpoint with a  value of .\n\nSee Delayed capture transactions\nfor more information.\n\nRequired permissions:\n\nPath Parameters\n\n\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nRetrieveTransaction\n\n\nRetrieves details for a single transaction.\n\nRequired permissions:\n\nPath Parameters\n\n\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n      \n      \n        \n        Locations\n      \n      \n        \n\n\n\nListLocations\n\n\nProvides the details for all of a business's locations.\n\nMost other Connect API endpoints have a required  path parameter.\nThe  field of the  objects returned by this\nendpoint correspond to that  parameter.\n\nRequired permissions:\n\n\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n      \n      \n        \n        Customers\n      \n      \n        \n\n\n\nCreateCustomer\n\n\nCreates a new customer for a business, which can have associated cards on file.\n\nYou must provide at least one of the following values in your request to this\nendpoint:\n\n\n\nThis endpoint does not accept an idempotency key. If you accidentally create\na duplicate customer, you can delete it with the\nDeleteCustomer endpoint.\n\nRequired permissions:\n\n\n\nBody Parameters\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nListCustomers\n\n\nLists a business's customers.\n\nRequired permissions:\n\n\nQuery Parameters\n\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nUpdateCustomer\n\n\nUpdates the details of an existing customer.\n\nYou cannot edit a customer's cards on file with this endpoint. To make changes\nto a card on file, you must delete the existing card on file with the\nDeleteCustomerCard endpoint, then create a new one with the\nCreateCustomerCard endpoint.\n\nRequired permissions:\n\nPath Parameters\n\n\n\nBody Parameters\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nRetrieveCustomer\n\n\nReturns details for a single customer.\n\nRequired permissions:\n\nPath Parameters\n\n\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nDeleteCustomer\n\n\nDeletes a customer from a business, along with any linked cards on file.\n\nRequired permissions:\n\nPath Parameters\n\n\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nCreateCustomerCard\n\n\nAdds a card on file to an existing customer.\n\nRequired permissions:\n\nPath Parameters\n\n\n\nBody Parameters\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nDeleteCustomerCard\n\n\nRemoves a card on file from a customer.\n\nRequired permissions:\n\nPath Parameters\n\n\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n      \n      \n        \n        Checkout\n      \n      \n        \n\n\n\nCreateCheckout\n\n\nCreates a Checkout response that links a\n and  that customers can be directed to in\norder to provide their payment information using a payment processing\nworkflow hosted on connect.squareup.com.\n\nRequired permissions:\n\nPath Parameters\n\n\n\nBody Parameters\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n      \n      \n        \n        Catalog\n      \n      \n        \n\n\n\nRetrieveCatalogObject\n\n\nReturns a single CatalogItem as a\nCatalogObject based on the provided ID. The returned\nobject includes all of the relevant CatalogItem\ninformation including: CatalogItemVariation\nchildren, references to its\nCatalogModifierList objects, and the ids of\nany CatalogTax objects that apply to it.\n\nRequired permissions:\n\nPath Parameters\n\n\nQuery Parameters\n\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nDeleteCatalogObject\n\n\nDeletes a single CatalogObject based on the\nprovided ID and returns the set of successfully deleted IDs in the response.\nDeletion is a cascading event such that all children of the targeted object\nare also deleted. For example, deleting a CatalogItem\nwill also delete all of its\nCatalogItemVariation children.\n\nRequired permissions:\n\nPath Parameters\n\n\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nUpsertCatalogObject\n\n\nCreates or updates the target CatalogObject.\n\nRequired permissions:\n\n\n\nBody Parameters\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nListCatalog\n\n\nReturns a list of CatalogObjects that includes\nall objects of a set of desired types (for example, all CatalogItem\nand CatalogTax objects) in the catalog. The types parameter\nis specified as a comma-separated list of valid CatalogObject types:\n, , , , , , .\n\nRequired permissions:\n\n\nQuery Parameters\n\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nBatchUpsertCatalogObjects\n\n\nCreates or updates up to 10,000 target objects based on the provided\nlist of objects. The target objects are grouped into batches and each batch is\ninserted/updated in an all-or-nothing manner. If an object within a batch is\nmalformed in some way, or violates a database constraint, the entire batch\ncontaining that item will be disregarded. However, other batches in the same\nrequest may still succeed. Each batch may contain up to 1,000 objects, and\nbatches will be processed in order as long as the total object count for the\nrequest (items, variations, modifier lists, discounts, and taxes) is no more\nthan 10,000.\n\nRequired permissions:\n\n\n\nBody Parameters\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nBatchRetrieveCatalogObjects\n\n\nReturns a set of objects based on the provided ID.\nEach CatalogItem returned in the set includes all of its\nchild information including: all of its\nCatalogItemVariation objects, references to\nits CatalogModifierList objects, and the ids of\nany CatalogTax objects that apply to it.\n\nRequired permissions:\n\n\n\nBody Parameters\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nSearchCatalogObjects\n\n\nQueries the targeted catalog using a variety of query types\n(CatalogQuerySortedAttribute,\n(CatalogQueryExact,\n(CatalogQueryRange,\n(CatalogQueryText,\n(CatalogQueryItemsForTax,\n(CatalogQueryItemsForModifierList).\n\nRequired permissions:\n\n\n\nBody Parameters\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nBatchDeleteCatalogObjects\n\n\nDeletes a set of CatalogItems based on the\nprovided list of target IDs and returns a set of successfully deleted IDs in\nthe response. Deletion is a cascading event such that all children of the\ntargeted object are also deleted. For example, deleting a CatalogItem will\nalso delete all of its CatalogItemVariation\nchildren.\n\n succeeds even if only a portion of the targeted\nIDs can be deleted. The response will only include IDs that were\nactually deleted.\n\nRequired permissions:\n\n\n\nBody Parameters\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nUpdateItemTaxes\n\n\nUpdates the CatalogTax objects that apply to the\ntargeted CatalogItem without having to perform an\nupsert on the entire item.\n\nRequired permissions:\n\n\n\nBody Parameters\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nUpdateItemModifierLists\n\n\nUpdates the CatalogModifierList objects\nthat apply to the targeted CatalogItem without having\nto perform an upsert on the entire item.\n\nRequired permissions:\n\n\n\nBody Parameters\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n        \n\n\n\nCatalogInfo\n\n\nReturns information about the Square Catalog API, such as batch size\nlimits for .\n\nRequired permissions:\n\n\n\n\nResponse fields\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      Example HTTP Request\n    \n    \n\n    \n      Example Request in PHP\n    \n    \n    \n      Example Request in Ruby\n    \n    \n  \n\n  \n    \n      Example Response\n    \n    \n  \n\n\n\n\n    \n    \n      \n      API Data Types\n    \n    \n\n      \n\n\n\n\n\nRepresents a physical address.\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nRepresents the non-confidential details of a credit card.\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nA category to which an CatalogItem belongs in the Catalog object model.\n\nFields\n\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      CatalogCategory Example\n    \n    \n      \n    \n  \n\n\n\n      \n\n\n\n\n\nA discount in the Catalog object model.\n\nFields\n\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      CatalogDiscount Example\n    \n    \n      \n    \n  \n\n\n\n      \n\n\n\n\n\nA mapping between a client-supplied temporary ID and a permanent server ID.\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\n\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nAn item (i.e., product family) in the Catalog object model.\n\nFields\n\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      CatalogItem Example\n    \n    \n      \n    \n  \n\n\n\n      \n\n\n\n\n\nControls the properties of a CatalogModifierList as it applies to this CatalogItem.\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nAn item variation (i.e., product) in the Catalog object model.\n\nFields\n\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      CatalogItemVariation Example\n    \n    \n      \n    \n  \n\n\n\n      \n\n\n\n\n\nA modifier in the Catalog object model.\n\nFields\n\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      CatalogModifier Example\n    \n    \n      \n    \n  \n\n\n\n      \n\n\n\n\n\nA modifier list in the Catalog object model. A CatalogModifierList\ncontains Modifiers that can be applied to a CatalogItem\nat the time of sale.\n\nFor example, a modifier list \"Condiments\" that would apply to a \"Hot Dog\" CatalogItem might\ncontain CatalogModifiers \"Ketchup\", \"Mustard\", and \"Relish\". The\n field specifies whether or not multiple selections from the modifier list are allowed.\n\nFields\n\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      CatalogModifierList Example\n    \n    \n      \n    \n  \n\n\n\n      \n\n\n\n\n\n\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nThe wrapper object for object types in the Catalog data model. The type\nof a particular  is determined by the value of\n and only the corresponding data field may be set.\n\nif type = , only  will be populated and it will contain a valid CatalogItem object.if type = , only  will be populated and it will contain a valid CatalogItemVariation object.if type = , only  will be populated and it will contain a valid CatalogModifier object.if type = , only  will be populated and it will contain a valid CatalogModifierList object.if type = , only  will be populated and it will contain a valid CatalogCategory object.if type = , only  will be populated and it will contain a valid CatalogDiscount object.if type = , only  will be populated and it will contain a valid CatalogTax object.\n\nFor a more detailed discussion of the Catalog data model, please see the\nCatalog Overview.\n\nFields\n\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      CatalogObject Schema\n    \n    \n      \n    \n  \n\n\n\n      \n\n\n\n\n\nA batch of CatalogObjects.\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nA query to be applied to a SearchCatalogObjectsRequest.\nOnly one query field may be present.\n\nWhere an attribute name is required, it should be specified as the name of any field\nmarked \"searchable\" from the structured data types for the desired result object type(s)\n(CatalogItem, CatalogItemVariation,\nCatalogCategory, CatalogTax,\nCatalogDiscount, CatalogModifierList,\nCatalogModifier).\n\nFor example, a query that should return Items may specify attribute names from\nany of the searchable fields of the CatalogItem data type, namely\n, , and .\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\n\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\n\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\n\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\n\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\n\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\n\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\n\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nA tax in the Catalog object model.\n\nFields\n\n\n\n\n\n  \n    \n  HTTP\n    PHP\n    Ruby\n\n\n  \n\n  \n    \n      CatalogTax Example\n    \n    \n      \n    \n  \n\n\n\n      \n\n\n\n\n\nAn Items Connect V1 object ID along with its associated [location][#type-location] ID.\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nSquare Checkout lets merchants accept online payments for supported\npayment types using a checkout workflow hosted on squareup.com.\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nRepresents a line item to include in an order. Each line item describes\na different product to purchase, with its own quantity and price details.\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nThe object describes the order.\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nRepresents one of a business's customers, which can have one or more\ncards on file associated with it.\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nContains some brief information about a customer group with its identifier included.\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nRepresents a particular customer's preferences.\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\n\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nRepresents an error encountered during a request to the Connect API.\n\nSee Handling errors for more information.\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nPrice and inventory alerting overrides for a CatalogItemVariation at a specific [location][#type-location].\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nRepresents one of a business's locations.\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nRepresents an amount of money.\n\nImportant: Unlike version 1 of the Connect API, all monetary amounts\nreturned by v2 endpoints are positive. (In v1, monetary amounts are negative\nif they represent money being paid by a merchant, instead of money being\npaid to a merchant.)\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nContains all information related to a single order to process with Square,\nincluding line items that specify the products to purchase\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nRepresents a line item in an order. Each line item describes a different\nproduct to purchase, with its own quantity and price details.\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nRepresents a refund processed for a Square transaction.\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nRepresents a tender (i.e., a method of payment) used in a Square transaction.\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nRepresents additional details of a tender with   or \n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nRepresents the details of a tender with  .\n\nFields\n\n\n\n\n\n\n      \n\n\n\n\n\nRepresents a transaction processed with Square, either with the\nConnect API or with Square Register.\n\nThe  field of this object lists all methods of payment used to pay in\nthe transaction.\n\nFields\n\n\n\n\n\n\n\n    \n    \n      \n      API Enums\n    \n    \n      \n\n  \n  \n\n  Indicates a credit card's brand, such as .\n\n  Fields\n  \n\n\n      \n\n  \n  \n\n  How to apply a CatalogDiscount to a CatalogItem.\n\n  Fields\n  \n\n\n      \n\n  \n  \n\n  The type of a CatalogItem. Connect V2 only allows the creation of  items.\n\n  Fields\n  \n\n\n      \n\n  \n  \n\n  Indicates whether a CatalogModifierList supports multiple selections.\n\n  Fields\n  \n\n\n      \n\n  \n  \n\n  Possible kinds of CatalogObjects returned from the Catalog, each\ncontaning type-specific properties in the  field corresponding to the object type.\n\n  Fields\n  \n\n\n      \n\n  \n  \n\n  Indicates whether the price of a CatalogItemVariation should be entered manually at the time of sale.\n\n  Fields\n  \n\n\n      \n\n  \n  \n\n  Indicates the country associated with another entity, such as a business.\nValues are in ISO 3166-1-alpha-2 format.\n\n  Fields\n  \n\n\n      \n\n  \n  \n\n  Indicates the associated currency for an amount of money. Values correspond\nto ISO 4217.\n\n  Fields\n  \n\n\n      \n\n  \n  \n\n  Indicates which high-level category of error has occurred during a\nrequest to the Connect API.\n\n  Fields\n  \n\n\n      \n\n  \n  \n\n  Indicates specific errors that can occur during a request to the\nConnect API.\n\n  Fields\n  \n\n\n      \n\n  \n  \n\n  Indicates whether Square should alert the merchant when the inventory quantity of a CatalogItemVariation is low.\n\n  Fields\n  \n\n\n      \n\n  \n  \n\n  Indicates account capabilities that a business's location might or\nmight not have enabled.\n\n  Fields\n  \n\n\n      \n\n  \n  \n\n  Indicates a refund's current status.\n\n  Fields\n  \n\n\n      \n\n  \n  \n\n  The order (e.g., chronological or alphabetical) in which results from a request are returned.\n\n  Fields\n  \n\n\n      \n\n  \n  \n\n  When to calculate the taxes due on a cart.\n\n  Fields\n  \n\n\n      \n\n  \n  \n\n  Whether to the tax amount should be additional to or included in to the CatalogItem price.\n\n  Fields\n  \n\n\n      \n\n  \n  \n\n  Indicates the method used to enter the card's details.\n\n  Fields\n  \n\n\n      \n\n  \n  \n\n  Indicates the card transaction's current status.\n\n  Fields\n  \n\n\n      \n\n  \n  \n\n  Indicates a tender's type.\n\n  Fields\n  \n\n\n      \n\n  \n  \n\n  Indicates the Square product used to process a transaction.\n\n  Fields\n  \n\n\n\n    \n\n  \n  Connect API v2 Changelog\n\n  Additions and changes to the API are described here.", "time": "2017-05-24T23:39:21.760132"}
